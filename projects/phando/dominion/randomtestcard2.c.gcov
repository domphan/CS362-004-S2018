        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominic Phan
        -:    2:// Testing smithy
        -:    3:
        -:    4:#define SEED 35
        -:    5:#define TEST_ITERATIONS 15000
        -:    6:#define MIN_DECK_SMITHY 5
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <math.h>
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:#include <string.h>
        -:   15:#include <time.h>
        -:   16:
        -:   17:struct failStateSmithy {
        -:   18:    int handCountFail;
        -:   19:    int deckFail;
        -:   20:    int playedCardCountFail;
        -:   21:    int playedCardFail;
        -:   22:};
        -:   23:
        -:   24:void initializeFailStateSmithy(struct failStateSmithy* fail)
        -:   25:{
        1:   26:    fail->handCountFail = 0;
        1:   27:    fail->deckFail = 0;
        1:   28:    fail->playedCardCountFail = 0;
        1:   29:    fail->playedCardFail = 0;
        1:   30:}
        -:   31:
        -:   32:void testOracleSmithy(struct gameState* pre, struct failStateSmithy* fail, int player) {
        -:   33:    struct gameState previousCopy;
    15000:   34:    int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, handPos = 0;
    15000:   35:    previousCopy = *pre;
    15000:   36:    cardEffect(smithy, choice1, choice2, choice3, pre, handPos, &bonus);
        -:   37:    // Test that three cards were added to the hand and smithy was removed
    15000:   38:    if (previousCopy.handCount[player] + 2 != pre->handCount[player]) {
    15000:   39:        fail->handCountFail++;
    15000:   40:    }
        -:   41:    // Test that smithy was added to the played pile
    15000:   42:    if (pre->playedCardCount != previousCopy.playedCardCount + 1) {
    #####:   43:        fail->playedCardCountFail++;
    #####:   44:    } else {
    15000:   45:        if (pre->playedCards[pre->playedCardCount-1] != smithy) {
    #####:   46:            fail->playedCardFail++;
    #####:   47:        }
        -:   48:    }
        -:   49:    // Test that the deckCount is the 3 less.
    15000:   50:    if (pre->deckCount[player] != previousCopy.deckCount[player] - 3) {
    15000:   51:        fail->deckFail++;
    15000:   52:    }
    15000:   53:}
        -:   54:
        -:   55:int main(){
        -:   56:    int i, p, k;
        -:   57:    struct gameState testGame;
        -:   58:    struct failStateSmithy failures;
        1:   59:    initializeFailStateSmithy(&failures);
        1:   60:    srand(SEED);
    30002:   61:    for (k = 0; k < TEST_ITERATIONS; k++) {
    15000:   62:        memset(&testGame, 23, sizeof(struct gameState));
789030000:   63:        for (i = 0; i < sizeof(struct gameState); i++) {
394500000:   64:            ((char*)&testGame)[i] = rand() % (255 + 1 - 0) + 0;
394500000:   65:        }
    15000:   66:        p = rand() % (MAX_PLAYERS-1 + 1 - 1) + 1;
    15000:   67:        testGame.discardCount[p] = 0;
    15000:   68:        testGame.handCount[p] = rand() % (MAX_HAND-4 + 1 - 1) + 1;
    15000:   69:        testGame.whoseTurn = p;
    15000:   70:        testGame.deckCount[p] = rand() % (MAX_DECK + 1 - MIN_DECK_SMITHY) + MIN_DECK_SMITHY;
    15000:   71:        testGame.playedCardCount = 0;
    15000:   72:        testGame.hand[p][0] = smithy;
    15000:   73:        testOracleSmithy(&testGame, &failures, p);
    15000:   74:    }
        1:   75:    printf("Testing the smithy card **%d** times\n", TEST_ITERATIONS);
        1:   76:    printf("\tTesting that 3 cards were actually added to the hand and smithy was removed:\n\t\tNumber of failures: %d\n", failures.handCountFail);
        1:   77:    printf("\tTesting that the deck has 3 less cards: %d\n", failures.deckFail);
        1:   78:    printf("\tTesting that a card was added to the played pile:\n\t\tNumber of failures: %d\n", failures.playedCardCountFail);
        1:   79:    printf("\tTesting that the smithy card was put into the played pile:\n\t\tNumber of failures: %d\n", failures.playedCardFail);
        1:   80:}
