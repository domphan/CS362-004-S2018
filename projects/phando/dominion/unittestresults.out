Result for running Dominion test suit:
unittest1.c:
TESTING supplyCount():
	Testing supplyCount() with 2 players
		Checking copper, silver, gold
			Assert Passed
			Assert Passed
			Assert Passed
		Checking curse cards
			Assert Passed
		Checking a kingdom card
			Assert Passed
		Checking a victory card
			Assert Passed
	Testing supplyCount() with 3 players
		Checking copper, silver, gold
			Assert Passed
			Assert Passed
			Assert Passed
		Checking curse cards
			Assert Passed
		Checking a kingdom card
			Assert Passed
		Checking a victory card
			Assert Passed
	Testing supplyCount() with 4 players
		Checking copper, silver, gold
			Assert Passed
			Assert Passed
			Assert Passed
		Checking curse cards
			Assert Passed
		Checking a kingdom card
			Assert Passed
		Checking a victory card
			Assert Passed
FINAL RESULT: All tests passed
File 'unittest1.c'
Lines executed:84.85% of 33
unittest1.c:creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:16.33% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      168:    9:  if (*(int*)a > *(int*)b)
    #####:   10:  return 1;
      168:   11:  if (*(int*)a < *(int*)b)
       60:   12:  return -1;
      108:   13:  return 0;
      168:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
      660:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
      570:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
      300:   65:    }
       30:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
        -:   74:  {
    #####:   75:    state->supplyCount[curse] = 10;
    #####:   76:  }
        3:   77:  else if (numPlayers == 3)
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
    #####:   80:  }
        -:   81:  else
        -:   82:  {
        3:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
        -:   88:  {
    #####:   89:    state->supplyCount[estate] = 8;
    #####:   90:    state->supplyCount[duchy] = 8;
    #####:   91:    state->supplyCount[province] = 8;
    #####:   92:  }
        -:   93:  else
        -:   94:  {
        3:   95:    state->supplyCount[estate] = 12;
        3:   96:    state->supplyCount[duchy] = 12;
        3:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
      990:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    {
      465:  110:      if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
       57:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
        6:  115:          if (numPlayers == 2){
    #####:  116:            state->supplyCount[i] = 8;
    #####:  117:          }
        6:  118:          else{ state->supplyCount[i] = 12; }
        6:  119:        }
        -:  120:        else
        -:  121:        {
       24:  122:          state->supplyCount[i] = 10;
        -:  123:        }
       30:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
      435:  128:        state->supplyCount[i] = -1;
        -:  129:      }
      435:  130:    }
        -:  131:
       60:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:  {
       12:  140:    state->deckCount[i] = 0;
       96:  141:    for (j = 0; j < 3; j++)
        -:  142:    {
       36:  143:      state->deck[i][j] = estate;
       36:  144:      state->deckCount[i]++;
       36:  145:    }
      192:  146:    for (j = 3; j < 10; j++)
        -:  147:    {
       84:  148:      state->deck[i][j] = copper;
       84:  149:      state->deckCount[i]++;
       84:  150:    }
       12:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:  {
       12:  156:    if ( shuffle(i, state) < 0 )
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
       12:  160:  }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:  {
        -:  165:    //initialize hand size to zero
       12:  166:    state->handCount[i] = 0;
       12:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
       12:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:  {
       81:  178:    state->embargoTokens[i] = 0;
       81:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
       15:  193:    drawCard(state->whoseTurn, state);
       15:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        3:  198:  return 0;
        3:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      264:  214:  while (state->deckCount[player] > 0) {
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      834:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      297:  219:      state->deck[player][i] = state->deck[player][i+1];
      297:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      264:  223:  for (i = 0; i < newDeckPos; i++) {
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
      120:  226:  }
        -:  227:
       12:  228:  return 0;
       12:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:    printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:    printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       18:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
    #####:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
    #####:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
    #####:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:  {
    #####:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:  {
    #####:  404:    if (state->supplyCount[i] == 0)
        -:  405:    {
    #####:  406:      j++;
    #####:  407:    }
    #####:  408:  }
    #####:  409:  if ( j >= 3)
        -:  410:  {
    #####:  411:    return 1;
        -:  412:  }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:      players[i] = -9999;
    #####:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
    #####:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
        -:  482:    {
    #####:  483:      j = i;
    #####:  484:    }
    #####:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
        -:  493:    {
    #####:  494:      players[i]++;
    #####:  495:    }
    #####:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
        -:  503:    {
    #####:  504:      j = i;
    #####:  505:    }
    #####:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
        -:  513:    {
    #####:  514:      players[i] = 1;
    #####:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
    #####:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       15:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:    return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       15:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       15:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  576:    state->deckCount[player]--;
       15:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       15:  580:  return 0;
       15:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:  {
        -:  587:    case curse:
    #####:  588:    return 0;
        -:  589:    case estate:
    #####:  590:    return 2;
        -:  591:    case duchy:
    #####:  592:    return 5;
        -:  593:    case province:
    #####:  594:    return 8;
        -:  595:    case copper:
    #####:  596:    return 0;
        -:  597:    case silver:
    #####:  598:    return 3;
        -:  599:    case gold:
    #####:  600:    return 6;
        -:  601:    case adventurer:
    #####:  602:    return 6;
        -:  603:    case council_room:
    #####:  604:    return 5;
        -:  605:    case feast:
    #####:  606:    return 4;
        -:  607:    case gardens:
    #####:  608:    return 4;
        -:  609:    case mine:
    #####:  610:    return 5;
        -:  611:    case remodel:
    #####:  612:    return 4;
        -:  613:    case smithy:
    #####:  614:    return 4;
        -:  615:    case village:
    #####:  616:    return 3;
        -:  617:    case baron:
    #####:  618:    return 4;
        -:  619:    case great_hall:
    #####:  620:    return 3;
        -:  621:    case minion:
    #####:  622:    return 5;
        -:  623:    case steward:
    #####:  624:    return 3;
        -:  625:    case tribute:
    #####:  626:    return 5;
        -:  627:    case ambassador:
    #####:  628:    return 3;
        -:  629:    case cutpurse:
    #####:  630:    return 4;
        -:  631:    case embargo:
    #####:  632:    return 2;
        -:  633:    case outpost:
    #####:  634:    return 5;
        -:  635:    case salvager:
    #####:  636:    return 4;
        -:  637:    case sea_hag:
    #####:  638:    return 4;
        -:  639:    case treasure_map:
    #####:  640:    return 4;
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
    #####:  652:  int currentPlayer = whoseTurn(state);
    #####:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
    #####:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
        -:  658:
    #####:  659:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  660:    nextPlayer = 0;
    #####:  661:  }
        -:  662:
        -:  663:
        -:  664:  //uses switch to select card and perform actions
    #####:  665:  switch( card )
        -:  666:  {
        -:  667:    case adventurer:
    #####:  668:      adventurerAction(state, currentPlayer, temphand);
    #####:  669:      return 0;
        -:  670:
        -:  671:    case council_room:
        -:  672:    //+4 Cards
    #####:  673:    for (i = 0; i < 4; i++)
        -:  674:    {
    #####:  675:      drawCard(currentPlayer, state);
    #####:  676:    }
        -:  677:
        -:  678:    //+1 Buy
    #####:  679:    state->numBuys++;
        -:  680:
        -:  681:    //Each other player draws a card
    #####:  682:    for (i = 0; i < state->numPlayers; i++)
        -:  683:    {
    #####:  684:      if ( i != currentPlayer )
        -:  685:      {
    #####:  686:        drawCard(i, state);
    #####:  687:      }
    #####:  688:    }
        -:  689:
        -:  690:    //put played card in played card pile
    #####:  691:    discardCard(handPos, currentPlayer, state, 0);
        -:  692:
    #####:  693:    return 0;
        -:  694:
        -:  695:    case feast:
    #####:  696:      feastAction(state, temphand, currentPlayer, choice1, choice2, choice3);
    #####:  697:      return 0;
        -:  698:
        -:  699:    case gardens:
    #####:  700:    return -1;
        -:  701:
        -:  702:    case mine:
    #####:  703:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  704:    //printf("***This is the card we will trash: %d\n", j);
    #####:  705:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  706:    {
        -:  707:      // printf("***choice1 is not valid\n");
    #####:  708:      return -1;
        -:  709:    }
        -:  710:
    #####:  711:    if (choice2 > treasure_map || choice2 < curse)
        -:  712:    {
        -:  713:      //printf("***choice2 is not valid\n");
    #####:  714:      return -1;
        -:  715:    }
        -:  716:
    #####:  717:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  718:    {
        -:  719:      //printf("***cost difference is not valid %d AND %d\n", getCost(state->hand[currentPlayer][choice1]) + 3, getCost(choice2));
    #####:  720:      return -1;
        -:  721:    }
        -:  722:    //printf("*** The card I am trying to gain: %d\n", choice2);
    #####:  723:    gainCard(choice2, state, 2, currentPlayer);
        -:  724:    //printf("*** What i am discarding: %d\n", handPos);
        -:  725:    //discard card from hand
    #####:  726:    discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:    //discard trashed card
    #####:  729:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  730:    {
    #####:  731:      if (state->hand[currentPlayer][i] == j)
        -:  732:      {
        -:  733:        //printf("***Tryna discard this trashed card: %d\n", j);
    #####:  734:        discardCard(i, currentPlayer, state, 0);
    #####:  735:        break;
        -:  736:      }
    #####:  737:    }
        -:  738:
    #####:  739:    return 0;
        -:  740:
        -:  741:    case remodel:
    #####:  742:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  743:
    #####:  744:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  745:    {
    #####:  746:      return -1;
        -:  747:    }
        -:  748:
    #####:  749:    gainCard(choice2, state, 0, currentPlayer);
        -:  750:
        -:  751:    //discard card from hand
    #####:  752:    discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:    //discard trashed card
    #####:  755:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:    {
    #####:  757:      if (state->hand[currentPlayer][i] == j)
        -:  758:      {
    #####:  759:        discardCard(i, currentPlayer, state, 0);
    #####:  760:        break;
        -:  761:      }
    #####:  762:    }
        -:  763:
        -:  764:
    #####:  765:    return 0;
        -:  766:
        -:  767:    case smithy:
    #####:  768:    smithyAction(state, handPos, currentPlayer);
    #####:  769:    return 0;
        -:  770:
        -:  771:    case village:
        -:  772:    //+1 Card
    #####:  773:    drawCard(currentPlayer, state);
        -:  774:
        -:  775:    //+2 Actions
    #####:  776:    state->numActions = state->numActions + 2;
        -:  777:
        -:  778:    //discard played card from hand
    #####:  779:    discardCard(handPos, currentPlayer, state, 0);
    #####:  780:    return 0;
        -:  781:
        -:  782:    case baron:
    #####:  783:    state->numBuys++;//Increase buys by 1!
    #####:  784:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  785:      int p = 0;//Iterator for hand!
    #####:  786:      int card_not_discarded = 1;//Flag for discard set!
    #####:  787:      while(card_not_discarded){
    #####:  788:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  789:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  790:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  791:          state->discardCount[currentPlayer]++;
    #####:  792:          for (;p < state->handCount[currentPlayer]; p++){
    #####:  793:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  794:          }
    #####:  795:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  796:          state->handCount[currentPlayer]--;
    #####:  797:          card_not_discarded = 0;//Exit the loop
    #####:  798:        }
    #####:  799:        else if (p > state->handCount[currentPlayer]){
        -:  800:          if(DEBUG) {
        -:  801:            printf("No estate cards in your hand, invalid choice\n");
        -:  802:            printf("Must gain an estate if there are any\n");
        -:  803:          }
    #####:  804:          if (supplyCount(estate, state) > 0){
    #####:  805:            gainCard(estate, state, 0, currentPlayer);
    #####:  806:            state->supplyCount[estate]--;//Decrement estates
    #####:  807:            if (supplyCount(estate, state) == 0){
    #####:  808:              isGameOver(state);
    #####:  809:            }
    #####:  810:          }
    #####:  811:          card_not_discarded = 0;//Exit the loop
    #####:  812:        }
        -:  813:
        -:  814:        else{
    #####:  815:          p++;//Next card
        -:  816:        }
        -:  817:      }
    #####:  818:    }
        -:  819:
        -:  820:    else{
    #####:  821:      if (supplyCount(estate, state) > 0){
    #####:  822:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:        state->supplyCount[estate]--;//Decrement Estates
    #####:  824:        if (supplyCount(estate, state) == 0){
    #####:  825:          isGameOver(state);
    #####:  826:        }
    #####:  827:      }
        -:  828:    }
        -:  829:
        -:  830:
    #####:  831:    return 0;
        -:  832:
        -:  833:    case great_hall:
        -:  834:    //+1 Card
    #####:  835:    drawCard(currentPlayer, state);
        -:  836:
        -:  837:    //+1 Actions
    #####:  838:    state->numActions++;
        -:  839:
        -:  840:    //discard card from hand
    #####:  841:    discardCard(handPos, currentPlayer, state, 0);
    #####:  842:    return 0;
        -:  843:
        -:  844:    case minion:
    #####:  845:      minionAction(state, handPos, currentPlayer, choice1, choice2, choice3);
    #####:  846:      return 0;
        -:  847:
        -:  848:    case steward:
    #####:  849:      stewardAction(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####:  850:      return 0;
        -:  851:
        -:  852:    case tribute:
    #####:  853:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  854:      if (state->deckCount[nextPlayer] > 0){
    #####:  855:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  856:        state->deckCount[nextPlayer]--;
    #####:  857:      }
    #####:  858:      else if (state->discardCount[nextPlayer] > 0){
    #####:  859:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  860:        state->discardCount[nextPlayer]--;
    #####:  861:      }
        -:  862:      else{
        -:  863:        //No Card to Reveal
        -:  864:        if (DEBUG){
        -:  865:          printf("No cards to reveal\n");
        -:  866:        }
        -:  867:      }
    #####:  868:    }
        -:  869:
        -:  870:    else{
    #####:  871:      if (state->deckCount[nextPlayer] == 0){
    #####:  872:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  873:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  874:          state->deckCount[nextPlayer]++;
    #####:  875:          state->discard[nextPlayer][i] = -1;
    #####:  876:          state->discardCount[nextPlayer]--;
    #####:  877:        }
        -:  878:
    #####:  879:        shuffle(nextPlayer,state);//Shuffle the deck
    #####:  880:      }
    #####:  881:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  882:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  883:      state->deckCount[nextPlayer]--;
    #####:  884:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  886:      state->deckCount[nextPlayer]--;
        -:  887:    }
        -:  888:
    #####:  889:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  890:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  891:      state->playedCardCount++;
    #####:  892:      tributeRevealedCards[1] = -1;
    #####:  893:    }
        -:  894:
    #####:  895:    for (i = 0; i <= 2; i ++){
    #####:  896:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  897:        state->coins += 2;
    #####:  898:      }
        -:  899:
    #####:  900:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  901:        drawCard(currentPlayer, state);
    #####:  902:        drawCard(currentPlayer, state);
    #####:  903:      }
        -:  904:      else{//Action Card
    #####:  905:        state->numActions = state->numActions + 2;
        -:  906:      }
    #####:  907:    }
        -:  908:
    #####:  909:    return 0;
        -:  910:
        -:  911:    case ambassador:
    #####:  912:    j = 0;		//used to check if player has enough cards to discard
        -:  913:
    #####:  914:    if (choice2 > 2 || choice2 < 0)
        -:  915:    {
    #####:  916:      return -1;
        -:  917:    }
        -:  918:
    #####:  919:    if (choice1 == handPos)
        -:  920:    {
    #####:  921:      return -1;
        -:  922:    }
        -:  923:
    #####:  924:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  925:    {
    #####:  926:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  927:      {
    #####:  928:        j++;
    #####:  929:      }
    #####:  930:    }
    #####:  931:    if (j < choice2)
        -:  932:    {
    #####:  933:      return -1;
        -:  934:    }
        -:  935:
        -:  936:    if (DEBUG)
        -:  937:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  938:
        -:  939:    //increase supply count for choosen card by amount being discarded
    #####:  940:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  941:
        -:  942:    //each other player gains a copy of revealed card
    #####:  943:    for (i = 0; i < state->numPlayers; i++)
        -:  944:    {
    #####:  945:      if (i != currentPlayer)
        -:  946:      {
    #####:  947:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  948:      }
    #####:  949:    }
        -:  950:
        -:  951:    //discard played card from hand
    #####:  952:    discardCard(handPos, currentPlayer, state, 0);
        -:  953:
        -:  954:    //trash copies of cards returned to supply
    #####:  955:    for (j = 0; j < choice2; j++)
        -:  956:    {
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:      {
    #####:  959:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  960:        {
    #####:  961:          discardCard(i, currentPlayer, state, 1);
    #####:  962:          break;
        -:  963:        }
    #####:  964:      }
    #####:  965:    }
        -:  966:
    #####:  967:    return 0;
        -:  968:
        -:  969:    case cutpurse:
        -:  970:
    #####:  971:    updateCoins(currentPlayer, state, 2);
    #####:  972:    for (i = 0; i < state->numPlayers; i++)
        -:  973:    {
    #####:  974:      if (i != currentPlayer)
        -:  975:      {
    #####:  976:        for (j = 0; j < state->handCount[i]; j++)
        -:  977:        {
    #####:  978:          if (state->hand[i][j] == copper)
        -:  979:          {
    #####:  980:            discardCard(j, i, state, 0);
    #####:  981:            break;
        -:  982:          }
    #####:  983:          if (j == state->handCount[i])
        -:  984:          {
    #####:  985:            for (k = 0; k < state->handCount[i]; k++)
        -:  986:            {
        -:  987:              if (DEBUG)
        -:  988:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  989:            }
    #####:  990:            break;
        -:  991:          }
    #####:  992:        }
        -:  993:
    #####:  994:      }
        -:  995:
    #####:  996:    }
        -:  997:
        -:  998:    //discard played card from hand
    #####:  999:    discardCard(handPos, currentPlayer, state, 0);
        -: 1000:
    #####: 1001:    return 0;
        -: 1002:
        -: 1003:
        -: 1004:    case embargo:
        -: 1005:    //+2 Coins
    #####: 1006:    state->coins = state->coins + 2;
        -: 1007:
        -: 1008:    //see if selected pile is in play
    #####: 1009:    if ( state->supplyCount[choice1] == -1 )
        -: 1010:    {
    #####: 1011:      return -1;
        -: 1012:    }
        -: 1013:
        -: 1014:    //add embargo token to selected supply pile
    #####: 1015:    state->embargoTokens[choice1]++;
        -: 1016:
        -: 1017:    //trash card
    #####: 1018:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1019:    return 0;
        -: 1020:
        -: 1021:    case outpost:
        -: 1022:    //set outpost flag
    #####: 1023:    state->outpostPlayed++;
        -: 1024:
        -: 1025:    //discard card
    #####: 1026:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:    return 0;
        -: 1028:
        -: 1029:    case salvager:
        -: 1030:    //+1 buy
    #####: 1031:    state->numBuys++;
        -: 1032:
    #####: 1033:    if (choice1)
        -: 1034:    {
        -: 1035:      //gain coins equal to trashed card
    #####: 1036:      state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1037:      //trash card
    #####: 1038:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1039:    }
        -: 1040:
        -: 1041:    //discard card
    #####: 1042:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:    return 0;
        -: 1044:
        -: 1045:    case sea_hag:
    #####: 1046:    for (i = 0; i < state->numPlayers; i++){
    #####: 1047:      if (i != currentPlayer){
    #####: 1048:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1049:        state->discardCount[i]++;
    #####: 1050:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1051:      }
    #####: 1052:    }
    #####: 1053:    return 0;
        -: 1054:
        -: 1055:    case treasure_map:
        -: 1056:    //search hand for another treasure_map
    #####: 1057:    index = -1;
    #####: 1058:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1059:    {
    #####: 1060:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1061:      {
    #####: 1062:        index = i;
    #####: 1063:        break;
        -: 1064:      }
    #####: 1065:    }
    #####: 1066:    if (index > -1)
        -: 1067:    {
        -: 1068:      //trash both treasure cards
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1070:      discardCard(index, currentPlayer, state, 1);
        -: 1071:
        -: 1072:      //gain 4 Gold cards
    #####: 1073:      for (i = 0; i < 4; i++)
        -: 1074:      {
    #####: 1075:        gainCard(gold, state, 1, currentPlayer);
    #####: 1076:      }
        -: 1077:
        -: 1078:      //return success
    #####: 1079:      return 1;
        -: 1080:    }
        -: 1081:
        -: 1082:    //no second treasure_map found in hand
    #####: 1083:    return -1;
        -: 1084:  }
        -: 1085:
    #####: 1086:  return -1;
    #####: 1087:}
        -: 1088:
        -: 1089:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1090:{
        -: 1091:
        -: 1092:  //if card is not trashed, added to Played pile
    #####: 1093:  if (trashFlag < 1)
        -: 1094:  {
        -: 1095:    //add card to played pile
    #####: 1096:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1097:    state->playedCardCount++;
    #####: 1098:  }
        -: 1099:
        -: 1100:  //set played card to -1
    #####: 1101:  state->hand[currentPlayer][handPos] = -1;
        -: 1102:
        -: 1103:  //remove card from player's hand
    #####: 1104:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1105:  {
        -: 1106:    //reduce number of cards in hand
    #####: 1107:    state->handCount[currentPlayer]--;
    #####: 1108:  }
    #####: 1109:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1110:  {
        -: 1111:    //reduce number of cards in hand
    #####: 1112:    state->handCount[currentPlayer]--;
    #####: 1113:  }
        -: 1114:  else
        -: 1115:  {
        -: 1116:    //replace discarded card with last card in hand
    #####: 1117:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1118:    //set last card to -1
    #####: 1119:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1120:    //reduce number of cards in hand
    #####: 1121:    state->handCount[currentPlayer]--;
        -: 1122:  }
        -: 1123:
    #####: 1124:  return 0;
        -: 1125:}
        -: 1126:
        -: 1127:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1128:{
        -: 1129:  //Note: supplyPos is enum of choosen card
        -: 1130:
        -: 1131:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1132:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1133:  {
    #####: 1134:    return -1;
        -: 1135:  }
        -: 1136:
        -: 1137:  //added card for [whoseTurn] current player:
        -: 1138:  // toFlag = 0 : add to discard
        -: 1139:  // toFlag = 1 : add to deck
        -: 1140:  // toFlag = 2 : add to hand
        -: 1141:
    #####: 1142:  if (toFlag == 1)
        -: 1143:  {
    #####: 1144:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1145:    state->deckCount[player]++;
    #####: 1146:  }
    #####: 1147:  else if (toFlag == 2)
        -: 1148:  {
    #####: 1149:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1150:    state->handCount[player]++;
    #####: 1151:  }
        -: 1152:  else
        -: 1153:  {
    #####: 1154:    state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1155:    state->discardCount[player]++;
        -: 1156:  }
        -: 1157:
        -: 1158:  //decrease number in supply pile
    #####: 1159:  state->supplyCount[supplyPos]--;
        -: 1160:
    #####: 1161:  return 0;
    #####: 1162:}
        -: 1163:
        -: 1164:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1165:{
        -: 1166:  int i;
        -: 1167:
        -: 1168:  //reset coin count
        3: 1169:  state->coins = 0;
        -: 1170:
        -: 1171:  //add coins for each Treasure card in player's hand
       36: 1172:  for (i = 0; i < state->handCount[player]; i++)
        -: 1173:  {
       15: 1174:    if (state->hand[player][i] == copper)
        -: 1175:    {
       12: 1176:      state->coins += 1;
       12: 1177:    }
        3: 1178:    else if (state->hand[player][i] == silver)
        -: 1179:    {
    #####: 1180:      state->coins += 2;
    #####: 1181:    }
        3: 1182:    else if (state->hand[player][i] == gold)
        -: 1183:    {
    #####: 1184:      state->coins += 3;
    #####: 1185:    }
       15: 1186:  }
        -: 1187:
        -: 1188:  //add bonus
        3: 1189:  state->coins += bonus;
        -: 1190:
        3: 1191:  return 0;
        -: 1192:}
        -: 1193:
        -: 1194:void smithyAction(struct gameState *state, int handPos, int currentPlayer){
        -: 1195:  //+3 Cards
    #####: 1196:  for (int i = 0; i <= 3; i++) { // BUG: added = to <
    #####: 1197:    drawCard(currentPlayer, state);
    #####: 1198:  }
        -: 1199:  //discard card from hand
    #####: 1200:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1201:}
        -: 1202:
        -: 1203:void adventurerAction(struct gameState *state, int currentPlayer, int temphand[]){
        -: 1204:  int cardDrawn;
    #####: 1205:  int drawnTreasure = 0;
    #####: 1206:  int z = 0;// this is the counter for the temp hand
    #####: 1207:  while(drawnTreasure <= 2){ // BUG: added = to <
    #####: 1208:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1209:      shuffle(currentPlayer, state);
    #####: 1210:    }
    #####: 1211:    drawCard(currentPlayer, state);
    #####: 1212:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1213:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1214:    drawnTreasure++;
        -: 1215:    else{
    #####: 1216:      temphand[z]=cardDrawn;
    #####: 1217:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1218:      z++;
        -: 1219:    }
        -: 1220:  }
    #####: 1221:  while(z-1>=0){
    #####: 1222:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1223:    z=z-1;
        -: 1224:  }
    #####: 1225:}
        -: 1226:
        -: 1227:void stewardAction(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3) {
    #####: 1228:  if (choice1 == 1)
        -: 1229:  {
        -: 1230:    //+2 cards
    #####: 1231:    drawCard(currentPlayer, state);
    #####: 1232:    drawCard(currentPlayer, state);
    #####: 1233:  }
    #####: 1234:  else if (choice1 == 2)
        -: 1235:  {
        -: 1236:    //+2 coins
    #####: 1237:    state->coins = /*state->coins*/ + 2; //BUG: removed state->coins
    #####: 1238:  }
        -: 1239:  else
        -: 1240:  {
        -: 1241:    //trash 2 cards in hand
    #####: 1242:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1243:    discardCard(choice3, currentPlayer, state, 1);
        -: 1244:  }
        -: 1245:
        -: 1246:  //discard card from hand
    #####: 1247:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:}
        -: 1249:
        -: 1250:void minionAction(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2, int choice3) {
        -: 1251:  //+1 action
    #####: 1252:  state->numActions++;
        -: 1253:
        -: 1254:  //discard card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
        -: 1256:
    #####: 1257:  if (choice1)		//+2 coins
        -: 1258:  {
    #####: 1259:    state->coins = state->coins + 2;
    #####: 1260:  }
        -: 1261:
    #####: 1262:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1263:  {
        -: 1264:    //discard hand
    #####: 1265:    while(numHandCards(state) > 0)
        -: 1266:    {
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);
        -: 1268:    }
        -: 1269:
        -: 1270:    //draw 4
    #####: 1271:    for (int i = 0; i < 4; i++)
        -: 1272:    {
    #####: 1273:      drawCard(currentPlayer, state);
    #####: 1274:    }
        -: 1275:
        -: 1276:    //other players discard hand and redraw if hand size > 4
    #####: 1277:    for (int i = 0; i < state->numPlayers; i++)
        -: 1278:    {
    #####: 1279:      if (i != currentPlayer)
        -: 1280:      {
    #####: 1281:        if ( state->handCount[i] > 4 )
        -: 1282:        {
        -: 1283:          //discard hand
    #####: 1284:          while( state->handCount[i] > 0 )
        -: 1285:          {
    #####: 1286:            discardCard(handPos, i, state, 0);
        -: 1287:          }
        -: 1288:
        -: 1289:          //draw 4
    #####: 1290:          for (int j = 0; j < 4; j++)
        -: 1291:          {
    #####: 1292:            drawCard(i, state);
    #####: 1293:          }
    #####: 1294:        }
    #####: 1295:      }
    #####: 1296:    }
        -: 1297:
    #####: 1298:  }
    #####: 1299:}
        -: 1300:
        -: 1301:void feastAction(struct gameState *state, int temphand[], int currentPlayer, int choice1, int choice2, int choice3){
        -: 1302:  //gain card with cost up to 5
        -: 1303:  //Backup hand
    #####: 1304:  for (int i = 0; i < state->handCount[currentPlayer]; i++){ // BUG: removed = from >=
    #####: 1305:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1306:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1307:  }
        -: 1308:  //Backup hand
        -: 1309:
        -: 1310:  //Update Coins for Buy
    #####: 1311:  updateCoins(currentPlayer, state, 5);
    #####: 1312:  int x = 1;//Condition to loop on
    #####: 1313:  while( x == 1) {//Buy one card
    #####: 1314:    if (supplyCount(choice1, state) <= 0){
        -: 1315:      if (DEBUG)
        -: 1316:      printf("None of that card left, sorry!\n");
        -: 1317:
        -: 1318:      if (DEBUG){
        -: 1319:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1320:      }
    #####: 1321:    }
    #####: 1322:    else if (state->coins < getCost(choice1)){
    #####: 1323:      printf("That card is too expensive!\n");
        -: 1324:
        -: 1325:      if (DEBUG){
        -: 1326:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1327:      }
    #####: 1328:    }
        -: 1329:    else{
        -: 1330:
        -: 1331:      if (DEBUG){
        -: 1332:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1333:      }
        -: 1334:
    #####: 1335:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1336:      x = 0;//No more buying cards
        -: 1337:
        -: 1338:      if (DEBUG){
        -: 1339:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1340:      }
        -: 1341:
        -: 1342:    }
        -: 1343:  }
        -: 1344:
        -: 1345:  //Reset Hand
    #####: 1346:  for (int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1347:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1348:    temphand[i] = -1;
    #####: 1349:  }
        -: 1350:  //Reset Hand
    #####: 1351:}
        -: 1352:
        -: 1353://end of dominion.c
unittest2.c:
Testing handCard()
	Checking card 0:
		Comparing result: 7 to expected: 7
			Assert Passed
	Checking card 1:
		Comparing result: 4 to expected: 4
			Assert Passed
	Checking card 2:
		Comparing result: 5 to expected: 5
			Assert Passed
	Checking card 3:
		Comparing result: 6 to expected: 6
			Assert Passed
	Checking card 4:
		Comparing result: 16 to expected: 16
			Assert Passed
FINAL RESULT: All tests passed
File 'unittest2.c'
Lines executed:89.29% of 28
unittest2.c:creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:18.03% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      196:    9:  if (*(int*)a > *(int*)b)
    #####:   10:  return 1;
      196:   11:  if (*(int*)a < *(int*)b)
       70:   12:  return -1;
      126:   13:  return 0;
      196:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
        4:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
      880:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
      760:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
      400:   65:    }
       40:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
        -:   74:  {
        1:   75:    state->supplyCount[curse] = 10;
        1:   76:  }
        3:   77:  else if (numPlayers == 3)
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
    #####:   80:  }
        -:   81:  else
        -:   82:  {
        3:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
        -:   88:  {
        1:   89:    state->supplyCount[estate] = 8;
        1:   90:    state->supplyCount[duchy] = 8;
        1:   91:    state->supplyCount[province] = 8;
        1:   92:  }
        -:   93:  else
        -:   94:  {
        3:   95:    state->supplyCount[estate] = 12;
        3:   96:    state->supplyCount[duchy] = 12;
        3:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     1320:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    {
      620:  110:      if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
       76:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
        8:  115:          if (numPlayers == 2){
        2:  116:            state->supplyCount[i] = 8;
        2:  117:          }
        6:  118:          else{ state->supplyCount[i] = 12; }
        8:  119:        }
        -:  120:        else
        -:  121:        {
       32:  122:          state->supplyCount[i] = 10;
        -:  123:        }
       40:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
      580:  128:        state->supplyCount[i] = -1;
        -:  129:      }
      580:  130:    }
        -:  131:
       80:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       36:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:  {
       14:  140:    state->deckCount[i] = 0;
      112:  141:    for (j = 0; j < 3; j++)
        -:  142:    {
       42:  143:      state->deck[i][j] = estate;
       42:  144:      state->deckCount[i]++;
       42:  145:    }
      224:  146:    for (j = 3; j < 10; j++)
        -:  147:    {
       98:  148:      state->deck[i][j] = copper;
       98:  149:      state->deckCount[i]++;
       98:  150:    }
       14:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
       36:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:  {
       14:  156:    if ( shuffle(i, state) < 0 )
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
       14:  160:  }
        -:  161:
        -:  162:  //draw player hands
       36:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:  {
        -:  165:    //initialize hand size to zero
       14:  166:    state->handCount[i] = 0;
       14:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
       14:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:  {
      108:  178:    state->embargoTokens[i] = 0;
      108:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
       20:  193:    drawCard(state->whoseTurn, state);
       20:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        4:  198:  return 0;
        4:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       14:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       14:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       14:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      308:  214:  while (state->deckCount[player] > 0) {
      140:  215:    card = floor(Random() * state->deckCount[player]);
      140:  216:    newDeck[newDeckPos] = state->deck[player][card];
      140:  217:    newDeckPos++;
      974:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      347:  219:      state->deck[player][i] = state->deck[player][i+1];
      347:  220:    }
      140:  221:    state->deckCount[player]--;
        -:  222:  }
      308:  223:  for (i = 0; i < newDeckPos; i++) {
      140:  224:    state->deck[player][i] = newDeck[i];
      140:  225:    state->deckCount[player]++;
      140:  226:  }
        -:  227:
       14:  228:  return 0;
       14:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:    printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:    printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       18:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
    #####:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
    #####:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
    #####:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:  {
    #####:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:  {
    #####:  404:    if (state->supplyCount[i] == 0)
        -:  405:    {
    #####:  406:      j++;
    #####:  407:    }
    #####:  408:  }
    #####:  409:  if ( j >= 3)
        -:  410:  {
    #####:  411:    return 1;
        -:  412:  }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:      players[i] = -9999;
    #####:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
    #####:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
        -:  482:    {
    #####:  483:      j = i;
    #####:  484:    }
    #####:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
        -:  493:    {
    #####:  494:      players[i]++;
    #####:  495:    }
    #####:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
        -:  503:    {
    #####:  504:      j = i;
    #####:  505:    }
    #####:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
        -:  513:    {
    #####:  514:      players[i] = 1;
    #####:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
    #####:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:    return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       20:  580:  return 0;
       20:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:  {
        -:  587:    case curse:
    #####:  588:    return 0;
        -:  589:    case estate:
    #####:  590:    return 2;
        -:  591:    case duchy:
    #####:  592:    return 5;
        -:  593:    case province:
    #####:  594:    return 8;
        -:  595:    case copper:
    #####:  596:    return 0;
        -:  597:    case silver:
    #####:  598:    return 3;
        -:  599:    case gold:
    #####:  600:    return 6;
        -:  601:    case adventurer:
    #####:  602:    return 6;
        -:  603:    case council_room:
    #####:  604:    return 5;
        -:  605:    case feast:
    #####:  606:    return 4;
        -:  607:    case gardens:
    #####:  608:    return 4;
        -:  609:    case mine:
    #####:  610:    return 5;
        -:  611:    case remodel:
    #####:  612:    return 4;
        -:  613:    case smithy:
    #####:  614:    return 4;
        -:  615:    case village:
    #####:  616:    return 3;
        -:  617:    case baron:
    #####:  618:    return 4;
        -:  619:    case great_hall:
    #####:  620:    return 3;
        -:  621:    case minion:
    #####:  622:    return 5;
        -:  623:    case steward:
    #####:  624:    return 3;
        -:  625:    case tribute:
    #####:  626:    return 5;
        -:  627:    case ambassador:
    #####:  628:    return 3;
        -:  629:    case cutpurse:
    #####:  630:    return 4;
        -:  631:    case embargo:
    #####:  632:    return 2;
        -:  633:    case outpost:
    #####:  634:    return 5;
        -:  635:    case salvager:
    #####:  636:    return 4;
        -:  637:    case sea_hag:
    #####:  638:    return 4;
        -:  639:    case treasure_map:
    #####:  640:    return 4;
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
    #####:  652:  int currentPlayer = whoseTurn(state);
    #####:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
    #####:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
        -:  658:
    #####:  659:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  660:    nextPlayer = 0;
    #####:  661:  }
        -:  662:
        -:  663:
        -:  664:  //uses switch to select card and perform actions
    #####:  665:  switch( card )
        -:  666:  {
        -:  667:    case adventurer:
    #####:  668:      adventurerAction(state, currentPlayer, temphand);
    #####:  669:      return 0;
        -:  670:
        -:  671:    case council_room:
        -:  672:    //+4 Cards
    #####:  673:    for (i = 0; i < 4; i++)
        -:  674:    {
    #####:  675:      drawCard(currentPlayer, state);
    #####:  676:    }
        -:  677:
        -:  678:    //+1 Buy
    #####:  679:    state->numBuys++;
        -:  680:
        -:  681:    //Each other player draws a card
    #####:  682:    for (i = 0; i < state->numPlayers; i++)
        -:  683:    {
    #####:  684:      if ( i != currentPlayer )
        -:  685:      {
    #####:  686:        drawCard(i, state);
    #####:  687:      }
    #####:  688:    }
        -:  689:
        -:  690:    //put played card in played card pile
    #####:  691:    discardCard(handPos, currentPlayer, state, 0);
        -:  692:
    #####:  693:    return 0;
        -:  694:
        -:  695:    case feast:
    #####:  696:      feastAction(state, temphand, currentPlayer, choice1, choice2, choice3);
    #####:  697:      return 0;
        -:  698:
        -:  699:    case gardens:
    #####:  700:    return -1;
        -:  701:
        -:  702:    case mine:
    #####:  703:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  704:    //printf("***This is the card we will trash: %d\n", j);
    #####:  705:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  706:    {
        -:  707:      // printf("***choice1 is not valid\n");
    #####:  708:      return -1;
        -:  709:    }
        -:  710:
    #####:  711:    if (choice2 > treasure_map || choice2 < curse)
        -:  712:    {
        -:  713:      //printf("***choice2 is not valid\n");
    #####:  714:      return -1;
        -:  715:    }
        -:  716:
    #####:  717:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  718:    {
        -:  719:      //printf("***cost difference is not valid %d AND %d\n", getCost(state->hand[currentPlayer][choice1]) + 3, getCost(choice2));
    #####:  720:      return -1;
        -:  721:    }
        -:  722:    //printf("*** The card I am trying to gain: %d\n", choice2);
    #####:  723:    gainCard(choice2, state, 2, currentPlayer);
        -:  724:    //printf("*** What i am discarding: %d\n", handPos);
        -:  725:    //discard card from hand
    #####:  726:    discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:    //discard trashed card
    #####:  729:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  730:    {
    #####:  731:      if (state->hand[currentPlayer][i] == j)
        -:  732:      {
        -:  733:        //printf("***Tryna discard this trashed card: %d\n", j);
    #####:  734:        discardCard(i, currentPlayer, state, 0);
    #####:  735:        break;
        -:  736:      }
    #####:  737:    }
        -:  738:
    #####:  739:    return 0;
        -:  740:
        -:  741:    case remodel:
    #####:  742:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  743:
    #####:  744:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  745:    {
    #####:  746:      return -1;
        -:  747:    }
        -:  748:
    #####:  749:    gainCard(choice2, state, 0, currentPlayer);
        -:  750:
        -:  751:    //discard card from hand
    #####:  752:    discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:    //discard trashed card
    #####:  755:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:    {
    #####:  757:      if (state->hand[currentPlayer][i] == j)
        -:  758:      {
    #####:  759:        discardCard(i, currentPlayer, state, 0);
    #####:  760:        break;
        -:  761:      }
    #####:  762:    }
        -:  763:
        -:  764:
    #####:  765:    return 0;
        -:  766:
        -:  767:    case smithy:
    #####:  768:    smithyAction(state, handPos, currentPlayer);
    #####:  769:    return 0;
        -:  770:
        -:  771:    case village:
        -:  772:    //+1 Card
    #####:  773:    drawCard(currentPlayer, state);
        -:  774:
        -:  775:    //+2 Actions
    #####:  776:    state->numActions = state->numActions + 2;
        -:  777:
        -:  778:    //discard played card from hand
    #####:  779:    discardCard(handPos, currentPlayer, state, 0);
    #####:  780:    return 0;
        -:  781:
        -:  782:    case baron:
    #####:  783:    state->numBuys++;//Increase buys by 1!
    #####:  784:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  785:      int p = 0;//Iterator for hand!
    #####:  786:      int card_not_discarded = 1;//Flag for discard set!
    #####:  787:      while(card_not_discarded){
    #####:  788:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  789:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  790:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  791:          state->discardCount[currentPlayer]++;
    #####:  792:          for (;p < state->handCount[currentPlayer]; p++){
    #####:  793:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  794:          }
    #####:  795:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  796:          state->handCount[currentPlayer]--;
    #####:  797:          card_not_discarded = 0;//Exit the loop
    #####:  798:        }
    #####:  799:        else if (p > state->handCount[currentPlayer]){
        -:  800:          if(DEBUG) {
        -:  801:            printf("No estate cards in your hand, invalid choice\n");
        -:  802:            printf("Must gain an estate if there are any\n");
        -:  803:          }
    #####:  804:          if (supplyCount(estate, state) > 0){
    #####:  805:            gainCard(estate, state, 0, currentPlayer);
    #####:  806:            state->supplyCount[estate]--;//Decrement estates
    #####:  807:            if (supplyCount(estate, state) == 0){
    #####:  808:              isGameOver(state);
    #####:  809:            }
    #####:  810:          }
    #####:  811:          card_not_discarded = 0;//Exit the loop
    #####:  812:        }
        -:  813:
        -:  814:        else{
    #####:  815:          p++;//Next card
        -:  816:        }
        -:  817:      }
    #####:  818:    }
        -:  819:
        -:  820:    else{
    #####:  821:      if (supplyCount(estate, state) > 0){
    #####:  822:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:        state->supplyCount[estate]--;//Decrement Estates
    #####:  824:        if (supplyCount(estate, state) == 0){
    #####:  825:          isGameOver(state);
    #####:  826:        }
    #####:  827:      }
        -:  828:    }
        -:  829:
        -:  830:
    #####:  831:    return 0;
        -:  832:
        -:  833:    case great_hall:
        -:  834:    //+1 Card
    #####:  835:    drawCard(currentPlayer, state);
        -:  836:
        -:  837:    //+1 Actions
    #####:  838:    state->numActions++;
        -:  839:
        -:  840:    //discard card from hand
    #####:  841:    discardCard(handPos, currentPlayer, state, 0);
    #####:  842:    return 0;
        -:  843:
        -:  844:    case minion:
    #####:  845:      minionAction(state, handPos, currentPlayer, choice1, choice2, choice3);
    #####:  846:      return 0;
        -:  847:
        -:  848:    case steward:
    #####:  849:      stewardAction(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####:  850:      return 0;
        -:  851:
        -:  852:    case tribute:
    #####:  853:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  854:      if (state->deckCount[nextPlayer] > 0){
    #####:  855:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  856:        state->deckCount[nextPlayer]--;
    #####:  857:      }
    #####:  858:      else if (state->discardCount[nextPlayer] > 0){
    #####:  859:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  860:        state->discardCount[nextPlayer]--;
    #####:  861:      }
        -:  862:      else{
        -:  863:        //No Card to Reveal
        -:  864:        if (DEBUG){
        -:  865:          printf("No cards to reveal\n");
        -:  866:        }
        -:  867:      }
    #####:  868:    }
        -:  869:
        -:  870:    else{
    #####:  871:      if (state->deckCount[nextPlayer] == 0){
    #####:  872:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  873:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  874:          state->deckCount[nextPlayer]++;
    #####:  875:          state->discard[nextPlayer][i] = -1;
    #####:  876:          state->discardCount[nextPlayer]--;
    #####:  877:        }
        -:  878:
    #####:  879:        shuffle(nextPlayer,state);//Shuffle the deck
    #####:  880:      }
    #####:  881:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  882:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  883:      state->deckCount[nextPlayer]--;
    #####:  884:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  886:      state->deckCount[nextPlayer]--;
        -:  887:    }
        -:  888:
    #####:  889:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  890:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  891:      state->playedCardCount++;
    #####:  892:      tributeRevealedCards[1] = -1;
    #####:  893:    }
        -:  894:
    #####:  895:    for (i = 0; i <= 2; i ++){
    #####:  896:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  897:        state->coins += 2;
    #####:  898:      }
        -:  899:
    #####:  900:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  901:        drawCard(currentPlayer, state);
    #####:  902:        drawCard(currentPlayer, state);
    #####:  903:      }
        -:  904:      else{//Action Card
    #####:  905:        state->numActions = state->numActions + 2;
        -:  906:      }
    #####:  907:    }
        -:  908:
    #####:  909:    return 0;
        -:  910:
        -:  911:    case ambassador:
    #####:  912:    j = 0;		//used to check if player has enough cards to discard
        -:  913:
    #####:  914:    if (choice2 > 2 || choice2 < 0)
        -:  915:    {
    #####:  916:      return -1;
        -:  917:    }
        -:  918:
    #####:  919:    if (choice1 == handPos)
        -:  920:    {
    #####:  921:      return -1;
        -:  922:    }
        -:  923:
    #####:  924:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  925:    {
    #####:  926:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  927:      {
    #####:  928:        j++;
    #####:  929:      }
    #####:  930:    }
    #####:  931:    if (j < choice2)
        -:  932:    {
    #####:  933:      return -1;
        -:  934:    }
        -:  935:
        -:  936:    if (DEBUG)
        -:  937:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  938:
        -:  939:    //increase supply count for choosen card by amount being discarded
    #####:  940:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  941:
        -:  942:    //each other player gains a copy of revealed card
    #####:  943:    for (i = 0; i < state->numPlayers; i++)
        -:  944:    {
    #####:  945:      if (i != currentPlayer)
        -:  946:      {
    #####:  947:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  948:      }
    #####:  949:    }
        -:  950:
        -:  951:    //discard played card from hand
    #####:  952:    discardCard(handPos, currentPlayer, state, 0);
        -:  953:
        -:  954:    //trash copies of cards returned to supply
    #####:  955:    for (j = 0; j < choice2; j++)
        -:  956:    {
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:      {
    #####:  959:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  960:        {
    #####:  961:          discardCard(i, currentPlayer, state, 1);
    #####:  962:          break;
        -:  963:        }
    #####:  964:      }
    #####:  965:    }
        -:  966:
    #####:  967:    return 0;
        -:  968:
        -:  969:    case cutpurse:
        -:  970:
    #####:  971:    updateCoins(currentPlayer, state, 2);
    #####:  972:    for (i = 0; i < state->numPlayers; i++)
        -:  973:    {
    #####:  974:      if (i != currentPlayer)
        -:  975:      {
    #####:  976:        for (j = 0; j < state->handCount[i]; j++)
        -:  977:        {
    #####:  978:          if (state->hand[i][j] == copper)
        -:  979:          {
    #####:  980:            discardCard(j, i, state, 0);
    #####:  981:            break;
        -:  982:          }
    #####:  983:          if (j == state->handCount[i])
        -:  984:          {
    #####:  985:            for (k = 0; k < state->handCount[i]; k++)
        -:  986:            {
        -:  987:              if (DEBUG)
        -:  988:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  989:            }
    #####:  990:            break;
        -:  991:          }
    #####:  992:        }
        -:  993:
    #####:  994:      }
        -:  995:
    #####:  996:    }
        -:  997:
        -:  998:    //discard played card from hand
    #####:  999:    discardCard(handPos, currentPlayer, state, 0);
        -: 1000:
    #####: 1001:    return 0;
        -: 1002:
        -: 1003:
        -: 1004:    case embargo:
        -: 1005:    //+2 Coins
    #####: 1006:    state->coins = state->coins + 2;
        -: 1007:
        -: 1008:    //see if selected pile is in play
    #####: 1009:    if ( state->supplyCount[choice1] == -1 )
        -: 1010:    {
    #####: 1011:      return -1;
        -: 1012:    }
        -: 1013:
        -: 1014:    //add embargo token to selected supply pile
    #####: 1015:    state->embargoTokens[choice1]++;
        -: 1016:
        -: 1017:    //trash card
    #####: 1018:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1019:    return 0;
        -: 1020:
        -: 1021:    case outpost:
        -: 1022:    //set outpost flag
    #####: 1023:    state->outpostPlayed++;
        -: 1024:
        -: 1025:    //discard card
    #####: 1026:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:    return 0;
        -: 1028:
        -: 1029:    case salvager:
        -: 1030:    //+1 buy
    #####: 1031:    state->numBuys++;
        -: 1032:
    #####: 1033:    if (choice1)
        -: 1034:    {
        -: 1035:      //gain coins equal to trashed card
    #####: 1036:      state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1037:      //trash card
    #####: 1038:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1039:    }
        -: 1040:
        -: 1041:    //discard card
    #####: 1042:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:    return 0;
        -: 1044:
        -: 1045:    case sea_hag:
    #####: 1046:    for (i = 0; i < state->numPlayers; i++){
    #####: 1047:      if (i != currentPlayer){
    #####: 1048:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1049:        state->discardCount[i]++;
    #####: 1050:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1051:      }
    #####: 1052:    }
    #####: 1053:    return 0;
        -: 1054:
        -: 1055:    case treasure_map:
        -: 1056:    //search hand for another treasure_map
    #####: 1057:    index = -1;
    #####: 1058:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1059:    {
    #####: 1060:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1061:      {
    #####: 1062:        index = i;
    #####: 1063:        break;
        -: 1064:      }
    #####: 1065:    }
    #####: 1066:    if (index > -1)
        -: 1067:    {
        -: 1068:      //trash both treasure cards
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1070:      discardCard(index, currentPlayer, state, 1);
        -: 1071:
        -: 1072:      //gain 4 Gold cards
    #####: 1073:      for (i = 0; i < 4; i++)
        -: 1074:      {
    #####: 1075:        gainCard(gold, state, 1, currentPlayer);
    #####: 1076:      }
        -: 1077:
        -: 1078:      //return success
    #####: 1079:      return 1;
        -: 1080:    }
        -: 1081:
        -: 1082:    //no second treasure_map found in hand
    #####: 1083:    return -1;
        -: 1084:  }
        -: 1085:
    #####: 1086:  return -1;
    #####: 1087:}
        -: 1088:
        -: 1089:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1090:{
        -: 1091:
        -: 1092:  //if card is not trashed, added to Played pile
    #####: 1093:  if (trashFlag < 1)
        -: 1094:  {
        -: 1095:    //add card to played pile
    #####: 1096:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1097:    state->playedCardCount++;
    #####: 1098:  }
        -: 1099:
        -: 1100:  //set played card to -1
    #####: 1101:  state->hand[currentPlayer][handPos] = -1;
        -: 1102:
        -: 1103:  //remove card from player's hand
    #####: 1104:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1105:  {
        -: 1106:    //reduce number of cards in hand
    #####: 1107:    state->handCount[currentPlayer]--;
    #####: 1108:  }
    #####: 1109:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1110:  {
        -: 1111:    //reduce number of cards in hand
    #####: 1112:    state->handCount[currentPlayer]--;
    #####: 1113:  }
        -: 1114:  else
        -: 1115:  {
        -: 1116:    //replace discarded card with last card in hand
    #####: 1117:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1118:    //set last card to -1
    #####: 1119:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1120:    //reduce number of cards in hand
    #####: 1121:    state->handCount[currentPlayer]--;
        -: 1122:  }
        -: 1123:
    #####: 1124:  return 0;
        -: 1125:}
        -: 1126:
        -: 1127:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1128:{
        -: 1129:  //Note: supplyPos is enum of choosen card
        -: 1130:
        -: 1131:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1132:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1133:  {
    #####: 1134:    return -1;
        -: 1135:  }
        -: 1136:
        -: 1137:  //added card for [whoseTurn] current player:
        -: 1138:  // toFlag = 0 : add to discard
        -: 1139:  // toFlag = 1 : add to deck
        -: 1140:  // toFlag = 2 : add to hand
        -: 1141:
    #####: 1142:  if (toFlag == 1)
        -: 1143:  {
    #####: 1144:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1145:    state->deckCount[player]++;
    #####: 1146:  }
    #####: 1147:  else if (toFlag == 2)
        -: 1148:  {
    #####: 1149:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1150:    state->handCount[player]++;
    #####: 1151:  }
        -: 1152:  else
        -: 1153:  {
    #####: 1154:    state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1155:    state->discardCount[player]++;
        -: 1156:  }
        -: 1157:
        -: 1158:  //decrease number in supply pile
    #####: 1159:  state->supplyCount[supplyPos]--;
        -: 1160:
    #####: 1161:  return 0;
    #####: 1162:}
        -: 1163:
        -: 1164:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1165:{
        -: 1166:  int i;
        -: 1167:
        -: 1168:  //reset coin count
        4: 1169:  state->coins = 0;
        -: 1170:
        -: 1171:  //add coins for each Treasure card in player's hand
       48: 1172:  for (i = 0; i < state->handCount[player]; i++)
        -: 1173:  {
       20: 1174:    if (state->hand[player][i] == copper)
        -: 1175:    {
       16: 1176:      state->coins += 1;
       16: 1177:    }
        4: 1178:    else if (state->hand[player][i] == silver)
        -: 1179:    {
    #####: 1180:      state->coins += 2;
    #####: 1181:    }
        4: 1182:    else if (state->hand[player][i] == gold)
        -: 1183:    {
    #####: 1184:      state->coins += 3;
    #####: 1185:    }
       20: 1186:  }
        -: 1187:
        -: 1188:  //add bonus
        4: 1189:  state->coins += bonus;
        -: 1190:
        4: 1191:  return 0;
        -: 1192:}
        -: 1193:
        -: 1194:void smithyAction(struct gameState *state, int handPos, int currentPlayer){
        -: 1195:  //+3 Cards
    #####: 1196:  for (int i = 0; i <= 3; i++) { // BUG: added = to <
    #####: 1197:    drawCard(currentPlayer, state);
    #####: 1198:  }
        -: 1199:  //discard card from hand
    #####: 1200:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1201:}
        -: 1202:
        -: 1203:void adventurerAction(struct gameState *state, int currentPlayer, int temphand[]){
        -: 1204:  int cardDrawn;
    #####: 1205:  int drawnTreasure = 0;
    #####: 1206:  int z = 0;// this is the counter for the temp hand
    #####: 1207:  while(drawnTreasure <= 2){ // BUG: added = to <
    #####: 1208:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1209:      shuffle(currentPlayer, state);
    #####: 1210:    }
    #####: 1211:    drawCard(currentPlayer, state);
    #####: 1212:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1213:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1214:    drawnTreasure++;
        -: 1215:    else{
    #####: 1216:      temphand[z]=cardDrawn;
    #####: 1217:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1218:      z++;
        -: 1219:    }
        -: 1220:  }
    #####: 1221:  while(z-1>=0){
    #####: 1222:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1223:    z=z-1;
        -: 1224:  }
    #####: 1225:}
        -: 1226:
        -: 1227:void stewardAction(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3) {
    #####: 1228:  if (choice1 == 1)
        -: 1229:  {
        -: 1230:    //+2 cards
    #####: 1231:    drawCard(currentPlayer, state);
    #####: 1232:    drawCard(currentPlayer, state);
    #####: 1233:  }
    #####: 1234:  else if (choice1 == 2)
        -: 1235:  {
        -: 1236:    //+2 coins
    #####: 1237:    state->coins = /*state->coins*/ + 2; //BUG: removed state->coins
    #####: 1238:  }
        -: 1239:  else
        -: 1240:  {
        -: 1241:    //trash 2 cards in hand
    #####: 1242:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1243:    discardCard(choice3, currentPlayer, state, 1);
        -: 1244:  }
        -: 1245:
        -: 1246:  //discard card from hand
    #####: 1247:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:}
        -: 1249:
        -: 1250:void minionAction(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2, int choice3) {
        -: 1251:  //+1 action
    #####: 1252:  state->numActions++;
        -: 1253:
        -: 1254:  //discard card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
        -: 1256:
    #####: 1257:  if (choice1)		//+2 coins
        -: 1258:  {
    #####: 1259:    state->coins = state->coins + 2;
    #####: 1260:  }
        -: 1261:
    #####: 1262:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1263:  {
        -: 1264:    //discard hand
    #####: 1265:    while(numHandCards(state) > 0)
        -: 1266:    {
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);
        -: 1268:    }
        -: 1269:
        -: 1270:    //draw 4
    #####: 1271:    for (int i = 0; i < 4; i++)
        -: 1272:    {
    #####: 1273:      drawCard(currentPlayer, state);
    #####: 1274:    }
        -: 1275:
        -: 1276:    //other players discard hand and redraw if hand size > 4
    #####: 1277:    for (int i = 0; i < state->numPlayers; i++)
        -: 1278:    {
    #####: 1279:      if (i != currentPlayer)
        -: 1280:      {
    #####: 1281:        if ( state->handCount[i] > 4 )
        -: 1282:        {
        -: 1283:          //discard hand
    #####: 1284:          while( state->handCount[i] > 0 )
        -: 1285:          {
    #####: 1286:            discardCard(handPos, i, state, 0);
        -: 1287:          }
        -: 1288:
        -: 1289:          //draw 4
    #####: 1290:          for (int j = 0; j < 4; j++)
        -: 1291:          {
    #####: 1292:            drawCard(i, state);
    #####: 1293:          }
    #####: 1294:        }
    #####: 1295:      }
    #####: 1296:    }
        -: 1297:
    #####: 1298:  }
    #####: 1299:}
        -: 1300:
        -: 1301:void feastAction(struct gameState *state, int temphand[], int currentPlayer, int choice1, int choice2, int choice3){
        -: 1302:  //gain card with cost up to 5
        -: 1303:  //Backup hand
    #####: 1304:  for (int i = 0; i < state->handCount[currentPlayer]; i++){ // BUG: removed = from >=
    #####: 1305:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1306:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1307:  }
        -: 1308:  //Backup hand
        -: 1309:
        -: 1310:  //Update Coins for Buy
    #####: 1311:  updateCoins(currentPlayer, state, 5);
    #####: 1312:  int x = 1;//Condition to loop on
    #####: 1313:  while( x == 1) {//Buy one card
    #####: 1314:    if (supplyCount(choice1, state) <= 0){
        -: 1315:      if (DEBUG)
        -: 1316:      printf("None of that card left, sorry!\n");
        -: 1317:
        -: 1318:      if (DEBUG){
        -: 1319:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1320:      }
    #####: 1321:    }
    #####: 1322:    else if (state->coins < getCost(choice1)){
    #####: 1323:      printf("That card is too expensive!\n");
        -: 1324:
        -: 1325:      if (DEBUG){
        -: 1326:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1327:      }
    #####: 1328:    }
        -: 1329:    else{
        -: 1330:
        -: 1331:      if (DEBUG){
        -: 1332:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1333:      }
        -: 1334:
    #####: 1335:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1336:      x = 0;//No more buying cards
        -: 1337:
        -: 1338:      if (DEBUG){
        -: 1339:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1340:      }
        -: 1341:
        -: 1342:    }
        -: 1343:  }
        -: 1344:
        -: 1345:  //Reset Hand
    #####: 1346:  for (int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1347:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1348:    temphand[i] = -1;
    #####: 1349:  }
        -: 1350:  //Reset Hand
    #####: 1351:}
        -: 1352:
        -: 1353://end of dominion.c
unittest3.c:
Testing gainCard() to discard pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the discard pile:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
Testing gainCard() to deck pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the deck pile:
		Expected: 10, result: 10
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 11, result: 11
			Assert Passed
Testing gainCard() to hand:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the hand:
		Expected: 15, result: 15
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the function handled an error situation *invalid value*:
			Assert Passed
	This indicates that the function handled and error situation *empty supply pile*:
			Assert Passed
Testing gainCard() to discard pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the discard pile:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
Testing gainCard() to deck pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the deck pile:
		Expected: 10, result: 10
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 11, result: 11
			Assert Passed
Testing gainCard() to hand:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the hand:
		Expected: 15, result: 15
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the function handled an error situation *invalid value*:
			Assert Passed
	This indicates that the function handled and error situation *empty supply pile*:
			Assert Passed
Testing gainCard() to discard pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the discard pile:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
Testing gainCard() to deck pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the deck pile:
		Expected: 10, result: 10
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 11, result: 11
			Assert Passed
Testing gainCard() to hand:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the hand:
		Expected: 15, result: 15
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the function handled an error situation *invalid value*:
			Assert Passed
	This indicates that the function handled and error situation *empty supply pile*:
			Assert Passed
Testing gainCard() to discard pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the discard pile:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
Testing gainCard() to deck pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the deck pile:
		Expected: 10, result: 10
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 11, result: 11
			Assert Passed
Testing gainCard() to hand:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the hand:
		Expected: 15, result: 15
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the function handled an error situation *invalid value*:
			Assert Passed
	This indicates that the function handled and error situation *empty supply pile*:
			Assert Passed
FINAL RESULT: All tests passed
File 'unittest3.c'
Lines executed:95.16% of 62
unittest3.c:creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:20.34% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      420:    9:  if (*(int*)a > *(int*)b)
    #####:   10:  return 1;
      420:   11:  if (*(int*)a < *(int*)b)
      150:   12:  return -1;
      270:   13:  return 0;
      420:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      176:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     1760:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
     1520:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
      800:   65:    }
       80:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
        -:   74:  {
        1:   75:    state->supplyCount[curse] = 10;
        1:   76:  }
        7:   77:  else if (numPlayers == 3)
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
    #####:   80:  }
        -:   81:  else
        -:   82:  {
        7:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
        -:   88:  {
        1:   89:    state->supplyCount[estate] = 8;
        1:   90:    state->supplyCount[duchy] = 8;
        1:   91:    state->supplyCount[province] = 8;
        1:   92:  }
        -:   93:  else
        -:   94:  {
        7:   95:    state->supplyCount[estate] = 12;
        7:   96:    state->supplyCount[duchy] = 12;
        7:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      336:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     2640:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    {
     1240:  110:      if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      152:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
       16:  115:          if (numPlayers == 2){
        2:  116:            state->supplyCount[i] = 8;
        2:  117:          }
       14:  118:          else{ state->supplyCount[i] = 12; }
       16:  119:        }
        -:  120:        else
        -:  121:        {
       64:  122:          state->supplyCount[i] = 10;
        -:  123:        }
       80:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     1160:  128:        state->supplyCount[i] = -1;
        -:  129:      }
     1160:  130:    }
        -:  131:
      160:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       76:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:  {
       30:  140:    state->deckCount[i] = 0;
      240:  141:    for (j = 0; j < 3; j++)
        -:  142:    {
       90:  143:      state->deck[i][j] = estate;
       90:  144:      state->deckCount[i]++;
       90:  145:    }
      480:  146:    for (j = 3; j < 10; j++)
        -:  147:    {
      210:  148:      state->deck[i][j] = copper;
      210:  149:      state->deckCount[i]++;
      210:  150:    }
       30:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
       76:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:  {
       30:  156:    if ( shuffle(i, state) < 0 )
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
       30:  160:  }
        -:  161:
        -:  162:  //draw player hands
       76:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:  {
        -:  165:    //initialize hand size to zero
       30:  166:    state->handCount[i] = 0;
       30:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
       30:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      448:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:  {
      216:  178:    state->embargoTokens[i] = 0;
      216:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       96:  192:  for (it = 0; it < 5; it++){
       40:  193:    drawCard(state->whoseTurn, state);
       40:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:  return 0;
        8:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       30:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       30:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       30:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      660:  214:  while (state->deckCount[player] > 0) {
      300:  215:    card = floor(Random() * state->deckCount[player]);
      300:  216:    newDeck[newDeckPos] = state->deck[player][card];
      300:  217:    newDeckPos++;
     2086:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      743:  219:      state->deck[player][i] = state->deck[player][i+1];
      743:  220:    }
      300:  221:    state->deckCount[player]--;
        -:  222:  }
      660:  223:  for (i = 0; i < newDeckPos; i++) {
      300:  224:    state->deck[player][i] = newDeck[i];
      300:  225:    state->deckCount[player]++;
      300:  226:  }
        -:  227:
       30:  228:  return 0;
       30:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:    printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:    printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       74:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
    #####:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
    #####:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
    #####:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:  {
    #####:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:  {
    #####:  404:    if (state->supplyCount[i] == 0)
        -:  405:    {
    #####:  406:      j++;
    #####:  407:    }
    #####:  408:  }
    #####:  409:  if ( j >= 3)
        -:  410:  {
    #####:  411:    return 1;
        -:  412:  }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:      players[i] = -9999;
    #####:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
    #####:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
        -:  482:    {
    #####:  483:      j = i;
    #####:  484:    }
    #####:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
        -:  493:    {
    #####:  494:      players[i]++;
    #####:  495:    }
    #####:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
        -:  503:    {
    #####:  504:      j = i;
    #####:  505:    }
    #####:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
        -:  513:    {
    #####:  514:      players[i] = 1;
    #####:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
    #####:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       40:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:    return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       40:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       40:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       40:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       40:  576:    state->deckCount[player]--;
       40:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       40:  580:  return 0;
       40:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:  {
        -:  587:    case curse:
    #####:  588:    return 0;
        -:  589:    case estate:
    #####:  590:    return 2;
        -:  591:    case duchy:
    #####:  592:    return 5;
        -:  593:    case province:
    #####:  594:    return 8;
        -:  595:    case copper:
    #####:  596:    return 0;
        -:  597:    case silver:
    #####:  598:    return 3;
        -:  599:    case gold:
    #####:  600:    return 6;
        -:  601:    case adventurer:
    #####:  602:    return 6;
        -:  603:    case council_room:
    #####:  604:    return 5;
        -:  605:    case feast:
    #####:  606:    return 4;
        -:  607:    case gardens:
    #####:  608:    return 4;
        -:  609:    case mine:
    #####:  610:    return 5;
        -:  611:    case remodel:
    #####:  612:    return 4;
        -:  613:    case smithy:
    #####:  614:    return 4;
        -:  615:    case village:
    #####:  616:    return 3;
        -:  617:    case baron:
    #####:  618:    return 4;
        -:  619:    case great_hall:
    #####:  620:    return 3;
        -:  621:    case minion:
    #####:  622:    return 5;
        -:  623:    case steward:
    #####:  624:    return 3;
        -:  625:    case tribute:
    #####:  626:    return 5;
        -:  627:    case ambassador:
    #####:  628:    return 3;
        -:  629:    case cutpurse:
    #####:  630:    return 4;
        -:  631:    case embargo:
    #####:  632:    return 2;
        -:  633:    case outpost:
    #####:  634:    return 5;
        -:  635:    case salvager:
    #####:  636:    return 4;
        -:  637:    case sea_hag:
    #####:  638:    return 4;
        -:  639:    case treasure_map:
    #####:  640:    return 4;
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
    #####:  652:  int currentPlayer = whoseTurn(state);
    #####:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
    #####:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
        -:  658:
    #####:  659:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  660:    nextPlayer = 0;
    #####:  661:  }
        -:  662:
        -:  663:
        -:  664:  //uses switch to select card and perform actions
    #####:  665:  switch( card )
        -:  666:  {
        -:  667:    case adventurer:
    #####:  668:      adventurerAction(state, currentPlayer, temphand);
    #####:  669:      return 0;
        -:  670:
        -:  671:    case council_room:
        -:  672:    //+4 Cards
    #####:  673:    for (i = 0; i < 4; i++)
        -:  674:    {
    #####:  675:      drawCard(currentPlayer, state);
    #####:  676:    }
        -:  677:
        -:  678:    //+1 Buy
    #####:  679:    state->numBuys++;
        -:  680:
        -:  681:    //Each other player draws a card
    #####:  682:    for (i = 0; i < state->numPlayers; i++)
        -:  683:    {
    #####:  684:      if ( i != currentPlayer )
        -:  685:      {
    #####:  686:        drawCard(i, state);
    #####:  687:      }
    #####:  688:    }
        -:  689:
        -:  690:    //put played card in played card pile
    #####:  691:    discardCard(handPos, currentPlayer, state, 0);
        -:  692:
    #####:  693:    return 0;
        -:  694:
        -:  695:    case feast:
    #####:  696:      feastAction(state, temphand, currentPlayer, choice1, choice2, choice3);
    #####:  697:      return 0;
        -:  698:
        -:  699:    case gardens:
    #####:  700:    return -1;
        -:  701:
        -:  702:    case mine:
    #####:  703:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  704:    //printf("***This is the card we will trash: %d\n", j);
    #####:  705:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  706:    {
        -:  707:      // printf("***choice1 is not valid\n");
    #####:  708:      return -1;
        -:  709:    }
        -:  710:
    #####:  711:    if (choice2 > treasure_map || choice2 < curse)
        -:  712:    {
        -:  713:      //printf("***choice2 is not valid\n");
    #####:  714:      return -1;
        -:  715:    }
        -:  716:
    #####:  717:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  718:    {
        -:  719:      //printf("***cost difference is not valid %d AND %d\n", getCost(state->hand[currentPlayer][choice1]) + 3, getCost(choice2));
    #####:  720:      return -1;
        -:  721:    }
        -:  722:    //printf("*** The card I am trying to gain: %d\n", choice2);
    #####:  723:    gainCard(choice2, state, 2, currentPlayer);
        -:  724:    //printf("*** What i am discarding: %d\n", handPos);
        -:  725:    //discard card from hand
    #####:  726:    discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:    //discard trashed card
    #####:  729:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  730:    {
    #####:  731:      if (state->hand[currentPlayer][i] == j)
        -:  732:      {
        -:  733:        //printf("***Tryna discard this trashed card: %d\n", j);
    #####:  734:        discardCard(i, currentPlayer, state, 0);
    #####:  735:        break;
        -:  736:      }
    #####:  737:    }
        -:  738:
    #####:  739:    return 0;
        -:  740:
        -:  741:    case remodel:
    #####:  742:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  743:
    #####:  744:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  745:    {
    #####:  746:      return -1;
        -:  747:    }
        -:  748:
    #####:  749:    gainCard(choice2, state, 0, currentPlayer);
        -:  750:
        -:  751:    //discard card from hand
    #####:  752:    discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:    //discard trashed card
    #####:  755:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:    {
    #####:  757:      if (state->hand[currentPlayer][i] == j)
        -:  758:      {
    #####:  759:        discardCard(i, currentPlayer, state, 0);
    #####:  760:        break;
        -:  761:      }
    #####:  762:    }
        -:  763:
        -:  764:
    #####:  765:    return 0;
        -:  766:
        -:  767:    case smithy:
    #####:  768:    smithyAction(state, handPos, currentPlayer);
    #####:  769:    return 0;
        -:  770:
        -:  771:    case village:
        -:  772:    //+1 Card
    #####:  773:    drawCard(currentPlayer, state);
        -:  774:
        -:  775:    //+2 Actions
    #####:  776:    state->numActions = state->numActions + 2;
        -:  777:
        -:  778:    //discard played card from hand
    #####:  779:    discardCard(handPos, currentPlayer, state, 0);
    #####:  780:    return 0;
        -:  781:
        -:  782:    case baron:
    #####:  783:    state->numBuys++;//Increase buys by 1!
    #####:  784:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  785:      int p = 0;//Iterator for hand!
    #####:  786:      int card_not_discarded = 1;//Flag for discard set!
    #####:  787:      while(card_not_discarded){
    #####:  788:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  789:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  790:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  791:          state->discardCount[currentPlayer]++;
    #####:  792:          for (;p < state->handCount[currentPlayer]; p++){
    #####:  793:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  794:          }
    #####:  795:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  796:          state->handCount[currentPlayer]--;
    #####:  797:          card_not_discarded = 0;//Exit the loop
    #####:  798:        }
    #####:  799:        else if (p > state->handCount[currentPlayer]){
        -:  800:          if(DEBUG) {
        -:  801:            printf("No estate cards in your hand, invalid choice\n");
        -:  802:            printf("Must gain an estate if there are any\n");
        -:  803:          }
    #####:  804:          if (supplyCount(estate, state) > 0){
    #####:  805:            gainCard(estate, state, 0, currentPlayer);
    #####:  806:            state->supplyCount[estate]--;//Decrement estates
    #####:  807:            if (supplyCount(estate, state) == 0){
    #####:  808:              isGameOver(state);
    #####:  809:            }
    #####:  810:          }
    #####:  811:          card_not_discarded = 0;//Exit the loop
    #####:  812:        }
        -:  813:
        -:  814:        else{
    #####:  815:          p++;//Next card
        -:  816:        }
        -:  817:      }
    #####:  818:    }
        -:  819:
        -:  820:    else{
    #####:  821:      if (supplyCount(estate, state) > 0){
    #####:  822:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:        state->supplyCount[estate]--;//Decrement Estates
    #####:  824:        if (supplyCount(estate, state) == 0){
    #####:  825:          isGameOver(state);
    #####:  826:        }
    #####:  827:      }
        -:  828:    }
        -:  829:
        -:  830:
    #####:  831:    return 0;
        -:  832:
        -:  833:    case great_hall:
        -:  834:    //+1 Card
    #####:  835:    drawCard(currentPlayer, state);
        -:  836:
        -:  837:    //+1 Actions
    #####:  838:    state->numActions++;
        -:  839:
        -:  840:    //discard card from hand
    #####:  841:    discardCard(handPos, currentPlayer, state, 0);
    #####:  842:    return 0;
        -:  843:
        -:  844:    case minion:
    #####:  845:      minionAction(state, handPos, currentPlayer, choice1, choice2, choice3);
    #####:  846:      return 0;
        -:  847:
        -:  848:    case steward:
    #####:  849:      stewardAction(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####:  850:      return 0;
        -:  851:
        -:  852:    case tribute:
    #####:  853:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  854:      if (state->deckCount[nextPlayer] > 0){
    #####:  855:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  856:        state->deckCount[nextPlayer]--;
    #####:  857:      }
    #####:  858:      else if (state->discardCount[nextPlayer] > 0){
    #####:  859:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  860:        state->discardCount[nextPlayer]--;
    #####:  861:      }
        -:  862:      else{
        -:  863:        //No Card to Reveal
        -:  864:        if (DEBUG){
        -:  865:          printf("No cards to reveal\n");
        -:  866:        }
        -:  867:      }
    #####:  868:    }
        -:  869:
        -:  870:    else{
    #####:  871:      if (state->deckCount[nextPlayer] == 0){
    #####:  872:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  873:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  874:          state->deckCount[nextPlayer]++;
    #####:  875:          state->discard[nextPlayer][i] = -1;
    #####:  876:          state->discardCount[nextPlayer]--;
    #####:  877:        }
        -:  878:
    #####:  879:        shuffle(nextPlayer,state);//Shuffle the deck
    #####:  880:      }
    #####:  881:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  882:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  883:      state->deckCount[nextPlayer]--;
    #####:  884:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  886:      state->deckCount[nextPlayer]--;
        -:  887:    }
        -:  888:
    #####:  889:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  890:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  891:      state->playedCardCount++;
    #####:  892:      tributeRevealedCards[1] = -1;
    #####:  893:    }
        -:  894:
    #####:  895:    for (i = 0; i <= 2; i ++){
    #####:  896:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  897:        state->coins += 2;
    #####:  898:      }
        -:  899:
    #####:  900:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  901:        drawCard(currentPlayer, state);
    #####:  902:        drawCard(currentPlayer, state);
    #####:  903:      }
        -:  904:      else{//Action Card
    #####:  905:        state->numActions = state->numActions + 2;
        -:  906:      }
    #####:  907:    }
        -:  908:
    #####:  909:    return 0;
        -:  910:
        -:  911:    case ambassador:
    #####:  912:    j = 0;		//used to check if player has enough cards to discard
        -:  913:
    #####:  914:    if (choice2 > 2 || choice2 < 0)
        -:  915:    {
    #####:  916:      return -1;
        -:  917:    }
        -:  918:
    #####:  919:    if (choice1 == handPos)
        -:  920:    {
    #####:  921:      return -1;
        -:  922:    }
        -:  923:
    #####:  924:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  925:    {
    #####:  926:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  927:      {
    #####:  928:        j++;
    #####:  929:      }
    #####:  930:    }
    #####:  931:    if (j < choice2)
        -:  932:    {
    #####:  933:      return -1;
        -:  934:    }
        -:  935:
        -:  936:    if (DEBUG)
        -:  937:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  938:
        -:  939:    //increase supply count for choosen card by amount being discarded
    #####:  940:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  941:
        -:  942:    //each other player gains a copy of revealed card
    #####:  943:    for (i = 0; i < state->numPlayers; i++)
        -:  944:    {
    #####:  945:      if (i != currentPlayer)
        -:  946:      {
    #####:  947:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  948:      }
    #####:  949:    }
        -:  950:
        -:  951:    //discard played card from hand
    #####:  952:    discardCard(handPos, currentPlayer, state, 0);
        -:  953:
        -:  954:    //trash copies of cards returned to supply
    #####:  955:    for (j = 0; j < choice2; j++)
        -:  956:    {
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:      {
    #####:  959:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  960:        {
    #####:  961:          discardCard(i, currentPlayer, state, 1);
    #####:  962:          break;
        -:  963:        }
    #####:  964:      }
    #####:  965:    }
        -:  966:
    #####:  967:    return 0;
        -:  968:
        -:  969:    case cutpurse:
        -:  970:
    #####:  971:    updateCoins(currentPlayer, state, 2);
    #####:  972:    for (i = 0; i < state->numPlayers; i++)
        -:  973:    {
    #####:  974:      if (i != currentPlayer)
        -:  975:      {
    #####:  976:        for (j = 0; j < state->handCount[i]; j++)
        -:  977:        {
    #####:  978:          if (state->hand[i][j] == copper)
        -:  979:          {
    #####:  980:            discardCard(j, i, state, 0);
    #####:  981:            break;
        -:  982:          }
    #####:  983:          if (j == state->handCount[i])
        -:  984:          {
    #####:  985:            for (k = 0; k < state->handCount[i]; k++)
        -:  986:            {
        -:  987:              if (DEBUG)
        -:  988:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  989:            }
    #####:  990:            break;
        -:  991:          }
    #####:  992:        }
        -:  993:
    #####:  994:      }
        -:  995:
    #####:  996:    }
        -:  997:
        -:  998:    //discard played card from hand
    #####:  999:    discardCard(handPos, currentPlayer, state, 0);
        -: 1000:
    #####: 1001:    return 0;
        -: 1002:
        -: 1003:
        -: 1004:    case embargo:
        -: 1005:    //+2 Coins
    #####: 1006:    state->coins = state->coins + 2;
        -: 1007:
        -: 1008:    //see if selected pile is in play
    #####: 1009:    if ( state->supplyCount[choice1] == -1 )
        -: 1010:    {
    #####: 1011:      return -1;
        -: 1012:    }
        -: 1013:
        -: 1014:    //add embargo token to selected supply pile
    #####: 1015:    state->embargoTokens[choice1]++;
        -: 1016:
        -: 1017:    //trash card
    #####: 1018:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1019:    return 0;
        -: 1020:
        -: 1021:    case outpost:
        -: 1022:    //set outpost flag
    #####: 1023:    state->outpostPlayed++;
        -: 1024:
        -: 1025:    //discard card
    #####: 1026:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:    return 0;
        -: 1028:
        -: 1029:    case salvager:
        -: 1030:    //+1 buy
    #####: 1031:    state->numBuys++;
        -: 1032:
    #####: 1033:    if (choice1)
        -: 1034:    {
        -: 1035:      //gain coins equal to trashed card
    #####: 1036:      state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1037:      //trash card
    #####: 1038:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1039:    }
        -: 1040:
        -: 1041:    //discard card
    #####: 1042:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:    return 0;
        -: 1044:
        -: 1045:    case sea_hag:
    #####: 1046:    for (i = 0; i < state->numPlayers; i++){
    #####: 1047:      if (i != currentPlayer){
    #####: 1048:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1049:        state->discardCount[i]++;
    #####: 1050:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1051:      }
    #####: 1052:    }
    #####: 1053:    return 0;
        -: 1054:
        -: 1055:    case treasure_map:
        -: 1056:    //search hand for another treasure_map
    #####: 1057:    index = -1;
    #####: 1058:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1059:    {
    #####: 1060:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1061:      {
    #####: 1062:        index = i;
    #####: 1063:        break;
        -: 1064:      }
    #####: 1065:    }
    #####: 1066:    if (index > -1)
        -: 1067:    {
        -: 1068:      //trash both treasure cards
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1070:      discardCard(index, currentPlayer, state, 1);
        -: 1071:
        -: 1072:      //gain 4 Gold cards
    #####: 1073:      for (i = 0; i < 4; i++)
        -: 1074:      {
    #####: 1075:        gainCard(gold, state, 1, currentPlayer);
    #####: 1076:      }
        -: 1077:
        -: 1078:      //return success
    #####: 1079:      return 1;
        -: 1080:    }
        -: 1081:
        -: 1082:    //no second treasure_map found in hand
    #####: 1083:    return -1;
        -: 1084:  }
        -: 1085:
    #####: 1086:  return -1;
    #####: 1087:}
        -: 1088:
        -: 1089:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1090:{
        -: 1091:
        -: 1092:  //if card is not trashed, added to Played pile
    #####: 1093:  if (trashFlag < 1)
        -: 1094:  {
        -: 1095:    //add card to played pile
    #####: 1096:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1097:    state->playedCardCount++;
    #####: 1098:  }
        -: 1099:
        -: 1100:  //set played card to -1
    #####: 1101:  state->hand[currentPlayer][handPos] = -1;
        -: 1102:
        -: 1103:  //remove card from player's hand
    #####: 1104:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1105:  {
        -: 1106:    //reduce number of cards in hand
    #####: 1107:    state->handCount[currentPlayer]--;
    #####: 1108:  }
    #####: 1109:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1110:  {
        -: 1111:    //reduce number of cards in hand
    #####: 1112:    state->handCount[currentPlayer]--;
    #####: 1113:  }
        -: 1114:  else
        -: 1115:  {
        -: 1116:    //replace discarded card with last card in hand
    #####: 1117:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1118:    //set last card to -1
    #####: 1119:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1120:    //reduce number of cards in hand
    #####: 1121:    state->handCount[currentPlayer]--;
        -: 1122:  }
        -: 1123:
    #####: 1124:  return 0;
        -: 1125:}
        -: 1126:
        -: 1127:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1128:{
        -: 1129:  //Note: supplyPos is enum of choosen card
        -: 1130:
        -: 1131:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1132:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1133:  {
        8: 1134:    return -1;
        -: 1135:  }
        -: 1136:
        -: 1137:  //added card for [whoseTurn] current player:
        -: 1138:  // toFlag = 0 : add to discard
        -: 1139:  // toFlag = 1 : add to deck
        -: 1140:  // toFlag = 2 : add to hand
        -: 1141:
       12: 1142:  if (toFlag == 1)
        -: 1143:  {
        4: 1144:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1145:    state->deckCount[player]++;
        4: 1146:  }
        8: 1147:  else if (toFlag == 2)
        -: 1148:  {
        4: 1149:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1150:    state->handCount[player]++;
        4: 1151:  }
        -: 1152:  else
        -: 1153:  {
        4: 1154:    state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1155:    state->discardCount[player]++;
        -: 1156:  }
        -: 1157:
        -: 1158:  //decrease number in supply pile
       12: 1159:  state->supplyCount[supplyPos]--;
        -: 1160:
       12: 1161:  return 0;
       20: 1162:}
        -: 1163:
        -: 1164:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1165:{
        -: 1166:  int i;
        -: 1167:
        -: 1168:  //reset coin count
        8: 1169:  state->coins = 0;
        -: 1170:
        -: 1171:  //add coins for each Treasure card in player's hand
       96: 1172:  for (i = 0; i < state->handCount[player]; i++)
        -: 1173:  {
       40: 1174:    if (state->hand[player][i] == copper)
        -: 1175:    {
       32: 1176:      state->coins += 1;
       32: 1177:    }
        8: 1178:    else if (state->hand[player][i] == silver)
        -: 1179:    {
    #####: 1180:      state->coins += 2;
    #####: 1181:    }
        8: 1182:    else if (state->hand[player][i] == gold)
        -: 1183:    {
    #####: 1184:      state->coins += 3;
    #####: 1185:    }
       40: 1186:  }
        -: 1187:
        -: 1188:  //add bonus
        8: 1189:  state->coins += bonus;
        -: 1190:
        8: 1191:  return 0;
        -: 1192:}
        -: 1193:
        -: 1194:void smithyAction(struct gameState *state, int handPos, int currentPlayer){
        -: 1195:  //+3 Cards
    #####: 1196:  for (int i = 0; i <= 3; i++) { // BUG: added = to <
    #####: 1197:    drawCard(currentPlayer, state);
    #####: 1198:  }
        -: 1199:  //discard card from hand
    #####: 1200:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1201:}
        -: 1202:
        -: 1203:void adventurerAction(struct gameState *state, int currentPlayer, int temphand[]){
        -: 1204:  int cardDrawn;
    #####: 1205:  int drawnTreasure = 0;
    #####: 1206:  int z = 0;// this is the counter for the temp hand
    #####: 1207:  while(drawnTreasure <= 2){ // BUG: added = to <
    #####: 1208:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1209:      shuffle(currentPlayer, state);
    #####: 1210:    }
    #####: 1211:    drawCard(currentPlayer, state);
    #####: 1212:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1213:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1214:    drawnTreasure++;
        -: 1215:    else{
    #####: 1216:      temphand[z]=cardDrawn;
    #####: 1217:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1218:      z++;
        -: 1219:    }
        -: 1220:  }
    #####: 1221:  while(z-1>=0){
    #####: 1222:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1223:    z=z-1;
        -: 1224:  }
    #####: 1225:}
        -: 1226:
        -: 1227:void stewardAction(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3) {
    #####: 1228:  if (choice1 == 1)
        -: 1229:  {
        -: 1230:    //+2 cards
    #####: 1231:    drawCard(currentPlayer, state);
    #####: 1232:    drawCard(currentPlayer, state);
    #####: 1233:  }
    #####: 1234:  else if (choice1 == 2)
        -: 1235:  {
        -: 1236:    //+2 coins
    #####: 1237:    state->coins = /*state->coins*/ + 2; //BUG: removed state->coins
    #####: 1238:  }
        -: 1239:  else
        -: 1240:  {
        -: 1241:    //trash 2 cards in hand
    #####: 1242:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1243:    discardCard(choice3, currentPlayer, state, 1);
        -: 1244:  }
        -: 1245:
        -: 1246:  //discard card from hand
    #####: 1247:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:}
        -: 1249:
        -: 1250:void minionAction(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2, int choice3) {
        -: 1251:  //+1 action
    #####: 1252:  state->numActions++;
        -: 1253:
        -: 1254:  //discard card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
        -: 1256:
    #####: 1257:  if (choice1)		//+2 coins
        -: 1258:  {
    #####: 1259:    state->coins = state->coins + 2;
    #####: 1260:  }
        -: 1261:
    #####: 1262:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1263:  {
        -: 1264:    //discard hand
    #####: 1265:    while(numHandCards(state) > 0)
        -: 1266:    {
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);
        -: 1268:    }
        -: 1269:
        -: 1270:    //draw 4
    #####: 1271:    for (int i = 0; i < 4; i++)
        -: 1272:    {
    #####: 1273:      drawCard(currentPlayer, state);
    #####: 1274:    }
        -: 1275:
        -: 1276:    //other players discard hand and redraw if hand size > 4
    #####: 1277:    for (int i = 0; i < state->numPlayers; i++)
        -: 1278:    {
    #####: 1279:      if (i != currentPlayer)
        -: 1280:      {
    #####: 1281:        if ( state->handCount[i] > 4 )
        -: 1282:        {
        -: 1283:          //discard hand
    #####: 1284:          while( state->handCount[i] > 0 )
        -: 1285:          {
    #####: 1286:            discardCard(handPos, i, state, 0);
        -: 1287:          }
        -: 1288:
        -: 1289:          //draw 4
    #####: 1290:          for (int j = 0; j < 4; j++)
        -: 1291:          {
    #####: 1292:            drawCard(i, state);
    #####: 1293:          }
    #####: 1294:        }
    #####: 1295:      }
    #####: 1296:    }
        -: 1297:
    #####: 1298:  }
    #####: 1299:}
        -: 1300:
        -: 1301:void feastAction(struct gameState *state, int temphand[], int currentPlayer, int choice1, int choice2, int choice3){
        -: 1302:  //gain card with cost up to 5
        -: 1303:  //Backup hand
    #####: 1304:  for (int i = 0; i < state->handCount[currentPlayer]; i++){ // BUG: removed = from >=
    #####: 1305:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1306:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1307:  }
        -: 1308:  //Backup hand
        -: 1309:
        -: 1310:  //Update Coins for Buy
    #####: 1311:  updateCoins(currentPlayer, state, 5);
    #####: 1312:  int x = 1;//Condition to loop on
    #####: 1313:  while( x == 1) {//Buy one card
    #####: 1314:    if (supplyCount(choice1, state) <= 0){
        -: 1315:      if (DEBUG)
        -: 1316:      printf("None of that card left, sorry!\n");
        -: 1317:
        -: 1318:      if (DEBUG){
        -: 1319:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1320:      }
    #####: 1321:    }
    #####: 1322:    else if (state->coins < getCost(choice1)){
    #####: 1323:      printf("That card is too expensive!\n");
        -: 1324:
        -: 1325:      if (DEBUG){
        -: 1326:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1327:      }
    #####: 1328:    }
        -: 1329:    else{
        -: 1330:
        -: 1331:      if (DEBUG){
        -: 1332:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1333:      }
        -: 1334:
    #####: 1335:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1336:      x = 0;//No more buying cards
        -: 1337:
        -: 1338:      if (DEBUG){
        -: 1339:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1340:      }
        -: 1341:
        -: 1342:    }
        -: 1343:  }
        -: 1344:
        -: 1345:  //Reset Hand
    #####: 1346:  for (int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1347:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1348:    temphand[i] = -1;
    #####: 1349:  }
        -: 1350:  //Reset Hand
    #####: 1351:}
        -: 1352:
        -: 1353://end of dominion.c
unittest4.c:
Testing discardCard() with a full hand:
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
	testing discardCard() [TO PLAYED] player 0 with hand position 4:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 0 with hand position 4:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 0 with hand position 3:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 0 with hand position 3:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 0 with hand position 2:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 0 with hand position 2:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 0 with hand position 1:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 0 with hand position 1:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 0 with hand position 0:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 0 with hand position 0:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
	testing discardCard() [TO PLAYED] player 1 with hand position 4:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 1 with hand position 4:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 1 with hand position 3:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 1 with hand position 3:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 1 with hand position 2:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 1 with hand position 2:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 1 with hand position 1:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 1 with hand position 1:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 1 with hand position 0:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 1 with hand position 0:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
	testing discardCard() [TO PLAYED] player 2 with hand position 4:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 2 with hand position 4:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 2 with hand position 3:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 2 with hand position 3:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 2 with hand position 2:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 2 with hand position 2:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 2 with hand position 1:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 2 with hand position 1:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 2 with hand position 0:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 2 with hand position 0:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
	testing discardCard() [TO PLAYED] player 3 with hand position 4:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 3 with hand position 4:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 3 with hand position 3:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 3 with hand position 3:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 3 with hand position 2:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 3 with hand position 2:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 3 with hand position 1:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 3 with hand position 1:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 3 with hand position 0:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 3 with hand position 0:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

FINAL RESULT: All tests passed
File 'unittest4.c'
Lines executed:94.12% of 51
unittest4.c:creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:22.34% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      476:    9:  if (*(int*)a > *(int*)b)
    #####:   10:  return 1;
      476:   11:  if (*(int*)a < *(int*)b)
      170:   12:  return -1;
      306:   13:  return 0;
      476:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       18:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      198:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     1980:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
     1710:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
      900:   65:    }
       90:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:  {
        1:   75:    state->supplyCount[curse] = 10;
        1:   76:  }
        8:   77:  else if (numPlayers == 3)
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
    #####:   80:  }
        -:   81:  else
        -:   82:  {
        8:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:  {
        1:   89:    state->supplyCount[estate] = 8;
        1:   90:    state->supplyCount[duchy] = 8;
        1:   91:    state->supplyCount[province] = 8;
        1:   92:  }
        -:   93:  else
        -:   94:  {
        8:   95:    state->supplyCount[estate] = 12;
        8:   96:    state->supplyCount[duchy] = 12;
        8:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      378:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     2970:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    {
     1395:  110:      if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      171:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
       18:  115:          if (numPlayers == 2){
        2:  116:            state->supplyCount[i] = 8;
        2:  117:          }
       16:  118:          else{ state->supplyCount[i] = 12; }
       18:  119:        }
        -:  120:        else
        -:  121:        {
       72:  122:          state->supplyCount[i] = 10;
        -:  123:        }
       90:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     1305:  128:        state->supplyCount[i] = -1;
        -:  129:      }
     1305:  130:    }
        -:  131:
      180:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       86:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:  {
       34:  140:    state->deckCount[i] = 0;
      272:  141:    for (j = 0; j < 3; j++)
        -:  142:    {
      102:  143:      state->deck[i][j] = estate;
      102:  144:      state->deckCount[i]++;
      102:  145:    }
      544:  146:    for (j = 3; j < 10; j++)
        -:  147:    {
      238:  148:      state->deck[i][j] = copper;
      238:  149:      state->deckCount[i]++;
      238:  150:    }
       34:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
       86:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:  {
       34:  156:    if ( shuffle(i, state) < 0 )
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
       34:  160:  }
        -:  161:
        -:  162:  //draw player hands
       86:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:  {
        -:  165:    //initialize hand size to zero
       34:  166:    state->handCount[i] = 0;
       34:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
       34:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      504:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:  {
      243:  178:    state->embargoTokens[i] = 0;
      243:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      108:  192:  for (it = 0; it < 5; it++){
       45:  193:    drawCard(state->whoseTurn, state);
       45:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        9:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       34:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       34:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       34:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      748:  214:  while (state->deckCount[player] > 0) {
      340:  215:    card = floor(Random() * state->deckCount[player]);
      340:  216:    newDeck[newDeckPos] = state->deck[player][card];
      340:  217:    newDeckPos++;
     2364:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      842:  219:      state->deck[player][i] = state->deck[player][i+1];
      842:  220:    }
      340:  221:    state->deckCount[player]--;
        -:  222:  }
      748:  223:  for (i = 0; i < newDeckPos; i++) {
      340:  224:    state->deck[player][i] = newDeck[i];
      340:  225:    state->deckCount[player]++;
      340:  226:  }
        -:  227:
       34:  228:  return 0;
       34:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:    printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:    printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       74:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
    #####:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
    #####:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
    #####:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:  {
    #####:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:  {
    #####:  404:    if (state->supplyCount[i] == 0)
        -:  405:    {
    #####:  406:      j++;
    #####:  407:    }
    #####:  408:  }
    #####:  409:  if ( j >= 3)
        -:  410:  {
    #####:  411:    return 1;
        -:  412:  }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:      players[i] = -9999;
    #####:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
    #####:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
        -:  482:    {
    #####:  483:      j = i;
    #####:  484:    }
    #####:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
        -:  493:    {
    #####:  494:      players[i]++;
    #####:  495:    }
    #####:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
        -:  503:    {
    #####:  504:      j = i;
    #####:  505:    }
    #####:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
        -:  513:    {
    #####:  514:      players[i] = 1;
    #####:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
    #####:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       45:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:    return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       45:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       45:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       45:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       45:  576:    state->deckCount[player]--;
       45:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       45:  580:  return 0;
       45:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:  {
        -:  587:    case curse:
    #####:  588:    return 0;
        -:  589:    case estate:
    #####:  590:    return 2;
        -:  591:    case duchy:
    #####:  592:    return 5;
        -:  593:    case province:
    #####:  594:    return 8;
        -:  595:    case copper:
    #####:  596:    return 0;
        -:  597:    case silver:
    #####:  598:    return 3;
        -:  599:    case gold:
    #####:  600:    return 6;
        -:  601:    case adventurer:
    #####:  602:    return 6;
        -:  603:    case council_room:
    #####:  604:    return 5;
        -:  605:    case feast:
    #####:  606:    return 4;
        -:  607:    case gardens:
    #####:  608:    return 4;
        -:  609:    case mine:
    #####:  610:    return 5;
        -:  611:    case remodel:
    #####:  612:    return 4;
        -:  613:    case smithy:
    #####:  614:    return 4;
        -:  615:    case village:
    #####:  616:    return 3;
        -:  617:    case baron:
    #####:  618:    return 4;
        -:  619:    case great_hall:
    #####:  620:    return 3;
        -:  621:    case minion:
    #####:  622:    return 5;
        -:  623:    case steward:
    #####:  624:    return 3;
        -:  625:    case tribute:
    #####:  626:    return 5;
        -:  627:    case ambassador:
    #####:  628:    return 3;
        -:  629:    case cutpurse:
    #####:  630:    return 4;
        -:  631:    case embargo:
    #####:  632:    return 2;
        -:  633:    case outpost:
    #####:  634:    return 5;
        -:  635:    case salvager:
    #####:  636:    return 4;
        -:  637:    case sea_hag:
    #####:  638:    return 4;
        -:  639:    case treasure_map:
    #####:  640:    return 4;
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
    #####:  652:  int currentPlayer = whoseTurn(state);
    #####:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
    #####:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
        -:  658:
    #####:  659:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  660:    nextPlayer = 0;
    #####:  661:  }
        -:  662:
        -:  663:
        -:  664:  //uses switch to select card and perform actions
    #####:  665:  switch( card )
        -:  666:  {
        -:  667:    case adventurer:
    #####:  668:      adventurerAction(state, currentPlayer, temphand);
    #####:  669:      return 0;
        -:  670:
        -:  671:    case council_room:
        -:  672:    //+4 Cards
    #####:  673:    for (i = 0; i < 4; i++)
        -:  674:    {
    #####:  675:      drawCard(currentPlayer, state);
    #####:  676:    }
        -:  677:
        -:  678:    //+1 Buy
    #####:  679:    state->numBuys++;
        -:  680:
        -:  681:    //Each other player draws a card
    #####:  682:    for (i = 0; i < state->numPlayers; i++)
        -:  683:    {
    #####:  684:      if ( i != currentPlayer )
        -:  685:      {
    #####:  686:        drawCard(i, state);
    #####:  687:      }
    #####:  688:    }
        -:  689:
        -:  690:    //put played card in played card pile
    #####:  691:    discardCard(handPos, currentPlayer, state, 0);
        -:  692:
    #####:  693:    return 0;
        -:  694:
        -:  695:    case feast:
    #####:  696:      feastAction(state, temphand, currentPlayer, choice1, choice2, choice3);
    #####:  697:      return 0;
        -:  698:
        -:  699:    case gardens:
    #####:  700:    return -1;
        -:  701:
        -:  702:    case mine:
    #####:  703:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  704:    //printf("***This is the card we will trash: %d\n", j);
    #####:  705:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  706:    {
        -:  707:      // printf("***choice1 is not valid\n");
    #####:  708:      return -1;
        -:  709:    }
        -:  710:
    #####:  711:    if (choice2 > treasure_map || choice2 < curse)
        -:  712:    {
        -:  713:      //printf("***choice2 is not valid\n");
    #####:  714:      return -1;
        -:  715:    }
        -:  716:
    #####:  717:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  718:    {
        -:  719:      //printf("***cost difference is not valid %d AND %d\n", getCost(state->hand[currentPlayer][choice1]) + 3, getCost(choice2));
    #####:  720:      return -1;
        -:  721:    }
        -:  722:    //printf("*** The card I am trying to gain: %d\n", choice2);
    #####:  723:    gainCard(choice2, state, 2, currentPlayer);
        -:  724:    //printf("*** What i am discarding: %d\n", handPos);
        -:  725:    //discard card from hand
    #####:  726:    discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:    //discard trashed card
    #####:  729:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  730:    {
    #####:  731:      if (state->hand[currentPlayer][i] == j)
        -:  732:      {
        -:  733:        //printf("***Tryna discard this trashed card: %d\n", j);
    #####:  734:        discardCard(i, currentPlayer, state, 0);
    #####:  735:        break;
        -:  736:      }
    #####:  737:    }
        -:  738:
    #####:  739:    return 0;
        -:  740:
        -:  741:    case remodel:
    #####:  742:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  743:
    #####:  744:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  745:    {
    #####:  746:      return -1;
        -:  747:    }
        -:  748:
    #####:  749:    gainCard(choice2, state, 0, currentPlayer);
        -:  750:
        -:  751:    //discard card from hand
    #####:  752:    discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:    //discard trashed card
    #####:  755:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:    {
    #####:  757:      if (state->hand[currentPlayer][i] == j)
        -:  758:      {
    #####:  759:        discardCard(i, currentPlayer, state, 0);
    #####:  760:        break;
        -:  761:      }
    #####:  762:    }
        -:  763:
        -:  764:
    #####:  765:    return 0;
        -:  766:
        -:  767:    case smithy:
    #####:  768:    smithyAction(state, handPos, currentPlayer);
    #####:  769:    return 0;
        -:  770:
        -:  771:    case village:
        -:  772:    //+1 Card
    #####:  773:    drawCard(currentPlayer, state);
        -:  774:
        -:  775:    //+2 Actions
    #####:  776:    state->numActions = state->numActions + 2;
        -:  777:
        -:  778:    //discard played card from hand
    #####:  779:    discardCard(handPos, currentPlayer, state, 0);
    #####:  780:    return 0;
        -:  781:
        -:  782:    case baron:
    #####:  783:    state->numBuys++;//Increase buys by 1!
    #####:  784:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  785:      int p = 0;//Iterator for hand!
    #####:  786:      int card_not_discarded = 1;//Flag for discard set!
    #####:  787:      while(card_not_discarded){
    #####:  788:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  789:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  790:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  791:          state->discardCount[currentPlayer]++;
    #####:  792:          for (;p < state->handCount[currentPlayer]; p++){
    #####:  793:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  794:          }
    #####:  795:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  796:          state->handCount[currentPlayer]--;
    #####:  797:          card_not_discarded = 0;//Exit the loop
    #####:  798:        }
    #####:  799:        else if (p > state->handCount[currentPlayer]){
        -:  800:          if(DEBUG) {
        -:  801:            printf("No estate cards in your hand, invalid choice\n");
        -:  802:            printf("Must gain an estate if there are any\n");
        -:  803:          }
    #####:  804:          if (supplyCount(estate, state) > 0){
    #####:  805:            gainCard(estate, state, 0, currentPlayer);
    #####:  806:            state->supplyCount[estate]--;//Decrement estates
    #####:  807:            if (supplyCount(estate, state) == 0){
    #####:  808:              isGameOver(state);
    #####:  809:            }
    #####:  810:          }
    #####:  811:          card_not_discarded = 0;//Exit the loop
    #####:  812:        }
        -:  813:
        -:  814:        else{
    #####:  815:          p++;//Next card
        -:  816:        }
        -:  817:      }
    #####:  818:    }
        -:  819:
        -:  820:    else{
    #####:  821:      if (supplyCount(estate, state) > 0){
    #####:  822:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:        state->supplyCount[estate]--;//Decrement Estates
    #####:  824:        if (supplyCount(estate, state) == 0){
    #####:  825:          isGameOver(state);
    #####:  826:        }
    #####:  827:      }
        -:  828:    }
        -:  829:
        -:  830:
    #####:  831:    return 0;
        -:  832:
        -:  833:    case great_hall:
        -:  834:    //+1 Card
    #####:  835:    drawCard(currentPlayer, state);
        -:  836:
        -:  837:    //+1 Actions
    #####:  838:    state->numActions++;
        -:  839:
        -:  840:    //discard card from hand
    #####:  841:    discardCard(handPos, currentPlayer, state, 0);
    #####:  842:    return 0;
        -:  843:
        -:  844:    case minion:
    #####:  845:      minionAction(state, handPos, currentPlayer, choice1, choice2, choice3);
    #####:  846:      return 0;
        -:  847:
        -:  848:    case steward:
    #####:  849:      stewardAction(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####:  850:      return 0;
        -:  851:
        -:  852:    case tribute:
    #####:  853:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  854:      if (state->deckCount[nextPlayer] > 0){
    #####:  855:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  856:        state->deckCount[nextPlayer]--;
    #####:  857:      }
    #####:  858:      else if (state->discardCount[nextPlayer] > 0){
    #####:  859:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  860:        state->discardCount[nextPlayer]--;
    #####:  861:      }
        -:  862:      else{
        -:  863:        //No Card to Reveal
        -:  864:        if (DEBUG){
        -:  865:          printf("No cards to reveal\n");
        -:  866:        }
        -:  867:      }
    #####:  868:    }
        -:  869:
        -:  870:    else{
    #####:  871:      if (state->deckCount[nextPlayer] == 0){
    #####:  872:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  873:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  874:          state->deckCount[nextPlayer]++;
    #####:  875:          state->discard[nextPlayer][i] = -1;
    #####:  876:          state->discardCount[nextPlayer]--;
    #####:  877:        }
        -:  878:
    #####:  879:        shuffle(nextPlayer,state);//Shuffle the deck
    #####:  880:      }
    #####:  881:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  882:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  883:      state->deckCount[nextPlayer]--;
    #####:  884:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  886:      state->deckCount[nextPlayer]--;
        -:  887:    }
        -:  888:
    #####:  889:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  890:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  891:      state->playedCardCount++;
    #####:  892:      tributeRevealedCards[1] = -1;
    #####:  893:    }
        -:  894:
    #####:  895:    for (i = 0; i <= 2; i ++){
    #####:  896:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  897:        state->coins += 2;
    #####:  898:      }
        -:  899:
    #####:  900:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  901:        drawCard(currentPlayer, state);
    #####:  902:        drawCard(currentPlayer, state);
    #####:  903:      }
        -:  904:      else{//Action Card
    #####:  905:        state->numActions = state->numActions + 2;
        -:  906:      }
    #####:  907:    }
        -:  908:
    #####:  909:    return 0;
        -:  910:
        -:  911:    case ambassador:
    #####:  912:    j = 0;		//used to check if player has enough cards to discard
        -:  913:
    #####:  914:    if (choice2 > 2 || choice2 < 0)
        -:  915:    {
    #####:  916:      return -1;
        -:  917:    }
        -:  918:
    #####:  919:    if (choice1 == handPos)
        -:  920:    {
    #####:  921:      return -1;
        -:  922:    }
        -:  923:
    #####:  924:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  925:    {
    #####:  926:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  927:      {
    #####:  928:        j++;
    #####:  929:      }
    #####:  930:    }
    #####:  931:    if (j < choice2)
        -:  932:    {
    #####:  933:      return -1;
        -:  934:    }
        -:  935:
        -:  936:    if (DEBUG)
        -:  937:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  938:
        -:  939:    //increase supply count for choosen card by amount being discarded
    #####:  940:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  941:
        -:  942:    //each other player gains a copy of revealed card
    #####:  943:    for (i = 0; i < state->numPlayers; i++)
        -:  944:    {
    #####:  945:      if (i != currentPlayer)
        -:  946:      {
    #####:  947:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  948:      }
    #####:  949:    }
        -:  950:
        -:  951:    //discard played card from hand
    #####:  952:    discardCard(handPos, currentPlayer, state, 0);
        -:  953:
        -:  954:    //trash copies of cards returned to supply
    #####:  955:    for (j = 0; j < choice2; j++)
        -:  956:    {
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:      {
    #####:  959:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  960:        {
    #####:  961:          discardCard(i, currentPlayer, state, 1);
    #####:  962:          break;
        -:  963:        }
    #####:  964:      }
    #####:  965:    }
        -:  966:
    #####:  967:    return 0;
        -:  968:
        -:  969:    case cutpurse:
        -:  970:
    #####:  971:    updateCoins(currentPlayer, state, 2);
    #####:  972:    for (i = 0; i < state->numPlayers; i++)
        -:  973:    {
    #####:  974:      if (i != currentPlayer)
        -:  975:      {
    #####:  976:        for (j = 0; j < state->handCount[i]; j++)
        -:  977:        {
    #####:  978:          if (state->hand[i][j] == copper)
        -:  979:          {
    #####:  980:            discardCard(j, i, state, 0);
    #####:  981:            break;
        -:  982:          }
    #####:  983:          if (j == state->handCount[i])
        -:  984:          {
    #####:  985:            for (k = 0; k < state->handCount[i]; k++)
        -:  986:            {
        -:  987:              if (DEBUG)
        -:  988:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  989:            }
    #####:  990:            break;
        -:  991:          }
    #####:  992:        }
        -:  993:
    #####:  994:      }
        -:  995:
    #####:  996:    }
        -:  997:
        -:  998:    //discard played card from hand
    #####:  999:    discardCard(handPos, currentPlayer, state, 0);
        -: 1000:
    #####: 1001:    return 0;
        -: 1002:
        -: 1003:
        -: 1004:    case embargo:
        -: 1005:    //+2 Coins
    #####: 1006:    state->coins = state->coins + 2;
        -: 1007:
        -: 1008:    //see if selected pile is in play
    #####: 1009:    if ( state->supplyCount[choice1] == -1 )
        -: 1010:    {
    #####: 1011:      return -1;
        -: 1012:    }
        -: 1013:
        -: 1014:    //add embargo token to selected supply pile
    #####: 1015:    state->embargoTokens[choice1]++;
        -: 1016:
        -: 1017:    //trash card
    #####: 1018:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1019:    return 0;
        -: 1020:
        -: 1021:    case outpost:
        -: 1022:    //set outpost flag
    #####: 1023:    state->outpostPlayed++;
        -: 1024:
        -: 1025:    //discard card
    #####: 1026:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:    return 0;
        -: 1028:
        -: 1029:    case salvager:
        -: 1030:    //+1 buy
    #####: 1031:    state->numBuys++;
        -: 1032:
    #####: 1033:    if (choice1)
        -: 1034:    {
        -: 1035:      //gain coins equal to trashed card
    #####: 1036:      state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1037:      //trash card
    #####: 1038:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1039:    }
        -: 1040:
        -: 1041:    //discard card
    #####: 1042:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:    return 0;
        -: 1044:
        -: 1045:    case sea_hag:
    #####: 1046:    for (i = 0; i < state->numPlayers; i++){
    #####: 1047:      if (i != currentPlayer){
    #####: 1048:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1049:        state->discardCount[i]++;
    #####: 1050:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1051:      }
    #####: 1052:    }
    #####: 1053:    return 0;
        -: 1054:
        -: 1055:    case treasure_map:
        -: 1056:    //search hand for another treasure_map
    #####: 1057:    index = -1;
    #####: 1058:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1059:    {
    #####: 1060:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1061:      {
    #####: 1062:        index = i;
    #####: 1063:        break;
        -: 1064:      }
    #####: 1065:    }
    #####: 1066:    if (index > -1)
        -: 1067:    {
        -: 1068:      //trash both treasure cards
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1070:      discardCard(index, currentPlayer, state, 1);
        -: 1071:
        -: 1072:      //gain 4 Gold cards
    #####: 1073:      for (i = 0; i < 4; i++)
        -: 1074:      {
    #####: 1075:        gainCard(gold, state, 1, currentPlayer);
    #####: 1076:      }
        -: 1077:
        -: 1078:      //return success
    #####: 1079:      return 1;
        -: 1080:    }
        -: 1081:
        -: 1082:    //no second treasure_map found in hand
    #####: 1083:    return -1;
        -: 1084:  }
        -: 1085:
    #####: 1086:  return -1;
    #####: 1087:}
        -: 1088:
        -: 1089:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1090:{
        -: 1091:
        -: 1092:  //if card is not trashed, added to Played pile
       40: 1093:  if (trashFlag < 1)
        -: 1094:  {
        -: 1095:    //add card to played pile
       20: 1096:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       20: 1097:    state->playedCardCount++;
       20: 1098:  }
        -: 1099:
        -: 1100:  //set played card to -1
       40: 1101:  state->hand[currentPlayer][handPos] = -1;
        -: 1102:
        -: 1103:  //remove card from player's hand
       40: 1104:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1105:  {
        -: 1106:    //reduce number of cards in hand
       12: 1107:    state->handCount[currentPlayer]--;
       12: 1108:  }
       28: 1109:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1110:  {
        -: 1111:    //reduce number of cards in hand
    #####: 1112:    state->handCount[currentPlayer]--;
    #####: 1113:  }
        -: 1114:  else
        -: 1115:  {
        -: 1116:    //replace discarded card with last card in hand
       28: 1117:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1118:    //set last card to -1
       28: 1119:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1120:    //reduce number of cards in hand
       28: 1121:    state->handCount[currentPlayer]--;
        -: 1122:  }
        -: 1123:
       40: 1124:  return 0;
        -: 1125:}
        -: 1126:
        -: 1127:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1128:{
        -: 1129:  //Note: supplyPos is enum of choosen card
        -: 1130:
        -: 1131:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1132:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1133:  {
        8: 1134:    return -1;
        -: 1135:  }
        -: 1136:
        -: 1137:  //added card for [whoseTurn] current player:
        -: 1138:  // toFlag = 0 : add to discard
        -: 1139:  // toFlag = 1 : add to deck
        -: 1140:  // toFlag = 2 : add to hand
        -: 1141:
       12: 1142:  if (toFlag == 1)
        -: 1143:  {
        4: 1144:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1145:    state->deckCount[player]++;
        4: 1146:  }
        8: 1147:  else if (toFlag == 2)
        -: 1148:  {
        4: 1149:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1150:    state->handCount[player]++;
        4: 1151:  }
        -: 1152:  else
        -: 1153:  {
        4: 1154:    state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1155:    state->discardCount[player]++;
        -: 1156:  }
        -: 1157:
        -: 1158:  //decrease number in supply pile
       12: 1159:  state->supplyCount[supplyPos]--;
        -: 1160:
       12: 1161:  return 0;
       20: 1162:}
        -: 1163:
        -: 1164:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1165:{
        -: 1166:  int i;
        -: 1167:
        -: 1168:  //reset coin count
        9: 1169:  state->coins = 0;
        -: 1170:
        -: 1171:  //add coins for each Treasure card in player's hand
      108: 1172:  for (i = 0; i < state->handCount[player]; i++)
        -: 1173:  {
       45: 1174:    if (state->hand[player][i] == copper)
        -: 1175:    {
       36: 1176:      state->coins += 1;
       36: 1177:    }
        9: 1178:    else if (state->hand[player][i] == silver)
        -: 1179:    {
    #####: 1180:      state->coins += 2;
    #####: 1181:    }
        9: 1182:    else if (state->hand[player][i] == gold)
        -: 1183:    {
    #####: 1184:      state->coins += 3;
    #####: 1185:    }
       45: 1186:  }
        -: 1187:
        -: 1188:  //add bonus
        9: 1189:  state->coins += bonus;
        -: 1190:
        9: 1191:  return 0;
        -: 1192:}
        -: 1193:
        -: 1194:void smithyAction(struct gameState *state, int handPos, int currentPlayer){
        -: 1195:  //+3 Cards
    #####: 1196:  for (int i = 0; i <= 3; i++) { // BUG: added = to <
    #####: 1197:    drawCard(currentPlayer, state);
    #####: 1198:  }
        -: 1199:  //discard card from hand
    #####: 1200:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1201:}
        -: 1202:
        -: 1203:void adventurerAction(struct gameState *state, int currentPlayer, int temphand[]){
        -: 1204:  int cardDrawn;
    #####: 1205:  int drawnTreasure = 0;
    #####: 1206:  int z = 0;// this is the counter for the temp hand
    #####: 1207:  while(drawnTreasure <= 2){ // BUG: added = to <
    #####: 1208:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1209:      shuffle(currentPlayer, state);
    #####: 1210:    }
    #####: 1211:    drawCard(currentPlayer, state);
    #####: 1212:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1213:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1214:    drawnTreasure++;
        -: 1215:    else{
    #####: 1216:      temphand[z]=cardDrawn;
    #####: 1217:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1218:      z++;
        -: 1219:    }
        -: 1220:  }
    #####: 1221:  while(z-1>=0){
    #####: 1222:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1223:    z=z-1;
        -: 1224:  }
    #####: 1225:}
        -: 1226:
        -: 1227:void stewardAction(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3) {
    #####: 1228:  if (choice1 == 1)
        -: 1229:  {
        -: 1230:    //+2 cards
    #####: 1231:    drawCard(currentPlayer, state);
    #####: 1232:    drawCard(currentPlayer, state);
    #####: 1233:  }
    #####: 1234:  else if (choice1 == 2)
        -: 1235:  {
        -: 1236:    //+2 coins
    #####: 1237:    state->coins = /*state->coins*/ + 2; //BUG: removed state->coins
    #####: 1238:  }
        -: 1239:  else
        -: 1240:  {
        -: 1241:    //trash 2 cards in hand
    #####: 1242:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1243:    discardCard(choice3, currentPlayer, state, 1);
        -: 1244:  }
        -: 1245:
        -: 1246:  //discard card from hand
    #####: 1247:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:}
        -: 1249:
        -: 1250:void minionAction(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2, int choice3) {
        -: 1251:  //+1 action
    #####: 1252:  state->numActions++;
        -: 1253:
        -: 1254:  //discard card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
        -: 1256:
    #####: 1257:  if (choice1)		//+2 coins
        -: 1258:  {
    #####: 1259:    state->coins = state->coins + 2;
    #####: 1260:  }
        -: 1261:
    #####: 1262:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1263:  {
        -: 1264:    //discard hand
    #####: 1265:    while(numHandCards(state) > 0)
        -: 1266:    {
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);
        -: 1268:    }
        -: 1269:
        -: 1270:    //draw 4
    #####: 1271:    for (int i = 0; i < 4; i++)
        -: 1272:    {
    #####: 1273:      drawCard(currentPlayer, state);
    #####: 1274:    }
        -: 1275:
        -: 1276:    //other players discard hand and redraw if hand size > 4
    #####: 1277:    for (int i = 0; i < state->numPlayers; i++)
        -: 1278:    {
    #####: 1279:      if (i != currentPlayer)
        -: 1280:      {
    #####: 1281:        if ( state->handCount[i] > 4 )
        -: 1282:        {
        -: 1283:          //discard hand
    #####: 1284:          while( state->handCount[i] > 0 )
        -: 1285:          {
    #####: 1286:            discardCard(handPos, i, state, 0);
        -: 1287:          }
        -: 1288:
        -: 1289:          //draw 4
    #####: 1290:          for (int j = 0; j < 4; j++)
        -: 1291:          {
    #####: 1292:            drawCard(i, state);
    #####: 1293:          }
    #####: 1294:        }
    #####: 1295:      }
    #####: 1296:    }
        -: 1297:
    #####: 1298:  }
    #####: 1299:}
        -: 1300:
        -: 1301:void feastAction(struct gameState *state, int temphand[], int currentPlayer, int choice1, int choice2, int choice3){
        -: 1302:  //gain card with cost up to 5
        -: 1303:  //Backup hand
    #####: 1304:  for (int i = 0; i < state->handCount[currentPlayer]; i++){ // BUG: removed = from >=
    #####: 1305:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1306:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1307:  }
        -: 1308:  //Backup hand
        -: 1309:
        -: 1310:  //Update Coins for Buy
    #####: 1311:  updateCoins(currentPlayer, state, 5);
    #####: 1312:  int x = 1;//Condition to loop on
    #####: 1313:  while( x == 1) {//Buy one card
    #####: 1314:    if (supplyCount(choice1, state) <= 0){
        -: 1315:      if (DEBUG)
        -: 1316:      printf("None of that card left, sorry!\n");
        -: 1317:
        -: 1318:      if (DEBUG){
        -: 1319:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1320:      }
    #####: 1321:    }
    #####: 1322:    else if (state->coins < getCost(choice1)){
    #####: 1323:      printf("That card is too expensive!\n");
        -: 1324:
        -: 1325:      if (DEBUG){
        -: 1326:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1327:      }
    #####: 1328:    }
        -: 1329:    else{
        -: 1330:
        -: 1331:      if (DEBUG){
        -: 1332:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1333:      }
        -: 1334:
    #####: 1335:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1336:      x = 0;//No more buying cards
        -: 1337:
        -: 1338:      if (DEBUG){
        -: 1339:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1340:      }
        -: 1341:
        -: 1342:    }
        -: 1343:  }
        -: 1344:
        -: 1345:  //Reset Hand
    #####: 1346:  for (int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1347:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1348:    temphand[i] = -1;
    #####: 1349:  }
        -: 1350:  //Reset Hand
    #####: 1351:}
        -: 1352:
        -: 1353://end of dominion.c
cardtest1.c:
Testing the smithy card:
	Testing for PLAYER 0:
playedCounter = 0
		Checking that three cards were added to the hand and smithy was removed:
			Expected: 7, result: 8
			***Assert failed, total fails***: 1

		Checking that smithy was added to the played pile:
			Expected: 13, result: 13
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing for PLAYER 1:
playedCounter = 0
		Checking that three cards were added to the hand and smithy was removed:
			Expected: 7, result: 8
			***Assert failed, total fails***: 2

		Checking that smithy was added to the played pile:
			Expected: 13, result: 13
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Checking player 0's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing for PLAYER 2:
playedCounter = 0
		Checking that three cards were added to the hand and smithy was removed:
			Expected: 7, result: 8
			***Assert failed, total fails***: 3

		Checking that smithy was added to the played pile:
			Expected: 13, result: 13
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Checking player 0's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing for PLAYER 3:
playedCounter = 0
		Checking that three cards were added to the hand and smithy was removed:
			Expected: 7, result: 8
			***Assert failed, total fails***: 4

		Checking that smithy was added to the played pile:
			Expected: 13, result: 13
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Checking player 0's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

FINAL RESULT: 4 FAILURES
File 'cardtest1.c'
Lines executed:92.42% of 66
cardtest1.c:creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:30.35% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      543:    9:  if (*(int*)a > *(int*)b)
    #####:   10:  return 1;
      543:   11:  if (*(int*)a < *(int*)b)
      194:   12:  return -1;
      349:   13:  return 0;
      543:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
       10:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       20:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      220:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     2200:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
     1900:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
     1000:   65:    }
      100:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
        -:   74:  {
        1:   75:    state->supplyCount[curse] = 10;
        1:   76:  }
        9:   77:  else if (numPlayers == 3)
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
    #####:   80:  }
        -:   81:  else
        -:   82:  {
        9:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
        -:   88:  {
        1:   89:    state->supplyCount[estate] = 8;
        1:   90:    state->supplyCount[duchy] = 8;
        1:   91:    state->supplyCount[province] = 8;
        1:   92:  }
        -:   93:  else
        -:   94:  {
        9:   95:    state->supplyCount[estate] = 12;
        9:   96:    state->supplyCount[duchy] = 12;
        9:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      420:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     3300:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    {
     1550:  110:      if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      190:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
       20:  115:          if (numPlayers == 2){
        2:  116:            state->supplyCount[i] = 8;
        2:  117:          }
       18:  118:          else{ state->supplyCount[i] = 12; }
       20:  119:        }
        -:  120:        else
        -:  121:        {
       80:  122:          state->supplyCount[i] = 10;
        -:  123:        }
      100:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     1450:  128:        state->supplyCount[i] = -1;
        -:  129:      }
     1450:  130:    }
        -:  131:
      200:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       96:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:  {
       38:  140:    state->deckCount[i] = 0;
      304:  141:    for (j = 0; j < 3; j++)
        -:  142:    {
      114:  143:      state->deck[i][j] = estate;
      114:  144:      state->deckCount[i]++;
      114:  145:    }
      608:  146:    for (j = 3; j < 10; j++)
        -:  147:    {
      266:  148:      state->deck[i][j] = copper;
      266:  149:      state->deckCount[i]++;
      266:  150:    }
       38:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
       96:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:  {
       38:  156:    if ( shuffle(i, state) < 0 )
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
       38:  160:  }
        -:  161:
        -:  162:  //draw player hands
       96:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:  {
        -:  165:    //initialize hand size to zero
       38:  166:    state->handCount[i] = 0;
       38:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
       38:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      560:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:  {
      270:  178:    state->embargoTokens[i] = 0;
      270:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      120:  192:  for (it = 0; it < 5; it++){
       50:  193:    drawCard(state->whoseTurn, state);
       50:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       10:  198:  return 0;
       10:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       39:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       39:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       39:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      854:  214:  while (state->deckCount[player] > 0) {
      388:  215:    card = floor(Random() * state->deckCount[player]);
      388:  216:    newDeck[newDeckPos] = state->deck[player][card];
      388:  217:    newDeckPos++;
     2684:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      954:  219:      state->deck[player][i] = state->deck[player][i+1];
      954:  220:    }
      388:  221:    state->deckCount[player]--;
        -:  222:  }
      854:  223:  for (i = 0; i < newDeckPos; i++) {
      388:  224:    state->deck[player][i] = newDeck[i];
      388:  225:    state->deckCount[player]++;
      388:  226:  }
        -:  227:
       39:  228:  return 0;
       39:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:    printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:    printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       74:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
    #####:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
    #####:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
    #####:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       13:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        4:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
       72:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       32:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       32:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       32:  359:  }
        4:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        4:  363:  if (currentPlayer < (state->numPlayers - 1)){
        3:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        3:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        4:  370:  state->outpostPlayed = 0;
        4:  371:  state->phase = 0;
        4:  372:  state->numActions = 1;
        4:  373:  state->coins = 0;
        4:  374:  state->numBuys = 1;
        4:  375:  state->playedCardCount = 0;
        4:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       48:  380:  for (k = 0; k < 5; k++){
       20:  381:    drawCard(state->whoseTurn, state);//Draw a card
       20:  382:  }
        -:  383:
        -:  384:  //Update money
        4:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        4:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:  {
    #####:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:  {
    #####:  404:    if (state->supplyCount[i] == 0)
        -:  405:    {
    #####:  406:      j++;
    #####:  407:    }
    #####:  408:  }
    #####:  409:  if ( j >= 3)
        -:  410:  {
    #####:  411:    return 1;
        -:  412:  }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:      players[i] = -9999;
    #####:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
    #####:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
        -:  482:    {
    #####:  483:      j = i;
    #####:  484:    }
    #####:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
        -:  493:    {
    #####:  494:      players[i]++;
    #####:  495:    }
    #####:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
        -:  503:    {
    #####:  504:      j = i;
    #####:  505:    }
    #####:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
        -:  513:    {
    #####:  514:      players[i] = 1;
    #####:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
    #####:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       86:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       18:  533:    for (i = 0; i < state->discardCount[player];i++){
        8:  534:      state->deck[player][i] = state->discard[player][i];
        8:  535:      state->discard[player][i] = -1;
        8:  536:    }
        -:  537:
        1:  538:    state->deckCount[player] = state->discardCount[player];
        1:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        1:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        1:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        1:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        1:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        1:  559:    if (deckCounter == 0)
    #####:  560:    return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        1:  565:  }
        -:  566:
        -:  567:  else{
       85:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       85:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       85:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       85:  576:    state->deckCount[player]--;
       85:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       86:  580:  return 0;
       86:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:  {
        -:  587:    case curse:
    #####:  588:    return 0;
        -:  589:    case estate:
    #####:  590:    return 2;
        -:  591:    case duchy:
    #####:  592:    return 5;
        -:  593:    case province:
    #####:  594:    return 8;
        -:  595:    case copper:
    #####:  596:    return 0;
        -:  597:    case silver:
    #####:  598:    return 3;
        -:  599:    case gold:
    #####:  600:    return 6;
        -:  601:    case adventurer:
    #####:  602:    return 6;
        -:  603:    case council_room:
    #####:  604:    return 5;
        -:  605:    case feast:
    #####:  606:    return 4;
        -:  607:    case gardens:
    #####:  608:    return 4;
        -:  609:    case mine:
    #####:  610:    return 5;
        -:  611:    case remodel:
    #####:  612:    return 4;
        -:  613:    case smithy:
    #####:  614:    return 4;
        -:  615:    case village:
    #####:  616:    return 3;
        -:  617:    case baron:
    #####:  618:    return 4;
        -:  619:    case great_hall:
    #####:  620:    return 3;
        -:  621:    case minion:
    #####:  622:    return 5;
        -:  623:    case steward:
    #####:  624:    return 3;
        -:  625:    case tribute:
    #####:  626:    return 5;
        -:  627:    case ambassador:
    #####:  628:    return 3;
        -:  629:    case cutpurse:
    #####:  630:    return 4;
        -:  631:    case embargo:
    #####:  632:    return 2;
        -:  633:    case outpost:
    #####:  634:    return 5;
        -:  635:    case salvager:
    #####:  636:    return 4;
        -:  637:    case sea_hag:
    #####:  638:    return 4;
        -:  639:    case treasure_map:
    #####:  640:    return 4;
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
        4:  652:  int currentPlayer = whoseTurn(state);
        4:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
        4:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
        -:  658:
        4:  659:  if (nextPlayer > (state->numPlayers - 1)){
        1:  660:    nextPlayer = 0;
        1:  661:  }
        -:  662:
        -:  663:
        -:  664:  //uses switch to select card and perform actions
        4:  665:  switch( card )
        -:  666:  {
        -:  667:    case adventurer:
    #####:  668:      adventurerAction(state, currentPlayer, temphand);
    #####:  669:      return 0;
        -:  670:
        -:  671:    case council_room:
        -:  672:    //+4 Cards
    #####:  673:    for (i = 0; i < 4; i++)
        -:  674:    {
    #####:  675:      drawCard(currentPlayer, state);
    #####:  676:    }
        -:  677:
        -:  678:    //+1 Buy
    #####:  679:    state->numBuys++;
        -:  680:
        -:  681:    //Each other player draws a card
    #####:  682:    for (i = 0; i < state->numPlayers; i++)
        -:  683:    {
    #####:  684:      if ( i != currentPlayer )
        -:  685:      {
    #####:  686:        drawCard(i, state);
    #####:  687:      }
    #####:  688:    }
        -:  689:
        -:  690:    //put played card in played card pile
    #####:  691:    discardCard(handPos, currentPlayer, state, 0);
        -:  692:
    #####:  693:    return 0;
        -:  694:
        -:  695:    case feast:
    #####:  696:      feastAction(state, temphand, currentPlayer, choice1, choice2, choice3);
    #####:  697:      return 0;
        -:  698:
        -:  699:    case gardens:
    #####:  700:    return -1;
        -:  701:
        -:  702:    case mine:
    #####:  703:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  704:    //printf("***This is the card we will trash: %d\n", j);
    #####:  705:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  706:    {
        -:  707:      // printf("***choice1 is not valid\n");
    #####:  708:      return -1;
        -:  709:    }
        -:  710:
    #####:  711:    if (choice2 > treasure_map || choice2 < curse)
        -:  712:    {
        -:  713:      //printf("***choice2 is not valid\n");
    #####:  714:      return -1;
        -:  715:    }
        -:  716:
    #####:  717:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  718:    {
        -:  719:      //printf("***cost difference is not valid %d AND %d\n", getCost(state->hand[currentPlayer][choice1]) + 3, getCost(choice2));
    #####:  720:      return -1;
        -:  721:    }
        -:  722:    //printf("*** The card I am trying to gain: %d\n", choice2);
    #####:  723:    gainCard(choice2, state, 2, currentPlayer);
        -:  724:    //printf("*** What i am discarding: %d\n", handPos);
        -:  725:    //discard card from hand
    #####:  726:    discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:    //discard trashed card
    #####:  729:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  730:    {
    #####:  731:      if (state->hand[currentPlayer][i] == j)
        -:  732:      {
        -:  733:        //printf("***Tryna discard this trashed card: %d\n", j);
    #####:  734:        discardCard(i, currentPlayer, state, 0);
    #####:  735:        break;
        -:  736:      }
    #####:  737:    }
        -:  738:
    #####:  739:    return 0;
        -:  740:
        -:  741:    case remodel:
    #####:  742:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  743:
    #####:  744:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  745:    {
    #####:  746:      return -1;
        -:  747:    }
        -:  748:
    #####:  749:    gainCard(choice2, state, 0, currentPlayer);
        -:  750:
        -:  751:    //discard card from hand
    #####:  752:    discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:    //discard trashed card
    #####:  755:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:    {
    #####:  757:      if (state->hand[currentPlayer][i] == j)
        -:  758:      {
    #####:  759:        discardCard(i, currentPlayer, state, 0);
    #####:  760:        break;
        -:  761:      }
    #####:  762:    }
        -:  763:
        -:  764:
    #####:  765:    return 0;
        -:  766:
        -:  767:    case smithy:
        4:  768:    smithyAction(state, handPos, currentPlayer);
        4:  769:    return 0;
        -:  770:
        -:  771:    case village:
        -:  772:    //+1 Card
    #####:  773:    drawCard(currentPlayer, state);
        -:  774:
        -:  775:    //+2 Actions
    #####:  776:    state->numActions = state->numActions + 2;
        -:  777:
        -:  778:    //discard played card from hand
    #####:  779:    discardCard(handPos, currentPlayer, state, 0);
    #####:  780:    return 0;
        -:  781:
        -:  782:    case baron:
    #####:  783:    state->numBuys++;//Increase buys by 1!
    #####:  784:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  785:      int p = 0;//Iterator for hand!
    #####:  786:      int card_not_discarded = 1;//Flag for discard set!
    #####:  787:      while(card_not_discarded){
    #####:  788:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  789:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  790:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  791:          state->discardCount[currentPlayer]++;
    #####:  792:          for (;p < state->handCount[currentPlayer]; p++){
    #####:  793:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  794:          }
    #####:  795:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  796:          state->handCount[currentPlayer]--;
    #####:  797:          card_not_discarded = 0;//Exit the loop
    #####:  798:        }
    #####:  799:        else if (p > state->handCount[currentPlayer]){
        -:  800:          if(DEBUG) {
        -:  801:            printf("No estate cards in your hand, invalid choice\n");
        -:  802:            printf("Must gain an estate if there are any\n");
        -:  803:          }
    #####:  804:          if (supplyCount(estate, state) > 0){
    #####:  805:            gainCard(estate, state, 0, currentPlayer);
    #####:  806:            state->supplyCount[estate]--;//Decrement estates
    #####:  807:            if (supplyCount(estate, state) == 0){
    #####:  808:              isGameOver(state);
    #####:  809:            }
    #####:  810:          }
    #####:  811:          card_not_discarded = 0;//Exit the loop
    #####:  812:        }
        -:  813:
        -:  814:        else{
    #####:  815:          p++;//Next card
        -:  816:        }
        -:  817:      }
    #####:  818:    }
        -:  819:
        -:  820:    else{
    #####:  821:      if (supplyCount(estate, state) > 0){
    #####:  822:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:        state->supplyCount[estate]--;//Decrement Estates
    #####:  824:        if (supplyCount(estate, state) == 0){
    #####:  825:          isGameOver(state);
    #####:  826:        }
    #####:  827:      }
        -:  828:    }
        -:  829:
        -:  830:
    #####:  831:    return 0;
        -:  832:
        -:  833:    case great_hall:
        -:  834:    //+1 Card
    #####:  835:    drawCard(currentPlayer, state);
        -:  836:
        -:  837:    //+1 Actions
    #####:  838:    state->numActions++;
        -:  839:
        -:  840:    //discard card from hand
    #####:  841:    discardCard(handPos, currentPlayer, state, 0);
    #####:  842:    return 0;
        -:  843:
        -:  844:    case minion:
    #####:  845:      minionAction(state, handPos, currentPlayer, choice1, choice2, choice3);
    #####:  846:      return 0;
        -:  847:
        -:  848:    case steward:
    #####:  849:      stewardAction(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####:  850:      return 0;
        -:  851:
        -:  852:    case tribute:
    #####:  853:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  854:      if (state->deckCount[nextPlayer] > 0){
    #####:  855:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  856:        state->deckCount[nextPlayer]--;
    #####:  857:      }
    #####:  858:      else if (state->discardCount[nextPlayer] > 0){
    #####:  859:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  860:        state->discardCount[nextPlayer]--;
    #####:  861:      }
        -:  862:      else{
        -:  863:        //No Card to Reveal
        -:  864:        if (DEBUG){
        -:  865:          printf("No cards to reveal\n");
        -:  866:        }
        -:  867:      }
    #####:  868:    }
        -:  869:
        -:  870:    else{
    #####:  871:      if (state->deckCount[nextPlayer] == 0){
    #####:  872:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  873:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  874:          state->deckCount[nextPlayer]++;
    #####:  875:          state->discard[nextPlayer][i] = -1;
    #####:  876:          state->discardCount[nextPlayer]--;
    #####:  877:        }
        -:  878:
    #####:  879:        shuffle(nextPlayer,state);//Shuffle the deck
    #####:  880:      }
    #####:  881:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  882:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  883:      state->deckCount[nextPlayer]--;
    #####:  884:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  886:      state->deckCount[nextPlayer]--;
        -:  887:    }
        -:  888:
    #####:  889:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  890:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  891:      state->playedCardCount++;
    #####:  892:      tributeRevealedCards[1] = -1;
    #####:  893:    }
        -:  894:
    #####:  895:    for (i = 0; i <= 2; i ++){
    #####:  896:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  897:        state->coins += 2;
    #####:  898:      }
        -:  899:
    #####:  900:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  901:        drawCard(currentPlayer, state);
    #####:  902:        drawCard(currentPlayer, state);
    #####:  903:      }
        -:  904:      else{//Action Card
    #####:  905:        state->numActions = state->numActions + 2;
        -:  906:      }
    #####:  907:    }
        -:  908:
    #####:  909:    return 0;
        -:  910:
        -:  911:    case ambassador:
    #####:  912:    j = 0;		//used to check if player has enough cards to discard
        -:  913:
    #####:  914:    if (choice2 > 2 || choice2 < 0)
        -:  915:    {
    #####:  916:      return -1;
        -:  917:    }
        -:  918:
    #####:  919:    if (choice1 == handPos)
        -:  920:    {
    #####:  921:      return -1;
        -:  922:    }
        -:  923:
    #####:  924:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  925:    {
    #####:  926:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  927:      {
    #####:  928:        j++;
    #####:  929:      }
    #####:  930:    }
    #####:  931:    if (j < choice2)
        -:  932:    {
    #####:  933:      return -1;
        -:  934:    }
        -:  935:
        -:  936:    if (DEBUG)
        -:  937:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  938:
        -:  939:    //increase supply count for choosen card by amount being discarded
    #####:  940:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  941:
        -:  942:    //each other player gains a copy of revealed card
    #####:  943:    for (i = 0; i < state->numPlayers; i++)
        -:  944:    {
    #####:  945:      if (i != currentPlayer)
        -:  946:      {
    #####:  947:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  948:      }
    #####:  949:    }
        -:  950:
        -:  951:    //discard played card from hand
    #####:  952:    discardCard(handPos, currentPlayer, state, 0);
        -:  953:
        -:  954:    //trash copies of cards returned to supply
    #####:  955:    for (j = 0; j < choice2; j++)
        -:  956:    {
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:      {
    #####:  959:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  960:        {
    #####:  961:          discardCard(i, currentPlayer, state, 1);
    #####:  962:          break;
        -:  963:        }
    #####:  964:      }
    #####:  965:    }
        -:  966:
    #####:  967:    return 0;
        -:  968:
        -:  969:    case cutpurse:
        -:  970:
    #####:  971:    updateCoins(currentPlayer, state, 2);
    #####:  972:    for (i = 0; i < state->numPlayers; i++)
        -:  973:    {
    #####:  974:      if (i != currentPlayer)
        -:  975:      {
    #####:  976:        for (j = 0; j < state->handCount[i]; j++)
        -:  977:        {
    #####:  978:          if (state->hand[i][j] == copper)
        -:  979:          {
    #####:  980:            discardCard(j, i, state, 0);
    #####:  981:            break;
        -:  982:          }
    #####:  983:          if (j == state->handCount[i])
        -:  984:          {
    #####:  985:            for (k = 0; k < state->handCount[i]; k++)
        -:  986:            {
        -:  987:              if (DEBUG)
        -:  988:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  989:            }
    #####:  990:            break;
        -:  991:          }
    #####:  992:        }
        -:  993:
    #####:  994:      }
        -:  995:
    #####:  996:    }
        -:  997:
        -:  998:    //discard played card from hand
    #####:  999:    discardCard(handPos, currentPlayer, state, 0);
        -: 1000:
    #####: 1001:    return 0;
        -: 1002:
        -: 1003:
        -: 1004:    case embargo:
        -: 1005:    //+2 Coins
    #####: 1006:    state->coins = state->coins + 2;
        -: 1007:
        -: 1008:    //see if selected pile is in play
    #####: 1009:    if ( state->supplyCount[choice1] == -1 )
        -: 1010:    {
    #####: 1011:      return -1;
        -: 1012:    }
        -: 1013:
        -: 1014:    //add embargo token to selected supply pile
    #####: 1015:    state->embargoTokens[choice1]++;
        -: 1016:
        -: 1017:    //trash card
    #####: 1018:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1019:    return 0;
        -: 1020:
        -: 1021:    case outpost:
        -: 1022:    //set outpost flag
    #####: 1023:    state->outpostPlayed++;
        -: 1024:
        -: 1025:    //discard card
    #####: 1026:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:    return 0;
        -: 1028:
        -: 1029:    case salvager:
        -: 1030:    //+1 buy
    #####: 1031:    state->numBuys++;
        -: 1032:
    #####: 1033:    if (choice1)
        -: 1034:    {
        -: 1035:      //gain coins equal to trashed card
    #####: 1036:      state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1037:      //trash card
    #####: 1038:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1039:    }
        -: 1040:
        -: 1041:    //discard card
    #####: 1042:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:    return 0;
        -: 1044:
        -: 1045:    case sea_hag:
    #####: 1046:    for (i = 0; i < state->numPlayers; i++){
    #####: 1047:      if (i != currentPlayer){
    #####: 1048:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1049:        state->discardCount[i]++;
    #####: 1050:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1051:      }
    #####: 1052:    }
    #####: 1053:    return 0;
        -: 1054:
        -: 1055:    case treasure_map:
        -: 1056:    //search hand for another treasure_map
    #####: 1057:    index = -1;
    #####: 1058:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1059:    {
    #####: 1060:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1061:      {
    #####: 1062:        index = i;
    #####: 1063:        break;
        -: 1064:      }
    #####: 1065:    }
    #####: 1066:    if (index > -1)
        -: 1067:    {
        -: 1068:      //trash both treasure cards
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1070:      discardCard(index, currentPlayer, state, 1);
        -: 1071:
        -: 1072:      //gain 4 Gold cards
    #####: 1073:      for (i = 0; i < 4; i++)
        -: 1074:      {
    #####: 1075:        gainCard(gold, state, 1, currentPlayer);
    #####: 1076:      }
        -: 1077:
        -: 1078:      //return success
    #####: 1079:      return 1;
        -: 1080:    }
        -: 1081:
        -: 1082:    //no second treasure_map found in hand
    #####: 1083:    return -1;
        -: 1084:  }
        -: 1085:
    #####: 1086:  return -1;
        4: 1087:}
        -: 1088:
        -: 1089:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1090:{
        -: 1091:
        -: 1092:  //if card is not trashed, added to Played pile
       44: 1093:  if (trashFlag < 1)
        -: 1094:  {
        -: 1095:    //add card to played pile
       24: 1096:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       24: 1097:    state->playedCardCount++;
       24: 1098:  }
        -: 1099:
        -: 1100:  //set played card to -1
       44: 1101:  state->hand[currentPlayer][handPos] = -1;
        -: 1102:
        -: 1103:  //remove card from player's hand
       44: 1104:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1105:  {
        -: 1106:    //reduce number of cards in hand
       12: 1107:    state->handCount[currentPlayer]--;
       12: 1108:  }
       32: 1109:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1110:  {
        -: 1111:    //reduce number of cards in hand
    #####: 1112:    state->handCount[currentPlayer]--;
    #####: 1113:  }
        -: 1114:  else
        -: 1115:  {
        -: 1116:    //replace discarded card with last card in hand
       32: 1117:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1118:    //set last card to -1
       32: 1119:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1120:    //reduce number of cards in hand
       32: 1121:    state->handCount[currentPlayer]--;
        -: 1122:  }
        -: 1123:
       44: 1124:  return 0;
        -: 1125:}
        -: 1126:
        -: 1127:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1128:{
        -: 1129:  //Note: supplyPos is enum of choosen card
        -: 1130:
        -: 1131:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1132:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1133:  {
        8: 1134:    return -1;
        -: 1135:  }
        -: 1136:
        -: 1137:  //added card for [whoseTurn] current player:
        -: 1138:  // toFlag = 0 : add to discard
        -: 1139:  // toFlag = 1 : add to deck
        -: 1140:  // toFlag = 2 : add to hand
        -: 1141:
       12: 1142:  if (toFlag == 1)
        -: 1143:  {
        4: 1144:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1145:    state->deckCount[player]++;
        4: 1146:  }
        8: 1147:  else if (toFlag == 2)
        -: 1148:  {
        4: 1149:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1150:    state->handCount[player]++;
        4: 1151:  }
        -: 1152:  else
        -: 1153:  {
        4: 1154:    state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1155:    state->discardCount[player]++;
        -: 1156:  }
        -: 1157:
        -: 1158:  //decrease number in supply pile
       12: 1159:  state->supplyCount[supplyPos]--;
        -: 1160:
       12: 1161:  return 0;
       20: 1162:}
        -: 1163:
        -: 1164:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1165:{
        -: 1166:  int i;
        -: 1167:
        -: 1168:  //reset coin count
       14: 1169:  state->coins = 0;
        -: 1170:
        -: 1171:  //add coins for each Treasure card in player's hand
      168: 1172:  for (i = 0; i < state->handCount[player]; i++)
        -: 1173:  {
       70: 1174:    if (state->hand[player][i] == copper)
        -: 1175:    {
       53: 1176:      state->coins += 1;
       53: 1177:    }
       17: 1178:    else if (state->hand[player][i] == silver)
        -: 1179:    {
    #####: 1180:      state->coins += 2;
    #####: 1181:    }
       17: 1182:    else if (state->hand[player][i] == gold)
        -: 1183:    {
    #####: 1184:      state->coins += 3;
    #####: 1185:    }
       70: 1186:  }
        -: 1187:
        -: 1188:  //add bonus
       14: 1189:  state->coins += bonus;
        -: 1190:
       14: 1191:  return 0;
        -: 1192:}
        -: 1193:
        -: 1194:void smithyAction(struct gameState *state, int handPos, int currentPlayer){
        -: 1195:  //+3 Cards
       40: 1196:  for (int i = 0; i <= 3; i++) { // BUG: added = to <
       16: 1197:    drawCard(currentPlayer, state);
       16: 1198:  }
        -: 1199:  //discard card from hand
        4: 1200:  discardCard(handPos, currentPlayer, state, 0);
        4: 1201:}
        -: 1202:
        -: 1203:void adventurerAction(struct gameState *state, int currentPlayer, int temphand[]){
        -: 1204:  int cardDrawn;
    #####: 1205:  int drawnTreasure = 0;
    #####: 1206:  int z = 0;// this is the counter for the temp hand
    #####: 1207:  while(drawnTreasure <= 2){ // BUG: added = to <
    #####: 1208:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1209:      shuffle(currentPlayer, state);
    #####: 1210:    }
    #####: 1211:    drawCard(currentPlayer, state);
    #####: 1212:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1213:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1214:    drawnTreasure++;
        -: 1215:    else{
    #####: 1216:      temphand[z]=cardDrawn;
    #####: 1217:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1218:      z++;
        -: 1219:    }
        -: 1220:  }
    #####: 1221:  while(z-1>=0){
    #####: 1222:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1223:    z=z-1;
        -: 1224:  }
    #####: 1225:}
        -: 1226:
        -: 1227:void stewardAction(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3) {
    #####: 1228:  if (choice1 == 1)
        -: 1229:  {
        -: 1230:    //+2 cards
    #####: 1231:    drawCard(currentPlayer, state);
    #####: 1232:    drawCard(currentPlayer, state);
    #####: 1233:  }
    #####: 1234:  else if (choice1 == 2)
        -: 1235:  {
        -: 1236:    //+2 coins
    #####: 1237:    state->coins = /*state->coins*/ + 2; //BUG: removed state->coins
    #####: 1238:  }
        -: 1239:  else
        -: 1240:  {
        -: 1241:    //trash 2 cards in hand
    #####: 1242:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1243:    discardCard(choice3, currentPlayer, state, 1);
        -: 1244:  }
        -: 1245:
        -: 1246:  //discard card from hand
    #####: 1247:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:}
        -: 1249:
        -: 1250:void minionAction(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2, int choice3) {
        -: 1251:  //+1 action
    #####: 1252:  state->numActions++;
        -: 1253:
        -: 1254:  //discard card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
        -: 1256:
    #####: 1257:  if (choice1)		//+2 coins
        -: 1258:  {
    #####: 1259:    state->coins = state->coins + 2;
    #####: 1260:  }
        -: 1261:
    #####: 1262:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1263:  {
        -: 1264:    //discard hand
    #####: 1265:    while(numHandCards(state) > 0)
        -: 1266:    {
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);
        -: 1268:    }
        -: 1269:
        -: 1270:    //draw 4
    #####: 1271:    for (int i = 0; i < 4; i++)
        -: 1272:    {
    #####: 1273:      drawCard(currentPlayer, state);
    #####: 1274:    }
        -: 1275:
        -: 1276:    //other players discard hand and redraw if hand size > 4
    #####: 1277:    for (int i = 0; i < state->numPlayers; i++)
        -: 1278:    {
    #####: 1279:      if (i != currentPlayer)
        -: 1280:      {
    #####: 1281:        if ( state->handCount[i] > 4 )
        -: 1282:        {
        -: 1283:          //discard hand
    #####: 1284:          while( state->handCount[i] > 0 )
        -: 1285:          {
    #####: 1286:            discardCard(handPos, i, state, 0);
        -: 1287:          }
        -: 1288:
        -: 1289:          //draw 4
    #####: 1290:          for (int j = 0; j < 4; j++)
        -: 1291:          {
    #####: 1292:            drawCard(i, state);
    #####: 1293:          }
    #####: 1294:        }
    #####: 1295:      }
    #####: 1296:    }
        -: 1297:
    #####: 1298:  }
    #####: 1299:}
        -: 1300:
        -: 1301:void feastAction(struct gameState *state, int temphand[], int currentPlayer, int choice1, int choice2, int choice3){
        -: 1302:  //gain card with cost up to 5
        -: 1303:  //Backup hand
    #####: 1304:  for (int i = 0; i < state->handCount[currentPlayer]; i++){ // BUG: removed = from >=
    #####: 1305:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1306:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1307:  }
        -: 1308:  //Backup hand
        -: 1309:
        -: 1310:  //Update Coins for Buy
    #####: 1311:  updateCoins(currentPlayer, state, 5);
    #####: 1312:  int x = 1;//Condition to loop on
    #####: 1313:  while( x == 1) {//Buy one card
    #####: 1314:    if (supplyCount(choice1, state) <= 0){
        -: 1315:      if (DEBUG)
        -: 1316:      printf("None of that card left, sorry!\n");
        -: 1317:
        -: 1318:      if (DEBUG){
        -: 1319:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1320:      }
    #####: 1321:    }
    #####: 1322:    else if (state->coins < getCost(choice1)){
    #####: 1323:      printf("That card is too expensive!\n");
        -: 1324:
        -: 1325:      if (DEBUG){
        -: 1326:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1327:      }
    #####: 1328:    }
        -: 1329:    else{
        -: 1330:
        -: 1331:      if (DEBUG){
        -: 1332:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1333:      }
        -: 1334:
    #####: 1335:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1336:      x = 0;//No more buying cards
        -: 1337:
        -: 1338:      if (DEBUG){
        -: 1339:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1340:      }
        -: 1341:
        -: 1342:    }
        -: 1343:  }
        -: 1344:
        -: 1345:  //Reset Hand
    #####: 1346:  for (int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1347:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1348:    temphand[i] = -1;
    #####: 1349:  }
        -: 1350:  //Reset Hand
    #####: 1351:}
        -: 1352:
        -: 1353://end of dominion.c
cardtest2.c:
Testing the adventurer card:
Testing for player 0
	Testing adventurer with two treasures at top of deck:
		Checking to see if two cards were added to the hand:
			Expected: 7, result: 8			***Assert failed, total fails***: 1

		Checking to see if the last two cards added were copper:
			Checking index 5 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 6 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that no cards were discarded, since coppers were at top:
			Expected: 0 results: 0
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 2

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing adventurer with two treasures at the middle of deck:
		Checking to see if two cards were added to the hand:
			Expected: 10, result: 11			***Assert failed, total fails***: 3

		Checking to see if the last two cards added were copper:
			Checking index 8 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 9 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that three estate cards were discarded:
			Expected: 3 results: 3
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 4

	Testing adventurer with an empty deck.
		Checking to see if two cards were added to the hand:
			Expected: 13, result: 14
			***Assert failed, total fails***: 5

		Checking to see if the last two cards added were copper:
			Checking index 11 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 12 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 6

	Testing adventurer with 1 copper in deck and the rest in discard pile
		Checking to see if two cards were added to the hand:
			Expected: 16, result: 17			***Assert failed, total fails***: 7

		Checking to see if the last two cards added were copper:
			Checking index 14 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 15 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 8

Testing for player 1
	Testing adventurer with two treasures at top of deck:
		Checking to see if two cards were added to the hand:
			Expected: 7, result: 8			***Assert failed, total fails***: 9

		Checking to see if the last two cards added were copper:
			Checking index 5 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 6 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that no cards were discarded, since coppers were at top:
			Expected: 0 results: 0
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 10

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 0's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing adventurer with two treasures at the middle of deck:
		Checking to see if two cards were added to the hand:
			Expected: 10, result: 11			***Assert failed, total fails***: 11

		Checking to see if the last two cards added were copper:
			Checking index 8 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 9 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that three estate cards were discarded:
			Expected: 3 results: 3
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 12

	Testing adventurer with an empty deck.
		Checking to see if two cards were added to the hand:
			Expected: 13, result: 14
			***Assert failed, total fails***: 13

		Checking to see if the last two cards added were copper:
			Checking index 11 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 12 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 14

	Testing adventurer with 1 copper in deck and the rest in discard pile
		Checking to see if two cards were added to the hand:
			Expected: 16, result: 17			***Assert failed, total fails***: 15

		Checking to see if the last two cards added were copper:
			Checking index 14 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 15 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 16

Testing for player 2
	Testing adventurer with two treasures at top of deck:
		Checking to see if two cards were added to the hand:
			Expected: 7, result: 8			***Assert failed, total fails***: 17

		Checking to see if the last two cards added were copper:
			Checking index 5 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 6 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that no cards were discarded, since coppers were at top:
			Expected: 0 results: 0
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 18

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 0's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing adventurer with two treasures at the middle of deck:
		Checking to see if two cards were added to the hand:
			Expected: 10, result: 11			***Assert failed, total fails***: 19

		Checking to see if the last two cards added were copper:
			Checking index 8 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 9 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that three estate cards were discarded:
			Expected: 3 results: 3
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 20

	Testing adventurer with an empty deck.
		Checking to see if two cards were added to the hand:
			Expected: 13, result: 14
			***Assert failed, total fails***: 21

		Checking to see if the last two cards added were copper:
			Checking index 11 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 12 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 22

	Testing adventurer with 1 copper in deck and the rest in discard pile
		Checking to see if two cards were added to the hand:
			Expected: 16, result: 17			***Assert failed, total fails***: 23

		Checking to see if the last two cards added were copper:
			Checking index 14 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 15 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 24

Testing for player 3
	Testing adventurer with two treasures at top of deck:
		Checking to see if two cards were added to the hand:
			Expected: 7, result: 8			***Assert failed, total fails***: 25

		Checking to see if the last two cards added were copper:
			Checking index 5 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 6 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that no cards were discarded, since coppers were at top:
			Expected: 0 results: 0
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 26

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 0's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 2's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

	Testing adventurer with two treasures at the middle of deck:
		Checking to see if two cards were added to the hand:
			Expected: 10, result: 11			***Assert failed, total fails***: 27

		Checking to see if the last two cards added were copper:
			Checking index 8 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 9 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that three estate cards were discarded:
			Expected: 3 results: 3
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 3
			***Assert failed, total fails***: 28

	Testing adventurer with an empty deck.
		Checking to see if two cards were added to the hand:
			Expected: 13, result: 14
			***Assert failed, total fails***: 29

		Checking to see if the last two cards added were copper:
			Checking index 11 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 12 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 1
			***Assert failed, total fails***: 30

	Testing adventurer with 1 copper in deck and the rest in discard pile
		Checking to see if two cards were added to the hand:
			Expected: 16, result: 17			***Assert failed, total fails***: 31

		Checking to see if the last two cards added were copper:
			Checking index 14 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 15 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 3
			***Assert failed, total fails***: 32

FINAL RESULT: 32 FAILURES
File 'cardtest2.c'
Lines executed:96.27% of 134
cardtest2.c:creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:33.59% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      696:    9:  if (*(int*)a > *(int*)b)
        4:   10:  return 1;
      692:   11:  if (*(int*)a < *(int*)b)
      232:   12:  return -1;
      460:   13:  return 0;
      696:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       11:   44:  SelectStream(1);
       11:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       22:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
       11:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      242:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     2420:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
     2090:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
     1100:   65:    }
      110:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       11:   73:  if (numPlayers == 2)
        -:   74:  {
        1:   75:    state->supplyCount[curse] = 10;
        1:   76:  }
       10:   77:  else if (numPlayers == 3)
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
    #####:   80:  }
        -:   81:  else
        -:   82:  {
       10:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
       11:   87:  if (numPlayers == 2)
        -:   88:  {
        1:   89:    state->supplyCount[estate] = 8;
        1:   90:    state->supplyCount[duchy] = 8;
        1:   91:    state->supplyCount[province] = 8;
        1:   92:  }
        -:   93:  else
        -:   94:  {
       10:   95:    state->supplyCount[estate] = 12;
       10:   96:    state->supplyCount[duchy] = 12;
       10:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
       11:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  102:  state->supplyCount[silver] = 40;
       11:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      462:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     3630:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    {
     1705:  110:      if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      209:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
       22:  115:          if (numPlayers == 2){
        2:  116:            state->supplyCount[i] = 8;
        2:  117:          }
       20:  118:          else{ state->supplyCount[i] = 12; }
       22:  119:        }
        -:  120:        else
        -:  121:        {
       88:  122:          state->supplyCount[i] = 10;
        -:  123:        }
      110:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     1595:  128:        state->supplyCount[i] = -1;
        -:  129:      }
     1595:  130:    }
        -:  131:
      220:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      106:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:  {
       42:  140:    state->deckCount[i] = 0;
      336:  141:    for (j = 0; j < 3; j++)
        -:  142:    {
      126:  143:      state->deck[i][j] = estate;
      126:  144:      state->deckCount[i]++;
      126:  145:    }
      672:  146:    for (j = 3; j < 10; j++)
        -:  147:    {
      294:  148:      state->deck[i][j] = copper;
      294:  149:      state->deckCount[i]++;
      294:  150:    }
       42:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
      106:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:  {
       42:  156:    if ( shuffle(i, state) < 0 )
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
       42:  160:  }
        -:  161:
        -:  162:  //draw player hands
      106:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:  {
        -:  165:    //initialize hand size to zero
       42:  166:    state->handCount[i] = 0;
       42:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
       42:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      616:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:  {
      297:  178:    state->embargoTokens[i] = 0;
      297:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
       11:  182:  state->outpostPlayed = 0;
       11:  183:  state->phase = 0;
       11:  184:  state->numActions = 1;
       11:  185:  state->numBuys = 1;
       11:  186:  state->playedCardCount = 0;
       11:  187:  state->whoseTurn = 0;
       11:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      132:  192:  for (it = 0; it < 5; it++){
       55:  193:    drawCard(state->whoseTurn, state);
       55:  194:  }
        -:  195:
       11:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       11:  198:  return 0;
       11:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       60:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       60:  209:  if (state->deckCount[player] < 1)
        8:  210:    return -1;
       52:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1128:  214:  while (state->deckCount[player] > 0) {
      512:  215:    card = floor(Random() * state->deckCount[player]);
      512:  216:    newDeck[newDeckPos] = state->deck[player][card];
      512:  217:    newDeckPos++;
     3550:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1263:  219:      state->deck[player][i] = state->deck[player][i+1];
     1263:  220:    }
      512:  221:    state->deckCount[player]--;
        -:  222:  }
     1128:  223:  for (i = 0; i < newDeckPos; i++) {
      512:  224:    state->deck[player][i] = newDeck[i];
      512:  225:    state->deckCount[player]++;
      512:  226:  }
        -:  227:
       52:  228:  return 0;
       60:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:    printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:    printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       74:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
    #####:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
    #####:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
    #####:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       33:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        8:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
      216:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      100:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      100:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      100:  359:  }
        8:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        8:  363:  if (currentPlayer < (state->numPlayers - 1)){
        6:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        6:  365:  }
        -:  366:  else{
        2:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        8:  370:  state->outpostPlayed = 0;
        8:  371:  state->phase = 0;
        8:  372:  state->numActions = 1;
        8:  373:  state->coins = 0;
        8:  374:  state->numBuys = 1;
        8:  375:  state->playedCardCount = 0;
        8:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       96:  380:  for (k = 0; k < 5; k++){
       40:  381:    drawCard(state->whoseTurn, state);//Draw a card
       40:  382:  }
        -:  383:
        -:  384:  //Update money
        8:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        8:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:  {
    #####:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:  {
    #####:  404:    if (state->supplyCount[i] == 0)
        -:  405:    {
    #####:  406:      j++;
    #####:  407:    }
    #####:  408:  }
    #####:  409:  if ( j >= 3)
        -:  410:  {
    #####:  411:    return 1;
        -:  412:  }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:      players[i] = -9999;
    #####:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
    #####:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
        -:  482:    {
    #####:  483:      j = i;
    #####:  484:    }
    #####:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
        -:  493:    {
    #####:  494:      players[i]++;
    #####:  495:    }
    #####:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
        -:  503:    {
    #####:  504:      j = i;
    #####:  505:    }
    #####:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
        -:  513:    {
    #####:  514:      players[i] = 1;
    #####:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
    #####:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      188:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      204:  533:    for (i = 0; i < state->discardCount[player];i++){
       92:  534:      state->deck[player][i] = state->discard[player][i];
       92:  535:      state->discard[player][i] = -1;
       92:  536:    }
        -:  537:
       10:  538:    state->deckCount[player] = state->discardCount[player];
       10:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       10:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       10:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       10:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       10:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       10:  559:    if (deckCounter == 0)
    #####:  560:    return -1;
        -:  561:
       10:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       10:  563:    state->deckCount[player]--;
       10:  564:    state->handCount[player]++;//Increment hand count
       10:  565:  }
        -:  566:
        -:  567:  else{
      178:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      178:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      178:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      178:  576:    state->deckCount[player]--;
      178:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      188:  580:  return 0;
      188:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:  {
        -:  587:    case curse:
    #####:  588:    return 0;
        -:  589:    case estate:
    #####:  590:    return 2;
        -:  591:    case duchy:
    #####:  592:    return 5;
        -:  593:    case province:
    #####:  594:    return 8;
        -:  595:    case copper:
    #####:  596:    return 0;
        -:  597:    case silver:
    #####:  598:    return 3;
        -:  599:    case gold:
    #####:  600:    return 6;
        -:  601:    case adventurer:
    #####:  602:    return 6;
        -:  603:    case council_room:
    #####:  604:    return 5;
        -:  605:    case feast:
    #####:  606:    return 4;
        -:  607:    case gardens:
    #####:  608:    return 4;
        -:  609:    case mine:
    #####:  610:    return 5;
        -:  611:    case remodel:
    #####:  612:    return 4;
        -:  613:    case smithy:
    #####:  614:    return 4;
        -:  615:    case village:
    #####:  616:    return 3;
        -:  617:    case baron:
    #####:  618:    return 4;
        -:  619:    case great_hall:
    #####:  620:    return 3;
        -:  621:    case minion:
    #####:  622:    return 5;
        -:  623:    case steward:
    #####:  624:    return 3;
        -:  625:    case tribute:
    #####:  626:    return 5;
        -:  627:    case ambassador:
    #####:  628:    return 3;
        -:  629:    case cutpurse:
    #####:  630:    return 4;
        -:  631:    case embargo:
    #####:  632:    return 2;
        -:  633:    case outpost:
    #####:  634:    return 5;
        -:  635:    case salvager:
    #####:  636:    return 4;
        -:  637:    case sea_hag:
    #####:  638:    return 4;
        -:  639:    case treasure_map:
    #####:  640:    return 4;
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
       20:  652:  int currentPlayer = whoseTurn(state);
       20:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
       20:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
        -:  658:
       20:  659:  if (nextPlayer > (state->numPlayers - 1)){
        5:  660:    nextPlayer = 0;
        5:  661:  }
        -:  662:
        -:  663:
        -:  664:  //uses switch to select card and perform actions
       20:  665:  switch( card )
        -:  666:  {
        -:  667:    case adventurer:
       16:  668:      adventurerAction(state, currentPlayer, temphand);
       16:  669:      return 0;
        -:  670:
        -:  671:    case council_room:
        -:  672:    //+4 Cards
    #####:  673:    for (i = 0; i < 4; i++)
        -:  674:    {
    #####:  675:      drawCard(currentPlayer, state);
    #####:  676:    }
        -:  677:
        -:  678:    //+1 Buy
    #####:  679:    state->numBuys++;
        -:  680:
        -:  681:    //Each other player draws a card
    #####:  682:    for (i = 0; i < state->numPlayers; i++)
        -:  683:    {
    #####:  684:      if ( i != currentPlayer )
        -:  685:      {
    #####:  686:        drawCard(i, state);
    #####:  687:      }
    #####:  688:    }
        -:  689:
        -:  690:    //put played card in played card pile
    #####:  691:    discardCard(handPos, currentPlayer, state, 0);
        -:  692:
    #####:  693:    return 0;
        -:  694:
        -:  695:    case feast:
    #####:  696:      feastAction(state, temphand, currentPlayer, choice1, choice2, choice3);
    #####:  697:      return 0;
        -:  698:
        -:  699:    case gardens:
    #####:  700:    return -1;
        -:  701:
        -:  702:    case mine:
    #####:  703:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  704:    //printf("***This is the card we will trash: %d\n", j);
    #####:  705:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  706:    {
        -:  707:      // printf("***choice1 is not valid\n");
    #####:  708:      return -1;
        -:  709:    }
        -:  710:
    #####:  711:    if (choice2 > treasure_map || choice2 < curse)
        -:  712:    {
        -:  713:      //printf("***choice2 is not valid\n");
    #####:  714:      return -1;
        -:  715:    }
        -:  716:
    #####:  717:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  718:    {
        -:  719:      //printf("***cost difference is not valid %d AND %d\n", getCost(state->hand[currentPlayer][choice1]) + 3, getCost(choice2));
    #####:  720:      return -1;
        -:  721:    }
        -:  722:    //printf("*** The card I am trying to gain: %d\n", choice2);
    #####:  723:    gainCard(choice2, state, 2, currentPlayer);
        -:  724:    //printf("*** What i am discarding: %d\n", handPos);
        -:  725:    //discard card from hand
    #####:  726:    discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:    //discard trashed card
    #####:  729:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  730:    {
    #####:  731:      if (state->hand[currentPlayer][i] == j)
        -:  732:      {
        -:  733:        //printf("***Tryna discard this trashed card: %d\n", j);
    #####:  734:        discardCard(i, currentPlayer, state, 0);
    #####:  735:        break;
        -:  736:      }
    #####:  737:    }
        -:  738:
    #####:  739:    return 0;
        -:  740:
        -:  741:    case remodel:
    #####:  742:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  743:
    #####:  744:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  745:    {
    #####:  746:      return -1;
        -:  747:    }
        -:  748:
    #####:  749:    gainCard(choice2, state, 0, currentPlayer);
        -:  750:
        -:  751:    //discard card from hand
    #####:  752:    discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:    //discard trashed card
    #####:  755:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:    {
    #####:  757:      if (state->hand[currentPlayer][i] == j)
        -:  758:      {
    #####:  759:        discardCard(i, currentPlayer, state, 0);
    #####:  760:        break;
        -:  761:      }
    #####:  762:    }
        -:  763:
        -:  764:
    #####:  765:    return 0;
        -:  766:
        -:  767:    case smithy:
        4:  768:    smithyAction(state, handPos, currentPlayer);
        4:  769:    return 0;
        -:  770:
        -:  771:    case village:
        -:  772:    //+1 Card
    #####:  773:    drawCard(currentPlayer, state);
        -:  774:
        -:  775:    //+2 Actions
    #####:  776:    state->numActions = state->numActions + 2;
        -:  777:
        -:  778:    //discard played card from hand
    #####:  779:    discardCard(handPos, currentPlayer, state, 0);
    #####:  780:    return 0;
        -:  781:
        -:  782:    case baron:
    #####:  783:    state->numBuys++;//Increase buys by 1!
    #####:  784:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  785:      int p = 0;//Iterator for hand!
    #####:  786:      int card_not_discarded = 1;//Flag for discard set!
    #####:  787:      while(card_not_discarded){
    #####:  788:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  789:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  790:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  791:          state->discardCount[currentPlayer]++;
    #####:  792:          for (;p < state->handCount[currentPlayer]; p++){
    #####:  793:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  794:          }
    #####:  795:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  796:          state->handCount[currentPlayer]--;
    #####:  797:          card_not_discarded = 0;//Exit the loop
    #####:  798:        }
    #####:  799:        else if (p > state->handCount[currentPlayer]){
        -:  800:          if(DEBUG) {
        -:  801:            printf("No estate cards in your hand, invalid choice\n");
        -:  802:            printf("Must gain an estate if there are any\n");
        -:  803:          }
    #####:  804:          if (supplyCount(estate, state) > 0){
    #####:  805:            gainCard(estate, state, 0, currentPlayer);
    #####:  806:            state->supplyCount[estate]--;//Decrement estates
    #####:  807:            if (supplyCount(estate, state) == 0){
    #####:  808:              isGameOver(state);
    #####:  809:            }
    #####:  810:          }
    #####:  811:          card_not_discarded = 0;//Exit the loop
    #####:  812:        }
        -:  813:
        -:  814:        else{
    #####:  815:          p++;//Next card
        -:  816:        }
        -:  817:      }
    #####:  818:    }
        -:  819:
        -:  820:    else{
    #####:  821:      if (supplyCount(estate, state) > 0){
    #####:  822:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:        state->supplyCount[estate]--;//Decrement Estates
    #####:  824:        if (supplyCount(estate, state) == 0){
    #####:  825:          isGameOver(state);
    #####:  826:        }
    #####:  827:      }
        -:  828:    }
        -:  829:
        -:  830:
    #####:  831:    return 0;
        -:  832:
        -:  833:    case great_hall:
        -:  834:    //+1 Card
    #####:  835:    drawCard(currentPlayer, state);
        -:  836:
        -:  837:    //+1 Actions
    #####:  838:    state->numActions++;
        -:  839:
        -:  840:    //discard card from hand
    #####:  841:    discardCard(handPos, currentPlayer, state, 0);
    #####:  842:    return 0;
        -:  843:
        -:  844:    case minion:
    #####:  845:      minionAction(state, handPos, currentPlayer, choice1, choice2, choice3);
    #####:  846:      return 0;
        -:  847:
        -:  848:    case steward:
    #####:  849:      stewardAction(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####:  850:      return 0;
        -:  851:
        -:  852:    case tribute:
    #####:  853:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  854:      if (state->deckCount[nextPlayer] > 0){
    #####:  855:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  856:        state->deckCount[nextPlayer]--;
    #####:  857:      }
    #####:  858:      else if (state->discardCount[nextPlayer] > 0){
    #####:  859:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  860:        state->discardCount[nextPlayer]--;
    #####:  861:      }
        -:  862:      else{
        -:  863:        //No Card to Reveal
        -:  864:        if (DEBUG){
        -:  865:          printf("No cards to reveal\n");
        -:  866:        }
        -:  867:      }
    #####:  868:    }
        -:  869:
        -:  870:    else{
    #####:  871:      if (state->deckCount[nextPlayer] == 0){
    #####:  872:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  873:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  874:          state->deckCount[nextPlayer]++;
    #####:  875:          state->discard[nextPlayer][i] = -1;
    #####:  876:          state->discardCount[nextPlayer]--;
    #####:  877:        }
        -:  878:
    #####:  879:        shuffle(nextPlayer,state);//Shuffle the deck
    #####:  880:      }
    #####:  881:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  882:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  883:      state->deckCount[nextPlayer]--;
    #####:  884:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  886:      state->deckCount[nextPlayer]--;
        -:  887:    }
        -:  888:
    #####:  889:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  890:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  891:      state->playedCardCount++;
    #####:  892:      tributeRevealedCards[1] = -1;
    #####:  893:    }
        -:  894:
    #####:  895:    for (i = 0; i <= 2; i ++){
    #####:  896:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  897:        state->coins += 2;
    #####:  898:      }
        -:  899:
    #####:  900:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  901:        drawCard(currentPlayer, state);
    #####:  902:        drawCard(currentPlayer, state);
    #####:  903:      }
        -:  904:      else{//Action Card
    #####:  905:        state->numActions = state->numActions + 2;
        -:  906:      }
    #####:  907:    }
        -:  908:
    #####:  909:    return 0;
        -:  910:
        -:  911:    case ambassador:
    #####:  912:    j = 0;		//used to check if player has enough cards to discard
        -:  913:
    #####:  914:    if (choice2 > 2 || choice2 < 0)
        -:  915:    {
    #####:  916:      return -1;
        -:  917:    }
        -:  918:
    #####:  919:    if (choice1 == handPos)
        -:  920:    {
    #####:  921:      return -1;
        -:  922:    }
        -:  923:
    #####:  924:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  925:    {
    #####:  926:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  927:      {
    #####:  928:        j++;
    #####:  929:      }
    #####:  930:    }
    #####:  931:    if (j < choice2)
        -:  932:    {
    #####:  933:      return -1;
        -:  934:    }
        -:  935:
        -:  936:    if (DEBUG)
        -:  937:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  938:
        -:  939:    //increase supply count for choosen card by amount being discarded
    #####:  940:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  941:
        -:  942:    //each other player gains a copy of revealed card
    #####:  943:    for (i = 0; i < state->numPlayers; i++)
        -:  944:    {
    #####:  945:      if (i != currentPlayer)
        -:  946:      {
    #####:  947:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  948:      }
    #####:  949:    }
        -:  950:
        -:  951:    //discard played card from hand
    #####:  952:    discardCard(handPos, currentPlayer, state, 0);
        -:  953:
        -:  954:    //trash copies of cards returned to supply
    #####:  955:    for (j = 0; j < choice2; j++)
        -:  956:    {
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:      {
    #####:  959:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  960:        {
    #####:  961:          discardCard(i, currentPlayer, state, 1);
    #####:  962:          break;
        -:  963:        }
    #####:  964:      }
    #####:  965:    }
        -:  966:
    #####:  967:    return 0;
        -:  968:
        -:  969:    case cutpurse:
        -:  970:
    #####:  971:    updateCoins(currentPlayer, state, 2);
    #####:  972:    for (i = 0; i < state->numPlayers; i++)
        -:  973:    {
    #####:  974:      if (i != currentPlayer)
        -:  975:      {
    #####:  976:        for (j = 0; j < state->handCount[i]; j++)
        -:  977:        {
    #####:  978:          if (state->hand[i][j] == copper)
        -:  979:          {
    #####:  980:            discardCard(j, i, state, 0);
    #####:  981:            break;
        -:  982:          }
    #####:  983:          if (j == state->handCount[i])
        -:  984:          {
    #####:  985:            for (k = 0; k < state->handCount[i]; k++)
        -:  986:            {
        -:  987:              if (DEBUG)
        -:  988:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  989:            }
    #####:  990:            break;
        -:  991:          }
    #####:  992:        }
        -:  993:
    #####:  994:      }
        -:  995:
    #####:  996:    }
        -:  997:
        -:  998:    //discard played card from hand
    #####:  999:    discardCard(handPos, currentPlayer, state, 0);
        -: 1000:
    #####: 1001:    return 0;
        -: 1002:
        -: 1003:
        -: 1004:    case embargo:
        -: 1005:    //+2 Coins
    #####: 1006:    state->coins = state->coins + 2;
        -: 1007:
        -: 1008:    //see if selected pile is in play
    #####: 1009:    if ( state->supplyCount[choice1] == -1 )
        -: 1010:    {
    #####: 1011:      return -1;
        -: 1012:    }
        -: 1013:
        -: 1014:    //add embargo token to selected supply pile
    #####: 1015:    state->embargoTokens[choice1]++;
        -: 1016:
        -: 1017:    //trash card
    #####: 1018:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1019:    return 0;
        -: 1020:
        -: 1021:    case outpost:
        -: 1022:    //set outpost flag
    #####: 1023:    state->outpostPlayed++;
        -: 1024:
        -: 1025:    //discard card
    #####: 1026:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:    return 0;
        -: 1028:
        -: 1029:    case salvager:
        -: 1030:    //+1 buy
    #####: 1031:    state->numBuys++;
        -: 1032:
    #####: 1033:    if (choice1)
        -: 1034:    {
        -: 1035:      //gain coins equal to trashed card
    #####: 1036:      state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1037:      //trash card
    #####: 1038:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1039:    }
        -: 1040:
        -: 1041:    //discard card
    #####: 1042:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:    return 0;
        -: 1044:
        -: 1045:    case sea_hag:
    #####: 1046:    for (i = 0; i < state->numPlayers; i++){
    #####: 1047:      if (i != currentPlayer){
    #####: 1048:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1049:        state->discardCount[i]++;
    #####: 1050:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1051:      }
    #####: 1052:    }
    #####: 1053:    return 0;
        -: 1054:
        -: 1055:    case treasure_map:
        -: 1056:    //search hand for another treasure_map
    #####: 1057:    index = -1;
    #####: 1058:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1059:    {
    #####: 1060:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1061:      {
    #####: 1062:        index = i;
    #####: 1063:        break;
        -: 1064:      }
    #####: 1065:    }
    #####: 1066:    if (index > -1)
        -: 1067:    {
        -: 1068:      //trash both treasure cards
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1070:      discardCard(index, currentPlayer, state, 1);
        -: 1071:
        -: 1072:      //gain 4 Gold cards
    #####: 1073:      for (i = 0; i < 4; i++)
        -: 1074:      {
    #####: 1075:        gainCard(gold, state, 1, currentPlayer);
    #####: 1076:      }
        -: 1077:
        -: 1078:      //return success
    #####: 1079:      return 1;
        -: 1080:    }
        -: 1081:
        -: 1082:    //no second treasure_map found in hand
    #####: 1083:    return -1;
        -: 1084:  }
        -: 1085:
    #####: 1086:  return -1;
       20: 1087:}
        -: 1088:
        -: 1089:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1090:{
        -: 1091:
        -: 1092:  //if card is not trashed, added to Played pile
       44: 1093:  if (trashFlag < 1)
        -: 1094:  {
        -: 1095:    //add card to played pile
       24: 1096:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       24: 1097:    state->playedCardCount++;
       24: 1098:  }
        -: 1099:
        -: 1100:  //set played card to -1
       44: 1101:  state->hand[currentPlayer][handPos] = -1;
        -: 1102:
        -: 1103:  //remove card from player's hand
       44: 1104:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1105:  {
        -: 1106:    //reduce number of cards in hand
       12: 1107:    state->handCount[currentPlayer]--;
       12: 1108:  }
       32: 1109:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1110:  {
        -: 1111:    //reduce number of cards in hand
    #####: 1112:    state->handCount[currentPlayer]--;
    #####: 1113:  }
        -: 1114:  else
        -: 1115:  {
        -: 1116:    //replace discarded card with last card in hand
       32: 1117:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1118:    //set last card to -1
       32: 1119:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1120:    //reduce number of cards in hand
       32: 1121:    state->handCount[currentPlayer]--;
        -: 1122:  }
        -: 1123:
       44: 1124:  return 0;
        -: 1125:}
        -: 1126:
        -: 1127:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1128:{
        -: 1129:  //Note: supplyPos is enum of choosen card
        -: 1130:
        -: 1131:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1132:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1133:  {
        8: 1134:    return -1;
        -: 1135:  }
        -: 1136:
        -: 1137:  //added card for [whoseTurn] current player:
        -: 1138:  // toFlag = 0 : add to discard
        -: 1139:  // toFlag = 1 : add to deck
        -: 1140:  // toFlag = 2 : add to hand
        -: 1141:
       12: 1142:  if (toFlag == 1)
        -: 1143:  {
        4: 1144:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1145:    state->deckCount[player]++;
        4: 1146:  }
        8: 1147:  else if (toFlag == 2)
        -: 1148:  {
        4: 1149:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1150:    state->handCount[player]++;
        4: 1151:  }
        -: 1152:  else
        -: 1153:  {
        4: 1154:    state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1155:    state->discardCount[player]++;
        -: 1156:  }
        -: 1157:
        -: 1158:  //decrease number in supply pile
       12: 1159:  state->supplyCount[supplyPos]--;
        -: 1160:
       12: 1161:  return 0;
       20: 1162:}
        -: 1163:
        -: 1164:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1165:{
        -: 1166:  int i;
        -: 1167:
        -: 1168:  //reset coin count
       19: 1169:  state->coins = 0;
        -: 1170:
        -: 1171:  //add coins for each Treasure card in player's hand
      228: 1172:  for (i = 0; i < state->handCount[player]; i++)
        -: 1173:  {
       95: 1174:    if (state->hand[player][i] == copper)
        -: 1175:    {
       72: 1176:      state->coins += 1;
       72: 1177:    }
       23: 1178:    else if (state->hand[player][i] == silver)
        -: 1179:    {
    #####: 1180:      state->coins += 2;
    #####: 1181:    }
       23: 1182:    else if (state->hand[player][i] == gold)
        -: 1183:    {
    #####: 1184:      state->coins += 3;
    #####: 1185:    }
       95: 1186:  }
        -: 1187:
        -: 1188:  //add bonus
       19: 1189:  state->coins += bonus;
        -: 1190:
       19: 1191:  return 0;
        -: 1192:}
        -: 1193:
        -: 1194:void smithyAction(struct gameState *state, int handPos, int currentPlayer){
        -: 1195:  //+3 Cards
       40: 1196:  for (int i = 0; i <= 3; i++) { // BUG: added = to <
       16: 1197:    drawCard(currentPlayer, state);
       16: 1198:  }
        -: 1199:  //discard card from hand
        4: 1200:  discardCard(handPos, currentPlayer, state, 0);
        4: 1201:}
        -: 1202:
        -: 1203:void adventurerAction(struct gameState *state, int currentPlayer, int temphand[]){
        -: 1204:  int cardDrawn;
       16: 1205:  int drawnTreasure = 0;
       16: 1206:  int z = 0;// this is the counter for the temp hand
      186: 1207:  while(drawnTreasure <= 2){ // BUG: added = to <
       77: 1208:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        8: 1209:      shuffle(currentPlayer, state);
        8: 1210:    }
       77: 1211:    drawCard(currentPlayer, state);
       77: 1212:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      135: 1213:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       48: 1214:    drawnTreasure++;
        -: 1215:    else{
       29: 1216:      temphand[z]=cardDrawn;
       29: 1217:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       29: 1218:      z++;
        -: 1219:    }
        -: 1220:  }
       90: 1221:  while(z-1>=0){
       29: 1222:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       29: 1223:    z=z-1;
        -: 1224:  }
       16: 1225:}
        -: 1226:
        -: 1227:void stewardAction(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3) {
    #####: 1228:  if (choice1 == 1)
        -: 1229:  {
        -: 1230:    //+2 cards
    #####: 1231:    drawCard(currentPlayer, state);
    #####: 1232:    drawCard(currentPlayer, state);
    #####: 1233:  }
    #####: 1234:  else if (choice1 == 2)
        -: 1235:  {
        -: 1236:    //+2 coins
    #####: 1237:    state->coins = /*state->coins*/ + 2; //BUG: removed state->coins
    #####: 1238:  }
        -: 1239:  else
        -: 1240:  {
        -: 1241:    //trash 2 cards in hand
    #####: 1242:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1243:    discardCard(choice3, currentPlayer, state, 1);
        -: 1244:  }
        -: 1245:
        -: 1246:  //discard card from hand
    #####: 1247:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:}
        -: 1249:
        -: 1250:void minionAction(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2, int choice3) {
        -: 1251:  //+1 action
    #####: 1252:  state->numActions++;
        -: 1253:
        -: 1254:  //discard card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
        -: 1256:
    #####: 1257:  if (choice1)		//+2 coins
        -: 1258:  {
    #####: 1259:    state->coins = state->coins + 2;
    #####: 1260:  }
        -: 1261:
    #####: 1262:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1263:  {
        -: 1264:    //discard hand
    #####: 1265:    while(numHandCards(state) > 0)
        -: 1266:    {
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);
        -: 1268:    }
        -: 1269:
        -: 1270:    //draw 4
    #####: 1271:    for (int i = 0; i < 4; i++)
        -: 1272:    {
    #####: 1273:      drawCard(currentPlayer, state);
    #####: 1274:    }
        -: 1275:
        -: 1276:    //other players discard hand and redraw if hand size > 4
    #####: 1277:    for (int i = 0; i < state->numPlayers; i++)
        -: 1278:    {
    #####: 1279:      if (i != currentPlayer)
        -: 1280:      {
    #####: 1281:        if ( state->handCount[i] > 4 )
        -: 1282:        {
        -: 1283:          //discard hand
    #####: 1284:          while( state->handCount[i] > 0 )
        -: 1285:          {
    #####: 1286:            discardCard(handPos, i, state, 0);
        -: 1287:          }
        -: 1288:
        -: 1289:          //draw 4
    #####: 1290:          for (int j = 0; j < 4; j++)
        -: 1291:          {
    #####: 1292:            drawCard(i, state);
    #####: 1293:          }
    #####: 1294:        }
    #####: 1295:      }
    #####: 1296:    }
        -: 1297:
    #####: 1298:  }
    #####: 1299:}
        -: 1300:
        -: 1301:void feastAction(struct gameState *state, int temphand[], int currentPlayer, int choice1, int choice2, int choice3){
        -: 1302:  //gain card with cost up to 5
        -: 1303:  //Backup hand
    #####: 1304:  for (int i = 0; i < state->handCount[currentPlayer]; i++){ // BUG: removed = from >=
    #####: 1305:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1306:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1307:  }
        -: 1308:  //Backup hand
        -: 1309:
        -: 1310:  //Update Coins for Buy
    #####: 1311:  updateCoins(currentPlayer, state, 5);
    #####: 1312:  int x = 1;//Condition to loop on
    #####: 1313:  while( x == 1) {//Buy one card
    #####: 1314:    if (supplyCount(choice1, state) <= 0){
        -: 1315:      if (DEBUG)
        -: 1316:      printf("None of that card left, sorry!\n");
        -: 1317:
        -: 1318:      if (DEBUG){
        -: 1319:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1320:      }
    #####: 1321:    }
    #####: 1322:    else if (state->coins < getCost(choice1)){
    #####: 1323:      printf("That card is too expensive!\n");
        -: 1324:
        -: 1325:      if (DEBUG){
        -: 1326:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1327:      }
    #####: 1328:    }
        -: 1329:    else{
        -: 1330:
        -: 1331:      if (DEBUG){
        -: 1332:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1333:      }
        -: 1334:
    #####: 1335:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1336:      x = 0;//No more buying cards
        -: 1337:
        -: 1338:      if (DEBUG){
        -: 1339:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1340:      }
        -: 1341:
        -: 1342:    }
        -: 1343:  }
        -: 1344:
        -: 1345:  //Reset Hand
    #####: 1346:  for (int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1347:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1348:    temphand[i] = -1;
    #####: 1349:  }
        -: 1350:  //Reset Hand
    #####: 1351:}
        -: 1352:
        -: 1353://end of dominion.c
cardtest3.c:
Testing the village card:
	Checking with a regular deck:
		Checking that a card was drawn and added to the hand:
			Expected: 5 result: 5:
			***Assert Passed***

		Checking that two actions were added:
			Expected: 3, result: 3
			***Assert Passed***

		Checking that village was put in the played pile:
			Expected: 14, result: 14
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:

	Checking with an empty deck:
		Checking that a card was drawn and added to the hand:
			Expected: 5 result: 5:
			***Assert Passed***

		Checking that two actions were added:
			Expected: 5, result: 5
			***Assert Passed***

		Checking that village was put in the played pile:
			Expected: 14, result: 14
			***Assert Passed***

FINAL RESULT: All tests passed
File 'cardtest3.c'
Lines executed:89.41% of 85
cardtest3.c:creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:34.21% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      764:    9:  if (*(int*)a > *(int*)b)
        4:   10:  return 1;
      760:   11:  if (*(int*)a < *(int*)b)
      252:   12:  return -1;
      508:   13:  return 0;
      764:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       12:   44:  SelectStream(1);
       12:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       24:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
       12:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      264:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     2640:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
     2280:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
     1200:   65:    }
      120:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       12:   73:  if (numPlayers == 2)
        -:   74:  {
        1:   75:    state->supplyCount[curse] = 10;
        1:   76:  }
       11:   77:  else if (numPlayers == 3)
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
    #####:   80:  }
        -:   81:  else
        -:   82:  {
       11:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
       12:   87:  if (numPlayers == 2)
        -:   88:  {
        1:   89:    state->supplyCount[estate] = 8;
        1:   90:    state->supplyCount[duchy] = 8;
        1:   91:    state->supplyCount[province] = 8;
        1:   92:  }
        -:   93:  else
        -:   94:  {
       11:   95:    state->supplyCount[estate] = 12;
       11:   96:    state->supplyCount[duchy] = 12;
       11:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
       12:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  102:  state->supplyCount[silver] = 40;
       12:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      504:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     3960:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    {
     1860:  110:      if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      228:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
       24:  115:          if (numPlayers == 2){
        2:  116:            state->supplyCount[i] = 8;
        2:  117:          }
       22:  118:          else{ state->supplyCount[i] = 12; }
       24:  119:        }
        -:  120:        else
        -:  121:        {
       96:  122:          state->supplyCount[i] = 10;
        -:  123:        }
      120:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     1740:  128:        state->supplyCount[i] = -1;
        -:  129:      }
     1740:  130:    }
        -:  131:
      240:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      116:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:  {
       46:  140:    state->deckCount[i] = 0;
      368:  141:    for (j = 0; j < 3; j++)
        -:  142:    {
      138:  143:      state->deck[i][j] = estate;
      138:  144:      state->deckCount[i]++;
      138:  145:    }
      736:  146:    for (j = 3; j < 10; j++)
        -:  147:    {
      322:  148:      state->deck[i][j] = copper;
      322:  149:      state->deckCount[i]++;
      322:  150:    }
       46:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
      116:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:  {
       46:  156:    if ( shuffle(i, state) < 0 )
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
       46:  160:  }
        -:  161:
        -:  162:  //draw player hands
      116:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:  {
        -:  165:    //initialize hand size to zero
       46:  166:    state->handCount[i] = 0;
       46:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
       46:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      672:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:  {
      324:  178:    state->embargoTokens[i] = 0;
      324:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
       12:  182:  state->outpostPlayed = 0;
       12:  183:  state->phase = 0;
       12:  184:  state->numActions = 1;
       12:  185:  state->numBuys = 1;
       12:  186:  state->playedCardCount = 0;
       12:  187:  state->whoseTurn = 0;
       12:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      144:  192:  for (it = 0; it < 5; it++){
       60:  193:    drawCard(state->whoseTurn, state);
       60:  194:  }
        -:  195:
       12:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       12:  198:  return 0;
       12:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       65:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       65:  209:  if (state->deckCount[player] < 1)
        8:  210:    return -1;
       57:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1238:  214:  while (state->deckCount[player] > 0) {
      562:  215:    card = floor(Random() * state->deckCount[player]);
      562:  216:    newDeck[newDeckPos] = state->deck[player][card];
      562:  217:    newDeckPos++;
     3884:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1380:  219:      state->deck[player][i] = state->deck[player][i+1];
     1380:  220:    }
      562:  221:    state->deckCount[player]--;
        -:  222:  }
     1238:  223:  for (i = 0; i < newDeckPos; i++) {
      562:  224:    state->deck[player][i] = newDeck[i];
      562:  225:    state->deckCount[player]++;
      562:  226:  }
        -:  227:
       57:  228:  return 0;
       65:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:    printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:    printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       74:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
    #####:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
    #####:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
    #####:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       35:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        8:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
      216:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      100:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      100:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      100:  359:  }
        8:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        8:  363:  if (currentPlayer < (state->numPlayers - 1)){
        6:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        6:  365:  }
        -:  366:  else{
        2:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        8:  370:  state->outpostPlayed = 0;
        8:  371:  state->phase = 0;
        8:  372:  state->numActions = 1;
        8:  373:  state->coins = 0;
        8:  374:  state->numBuys = 1;
        8:  375:  state->playedCardCount = 0;
        8:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       96:  380:  for (k = 0; k < 5; k++){
       40:  381:    drawCard(state->whoseTurn, state);//Draw a card
       40:  382:  }
        -:  383:
        -:  384:  //Update money
        8:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        8:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:  {
    #####:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:  {
    #####:  404:    if (state->supplyCount[i] == 0)
        -:  405:    {
    #####:  406:      j++;
    #####:  407:    }
    #####:  408:  }
    #####:  409:  if ( j >= 3)
        -:  410:  {
    #####:  411:    return 1;
        -:  412:  }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:      players[i] = -9999;
    #####:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
    #####:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
        -:  482:    {
    #####:  483:      j = i;
    #####:  484:    }
    #####:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
        -:  493:    {
    #####:  494:      players[i]++;
    #####:  495:    }
    #####:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
        -:  503:    {
    #####:  504:      j = i;
    #####:  505:    }
    #####:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
        -:  513:    {
    #####:  514:      players[i] = 1;
    #####:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
    #####:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      195:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      226:  533:    for (i = 0; i < state->discardCount[player];i++){
      102:  534:      state->deck[player][i] = state->discard[player][i];
      102:  535:      state->discard[player][i] = -1;
      102:  536:    }
        -:  537:
       11:  538:    state->deckCount[player] = state->discardCount[player];
       11:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       11:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       11:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       11:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       11:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       11:  559:    if (deckCounter == 0)
    #####:  560:    return -1;
        -:  561:
       11:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       11:  563:    state->deckCount[player]--;
       11:  564:    state->handCount[player]++;//Increment hand count
       11:  565:  }
        -:  566:
        -:  567:  else{
      184:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      184:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      184:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      184:  576:    state->deckCount[player]--;
      184:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      195:  580:  return 0;
      195:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:  {
        -:  587:    case curse:
    #####:  588:    return 0;
        -:  589:    case estate:
    #####:  590:    return 2;
        -:  591:    case duchy:
    #####:  592:    return 5;
        -:  593:    case province:
    #####:  594:    return 8;
        -:  595:    case copper:
    #####:  596:    return 0;
        -:  597:    case silver:
    #####:  598:    return 3;
        -:  599:    case gold:
    #####:  600:    return 6;
        -:  601:    case adventurer:
    #####:  602:    return 6;
        -:  603:    case council_room:
    #####:  604:    return 5;
        -:  605:    case feast:
    #####:  606:    return 4;
        -:  607:    case gardens:
    #####:  608:    return 4;
        -:  609:    case mine:
    #####:  610:    return 5;
        -:  611:    case remodel:
    #####:  612:    return 4;
        -:  613:    case smithy:
    #####:  614:    return 4;
        -:  615:    case village:
    #####:  616:    return 3;
        -:  617:    case baron:
    #####:  618:    return 4;
        -:  619:    case great_hall:
    #####:  620:    return 3;
        -:  621:    case minion:
    #####:  622:    return 5;
        -:  623:    case steward:
    #####:  624:    return 3;
        -:  625:    case tribute:
    #####:  626:    return 5;
        -:  627:    case ambassador:
    #####:  628:    return 3;
        -:  629:    case cutpurse:
    #####:  630:    return 4;
        -:  631:    case embargo:
    #####:  632:    return 2;
        -:  633:    case outpost:
    #####:  634:    return 5;
        -:  635:    case salvager:
    #####:  636:    return 4;
        -:  637:    case sea_hag:
    #####:  638:    return 4;
        -:  639:    case treasure_map:
    #####:  640:    return 4;
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
       22:  652:  int currentPlayer = whoseTurn(state);
       22:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
       22:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
        -:  658:
       22:  659:  if (nextPlayer > (state->numPlayers - 1)){
        5:  660:    nextPlayer = 0;
        5:  661:  }
        -:  662:
        -:  663:
        -:  664:  //uses switch to select card and perform actions
       22:  665:  switch( card )
        -:  666:  {
        -:  667:    case adventurer:
       16:  668:      adventurerAction(state, currentPlayer, temphand);
       16:  669:      return 0;
        -:  670:
        -:  671:    case council_room:
        -:  672:    //+4 Cards
    #####:  673:    for (i = 0; i < 4; i++)
        -:  674:    {
    #####:  675:      drawCard(currentPlayer, state);
    #####:  676:    }
        -:  677:
        -:  678:    //+1 Buy
    #####:  679:    state->numBuys++;
        -:  680:
        -:  681:    //Each other player draws a card
    #####:  682:    for (i = 0; i < state->numPlayers; i++)
        -:  683:    {
    #####:  684:      if ( i != currentPlayer )
        -:  685:      {
    #####:  686:        drawCard(i, state);
    #####:  687:      }
    #####:  688:    }
        -:  689:
        -:  690:    //put played card in played card pile
    #####:  691:    discardCard(handPos, currentPlayer, state, 0);
        -:  692:
    #####:  693:    return 0;
        -:  694:
        -:  695:    case feast:
    #####:  696:      feastAction(state, temphand, currentPlayer, choice1, choice2, choice3);
    #####:  697:      return 0;
        -:  698:
        -:  699:    case gardens:
    #####:  700:    return -1;
        -:  701:
        -:  702:    case mine:
    #####:  703:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  704:    //printf("***This is the card we will trash: %d\n", j);
    #####:  705:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  706:    {
        -:  707:      // printf("***choice1 is not valid\n");
    #####:  708:      return -1;
        -:  709:    }
        -:  710:
    #####:  711:    if (choice2 > treasure_map || choice2 < curse)
        -:  712:    {
        -:  713:      //printf("***choice2 is not valid\n");
    #####:  714:      return -1;
        -:  715:    }
        -:  716:
    #####:  717:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  718:    {
        -:  719:      //printf("***cost difference is not valid %d AND %d\n", getCost(state->hand[currentPlayer][choice1]) + 3, getCost(choice2));
    #####:  720:      return -1;
        -:  721:    }
        -:  722:    //printf("*** The card I am trying to gain: %d\n", choice2);
    #####:  723:    gainCard(choice2, state, 2, currentPlayer);
        -:  724:    //printf("*** What i am discarding: %d\n", handPos);
        -:  725:    //discard card from hand
    #####:  726:    discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:    //discard trashed card
    #####:  729:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  730:    {
    #####:  731:      if (state->hand[currentPlayer][i] == j)
        -:  732:      {
        -:  733:        //printf("***Tryna discard this trashed card: %d\n", j);
    #####:  734:        discardCard(i, currentPlayer, state, 0);
    #####:  735:        break;
        -:  736:      }
    #####:  737:    }
        -:  738:
    #####:  739:    return 0;
        -:  740:
        -:  741:    case remodel:
    #####:  742:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  743:
    #####:  744:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  745:    {
    #####:  746:      return -1;
        -:  747:    }
        -:  748:
    #####:  749:    gainCard(choice2, state, 0, currentPlayer);
        -:  750:
        -:  751:    //discard card from hand
    #####:  752:    discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:    //discard trashed card
    #####:  755:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:    {
    #####:  757:      if (state->hand[currentPlayer][i] == j)
        -:  758:      {
    #####:  759:        discardCard(i, currentPlayer, state, 0);
    #####:  760:        break;
        -:  761:      }
    #####:  762:    }
        -:  763:
        -:  764:
    #####:  765:    return 0;
        -:  766:
        -:  767:    case smithy:
        4:  768:    smithyAction(state, handPos, currentPlayer);
        4:  769:    return 0;
        -:  770:
        -:  771:    case village:
        -:  772:    //+1 Card
        2:  773:    drawCard(currentPlayer, state);
        -:  774:
        -:  775:    //+2 Actions
        2:  776:    state->numActions = state->numActions + 2;
        -:  777:
        -:  778:    //discard played card from hand
        2:  779:    discardCard(handPos, currentPlayer, state, 0);
        2:  780:    return 0;
        -:  781:
        -:  782:    case baron:
    #####:  783:    state->numBuys++;//Increase buys by 1!
    #####:  784:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  785:      int p = 0;//Iterator for hand!
    #####:  786:      int card_not_discarded = 1;//Flag for discard set!
    #####:  787:      while(card_not_discarded){
    #####:  788:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  789:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  790:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  791:          state->discardCount[currentPlayer]++;
    #####:  792:          for (;p < state->handCount[currentPlayer]; p++){
    #####:  793:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  794:          }
    #####:  795:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  796:          state->handCount[currentPlayer]--;
    #####:  797:          card_not_discarded = 0;//Exit the loop
    #####:  798:        }
    #####:  799:        else if (p > state->handCount[currentPlayer]){
        -:  800:          if(DEBUG) {
        -:  801:            printf("No estate cards in your hand, invalid choice\n");
        -:  802:            printf("Must gain an estate if there are any\n");
        -:  803:          }
    #####:  804:          if (supplyCount(estate, state) > 0){
    #####:  805:            gainCard(estate, state, 0, currentPlayer);
    #####:  806:            state->supplyCount[estate]--;//Decrement estates
    #####:  807:            if (supplyCount(estate, state) == 0){
    #####:  808:              isGameOver(state);
    #####:  809:            }
    #####:  810:          }
    #####:  811:          card_not_discarded = 0;//Exit the loop
    #####:  812:        }
        -:  813:
        -:  814:        else{
    #####:  815:          p++;//Next card
        -:  816:        }
        -:  817:      }
    #####:  818:    }
        -:  819:
        -:  820:    else{
    #####:  821:      if (supplyCount(estate, state) > 0){
    #####:  822:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:        state->supplyCount[estate]--;//Decrement Estates
    #####:  824:        if (supplyCount(estate, state) == 0){
    #####:  825:          isGameOver(state);
    #####:  826:        }
    #####:  827:      }
        -:  828:    }
        -:  829:
        -:  830:
    #####:  831:    return 0;
        -:  832:
        -:  833:    case great_hall:
        -:  834:    //+1 Card
    #####:  835:    drawCard(currentPlayer, state);
        -:  836:
        -:  837:    //+1 Actions
    #####:  838:    state->numActions++;
        -:  839:
        -:  840:    //discard card from hand
    #####:  841:    discardCard(handPos, currentPlayer, state, 0);
    #####:  842:    return 0;
        -:  843:
        -:  844:    case minion:
    #####:  845:      minionAction(state, handPos, currentPlayer, choice1, choice2, choice3);
    #####:  846:      return 0;
        -:  847:
        -:  848:    case steward:
    #####:  849:      stewardAction(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####:  850:      return 0;
        -:  851:
        -:  852:    case tribute:
    #####:  853:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  854:      if (state->deckCount[nextPlayer] > 0){
    #####:  855:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  856:        state->deckCount[nextPlayer]--;
    #####:  857:      }
    #####:  858:      else if (state->discardCount[nextPlayer] > 0){
    #####:  859:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  860:        state->discardCount[nextPlayer]--;
    #####:  861:      }
        -:  862:      else{
        -:  863:        //No Card to Reveal
        -:  864:        if (DEBUG){
        -:  865:          printf("No cards to reveal\n");
        -:  866:        }
        -:  867:      }
    #####:  868:    }
        -:  869:
        -:  870:    else{
    #####:  871:      if (state->deckCount[nextPlayer] == 0){
    #####:  872:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  873:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  874:          state->deckCount[nextPlayer]++;
    #####:  875:          state->discard[nextPlayer][i] = -1;
    #####:  876:          state->discardCount[nextPlayer]--;
    #####:  877:        }
        -:  878:
    #####:  879:        shuffle(nextPlayer,state);//Shuffle the deck
    #####:  880:      }
    #####:  881:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  882:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  883:      state->deckCount[nextPlayer]--;
    #####:  884:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  886:      state->deckCount[nextPlayer]--;
        -:  887:    }
        -:  888:
    #####:  889:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  890:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  891:      state->playedCardCount++;
    #####:  892:      tributeRevealedCards[1] = -1;
    #####:  893:    }
        -:  894:
    #####:  895:    for (i = 0; i <= 2; i ++){
    #####:  896:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  897:        state->coins += 2;
    #####:  898:      }
        -:  899:
    #####:  900:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  901:        drawCard(currentPlayer, state);
    #####:  902:        drawCard(currentPlayer, state);
    #####:  903:      }
        -:  904:      else{//Action Card
    #####:  905:        state->numActions = state->numActions + 2;
        -:  906:      }
    #####:  907:    }
        -:  908:
    #####:  909:    return 0;
        -:  910:
        -:  911:    case ambassador:
    #####:  912:    j = 0;		//used to check if player has enough cards to discard
        -:  913:
    #####:  914:    if (choice2 > 2 || choice2 < 0)
        -:  915:    {
    #####:  916:      return -1;
        -:  917:    }
        -:  918:
    #####:  919:    if (choice1 == handPos)
        -:  920:    {
    #####:  921:      return -1;
        -:  922:    }
        -:  923:
    #####:  924:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  925:    {
    #####:  926:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  927:      {
    #####:  928:        j++;
    #####:  929:      }
    #####:  930:    }
    #####:  931:    if (j < choice2)
        -:  932:    {
    #####:  933:      return -1;
        -:  934:    }
        -:  935:
        -:  936:    if (DEBUG)
        -:  937:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  938:
        -:  939:    //increase supply count for choosen card by amount being discarded
    #####:  940:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  941:
        -:  942:    //each other player gains a copy of revealed card
    #####:  943:    for (i = 0; i < state->numPlayers; i++)
        -:  944:    {
    #####:  945:      if (i != currentPlayer)
        -:  946:      {
    #####:  947:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  948:      }
    #####:  949:    }
        -:  950:
        -:  951:    //discard played card from hand
    #####:  952:    discardCard(handPos, currentPlayer, state, 0);
        -:  953:
        -:  954:    //trash copies of cards returned to supply
    #####:  955:    for (j = 0; j < choice2; j++)
        -:  956:    {
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:      {
    #####:  959:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  960:        {
    #####:  961:          discardCard(i, currentPlayer, state, 1);
    #####:  962:          break;
        -:  963:        }
    #####:  964:      }
    #####:  965:    }
        -:  966:
    #####:  967:    return 0;
        -:  968:
        -:  969:    case cutpurse:
        -:  970:
    #####:  971:    updateCoins(currentPlayer, state, 2);
    #####:  972:    for (i = 0; i < state->numPlayers; i++)
        -:  973:    {
    #####:  974:      if (i != currentPlayer)
        -:  975:      {
    #####:  976:        for (j = 0; j < state->handCount[i]; j++)
        -:  977:        {
    #####:  978:          if (state->hand[i][j] == copper)
        -:  979:          {
    #####:  980:            discardCard(j, i, state, 0);
    #####:  981:            break;
        -:  982:          }
    #####:  983:          if (j == state->handCount[i])
        -:  984:          {
    #####:  985:            for (k = 0; k < state->handCount[i]; k++)
        -:  986:            {
        -:  987:              if (DEBUG)
        -:  988:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  989:            }
    #####:  990:            break;
        -:  991:          }
    #####:  992:        }
        -:  993:
    #####:  994:      }
        -:  995:
    #####:  996:    }
        -:  997:
        -:  998:    //discard played card from hand
    #####:  999:    discardCard(handPos, currentPlayer, state, 0);
        -: 1000:
    #####: 1001:    return 0;
        -: 1002:
        -: 1003:
        -: 1004:    case embargo:
        -: 1005:    //+2 Coins
    #####: 1006:    state->coins = state->coins + 2;
        -: 1007:
        -: 1008:    //see if selected pile is in play
    #####: 1009:    if ( state->supplyCount[choice1] == -1 )
        -: 1010:    {
    #####: 1011:      return -1;
        -: 1012:    }
        -: 1013:
        -: 1014:    //add embargo token to selected supply pile
    #####: 1015:    state->embargoTokens[choice1]++;
        -: 1016:
        -: 1017:    //trash card
    #####: 1018:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1019:    return 0;
        -: 1020:
        -: 1021:    case outpost:
        -: 1022:    //set outpost flag
    #####: 1023:    state->outpostPlayed++;
        -: 1024:
        -: 1025:    //discard card
    #####: 1026:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:    return 0;
        -: 1028:
        -: 1029:    case salvager:
        -: 1030:    //+1 buy
    #####: 1031:    state->numBuys++;
        -: 1032:
    #####: 1033:    if (choice1)
        -: 1034:    {
        -: 1035:      //gain coins equal to trashed card
    #####: 1036:      state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1037:      //trash card
    #####: 1038:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1039:    }
        -: 1040:
        -: 1041:    //discard card
    #####: 1042:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:    return 0;
        -: 1044:
        -: 1045:    case sea_hag:
    #####: 1046:    for (i = 0; i < state->numPlayers; i++){
    #####: 1047:      if (i != currentPlayer){
    #####: 1048:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1049:        state->discardCount[i]++;
    #####: 1050:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1051:      }
    #####: 1052:    }
    #####: 1053:    return 0;
        -: 1054:
        -: 1055:    case treasure_map:
        -: 1056:    //search hand for another treasure_map
    #####: 1057:    index = -1;
    #####: 1058:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1059:    {
    #####: 1060:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1061:      {
    #####: 1062:        index = i;
    #####: 1063:        break;
        -: 1064:      }
    #####: 1065:    }
    #####: 1066:    if (index > -1)
        -: 1067:    {
        -: 1068:      //trash both treasure cards
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1070:      discardCard(index, currentPlayer, state, 1);
        -: 1071:
        -: 1072:      //gain 4 Gold cards
    #####: 1073:      for (i = 0; i < 4; i++)
        -: 1074:      {
    #####: 1075:        gainCard(gold, state, 1, currentPlayer);
    #####: 1076:      }
        -: 1077:
        -: 1078:      //return success
    #####: 1079:      return 1;
        -: 1080:    }
        -: 1081:
        -: 1082:    //no second treasure_map found in hand
    #####: 1083:    return -1;
        -: 1084:  }
        -: 1085:
    #####: 1086:  return -1;
       22: 1087:}
        -: 1088:
        -: 1089:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1090:{
        -: 1091:
        -: 1092:  //if card is not trashed, added to Played pile
       46: 1093:  if (trashFlag < 1)
        -: 1094:  {
        -: 1095:    //add card to played pile
       26: 1096:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       26: 1097:    state->playedCardCount++;
       26: 1098:  }
        -: 1099:
        -: 1100:  //set played card to -1
       46: 1101:  state->hand[currentPlayer][handPos] = -1;
        -: 1102:
        -: 1103:  //remove card from player's hand
       46: 1104:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1105:  {
        -: 1106:    //reduce number of cards in hand
       12: 1107:    state->handCount[currentPlayer]--;
       12: 1108:  }
       34: 1109:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1110:  {
        -: 1111:    //reduce number of cards in hand
    #####: 1112:    state->handCount[currentPlayer]--;
    #####: 1113:  }
        -: 1114:  else
        -: 1115:  {
        -: 1116:    //replace discarded card with last card in hand
       34: 1117:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1118:    //set last card to -1
       34: 1119:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1120:    //reduce number of cards in hand
       34: 1121:    state->handCount[currentPlayer]--;
        -: 1122:  }
        -: 1123:
       46: 1124:  return 0;
        -: 1125:}
        -: 1126:
        -: 1127:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1128:{
        -: 1129:  //Note: supplyPos is enum of choosen card
        -: 1130:
        -: 1131:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1132:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1133:  {
        8: 1134:    return -1;
        -: 1135:  }
        -: 1136:
        -: 1137:  //added card for [whoseTurn] current player:
        -: 1138:  // toFlag = 0 : add to discard
        -: 1139:  // toFlag = 1 : add to deck
        -: 1140:  // toFlag = 2 : add to hand
        -: 1141:
       12: 1142:  if (toFlag == 1)
        -: 1143:  {
        4: 1144:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1145:    state->deckCount[player]++;
        4: 1146:  }
        8: 1147:  else if (toFlag == 2)
        -: 1148:  {
        4: 1149:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1150:    state->handCount[player]++;
        4: 1151:  }
        -: 1152:  else
        -: 1153:  {
        4: 1154:    state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1155:    state->discardCount[player]++;
        -: 1156:  }
        -: 1157:
        -: 1158:  //decrease number in supply pile
       12: 1159:  state->supplyCount[supplyPos]--;
        -: 1160:
       12: 1161:  return 0;
       20: 1162:}
        -: 1163:
        -: 1164:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1165:{
        -: 1166:  int i;
        -: 1167:
        -: 1168:  //reset coin count
       20: 1169:  state->coins = 0;
        -: 1170:
        -: 1171:  //add coins for each Treasure card in player's hand
      240: 1172:  for (i = 0; i < state->handCount[player]; i++)
        -: 1173:  {
      100: 1174:    if (state->hand[player][i] == copper)
        -: 1175:    {
       76: 1176:      state->coins += 1;
       76: 1177:    }
       24: 1178:    else if (state->hand[player][i] == silver)
        -: 1179:    {
    #####: 1180:      state->coins += 2;
    #####: 1181:    }
       24: 1182:    else if (state->hand[player][i] == gold)
        -: 1183:    {
    #####: 1184:      state->coins += 3;
    #####: 1185:    }
      100: 1186:  }
        -: 1187:
        -: 1188:  //add bonus
       20: 1189:  state->coins += bonus;
        -: 1190:
       20: 1191:  return 0;
        -: 1192:}
        -: 1193:
        -: 1194:void smithyAction(struct gameState *state, int handPos, int currentPlayer){
        -: 1195:  //+3 Cards
       40: 1196:  for (int i = 0; i <= 3; i++) { // BUG: added = to <
       16: 1197:    drawCard(currentPlayer, state);
       16: 1198:  }
        -: 1199:  //discard card from hand
        4: 1200:  discardCard(handPos, currentPlayer, state, 0);
        4: 1201:}
        -: 1202:
        -: 1203:void adventurerAction(struct gameState *state, int currentPlayer, int temphand[]){
        -: 1204:  int cardDrawn;
       16: 1205:  int drawnTreasure = 0;
       16: 1206:  int z = 0;// this is the counter for the temp hand
      186: 1207:  while(drawnTreasure <= 2){ // BUG: added = to <
       77: 1208:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        8: 1209:      shuffle(currentPlayer, state);
        8: 1210:    }
       77: 1211:    drawCard(currentPlayer, state);
       77: 1212:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      135: 1213:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       48: 1214:    drawnTreasure++;
        -: 1215:    else{
       29: 1216:      temphand[z]=cardDrawn;
       29: 1217:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       29: 1218:      z++;
        -: 1219:    }
        -: 1220:  }
       90: 1221:  while(z-1>=0){
       29: 1222:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       29: 1223:    z=z-1;
        -: 1224:  }
       16: 1225:}
        -: 1226:
        -: 1227:void stewardAction(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3) {
    #####: 1228:  if (choice1 == 1)
        -: 1229:  {
        -: 1230:    //+2 cards
    #####: 1231:    drawCard(currentPlayer, state);
    #####: 1232:    drawCard(currentPlayer, state);
    #####: 1233:  }
    #####: 1234:  else if (choice1 == 2)
        -: 1235:  {
        -: 1236:    //+2 coins
    #####: 1237:    state->coins = /*state->coins*/ + 2; //BUG: removed state->coins
    #####: 1238:  }
        -: 1239:  else
        -: 1240:  {
        -: 1241:    //trash 2 cards in hand
    #####: 1242:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1243:    discardCard(choice3, currentPlayer, state, 1);
        -: 1244:  }
        -: 1245:
        -: 1246:  //discard card from hand
    #####: 1247:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:}
        -: 1249:
        -: 1250:void minionAction(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2, int choice3) {
        -: 1251:  //+1 action
    #####: 1252:  state->numActions++;
        -: 1253:
        -: 1254:  //discard card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
        -: 1256:
    #####: 1257:  if (choice1)		//+2 coins
        -: 1258:  {
    #####: 1259:    state->coins = state->coins + 2;
    #####: 1260:  }
        -: 1261:
    #####: 1262:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1263:  {
        -: 1264:    //discard hand
    #####: 1265:    while(numHandCards(state) > 0)
        -: 1266:    {
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);
        -: 1268:    }
        -: 1269:
        -: 1270:    //draw 4
    #####: 1271:    for (int i = 0; i < 4; i++)
        -: 1272:    {
    #####: 1273:      drawCard(currentPlayer, state);
    #####: 1274:    }
        -: 1275:
        -: 1276:    //other players discard hand and redraw if hand size > 4
    #####: 1277:    for (int i = 0; i < state->numPlayers; i++)
        -: 1278:    {
    #####: 1279:      if (i != currentPlayer)
        -: 1280:      {
    #####: 1281:        if ( state->handCount[i] > 4 )
        -: 1282:        {
        -: 1283:          //discard hand
    #####: 1284:          while( state->handCount[i] > 0 )
        -: 1285:          {
    #####: 1286:            discardCard(handPos, i, state, 0);
        -: 1287:          }
        -: 1288:
        -: 1289:          //draw 4
    #####: 1290:          for (int j = 0; j < 4; j++)
        -: 1291:          {
    #####: 1292:            drawCard(i, state);
    #####: 1293:          }
    #####: 1294:        }
    #####: 1295:      }
    #####: 1296:    }
        -: 1297:
    #####: 1298:  }
    #####: 1299:}
        -: 1300:
        -: 1301:void feastAction(struct gameState *state, int temphand[], int currentPlayer, int choice1, int choice2, int choice3){
        -: 1302:  //gain card with cost up to 5
        -: 1303:  //Backup hand
    #####: 1304:  for (int i = 0; i < state->handCount[currentPlayer]; i++){ // BUG: removed = from >=
    #####: 1305:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1306:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1307:  }
        -: 1308:  //Backup hand
        -: 1309:
        -: 1310:  //Update Coins for Buy
    #####: 1311:  updateCoins(currentPlayer, state, 5);
    #####: 1312:  int x = 1;//Condition to loop on
    #####: 1313:  while( x == 1) {//Buy one card
    #####: 1314:    if (supplyCount(choice1, state) <= 0){
        -: 1315:      if (DEBUG)
        -: 1316:      printf("None of that card left, sorry!\n");
        -: 1317:
        -: 1318:      if (DEBUG){
        -: 1319:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1320:      }
    #####: 1321:    }
    #####: 1322:    else if (state->coins < getCost(choice1)){
    #####: 1323:      printf("That card is too expensive!\n");
        -: 1324:
        -: 1325:      if (DEBUG){
        -: 1326:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1327:      }
    #####: 1328:    }
        -: 1329:    else{
        -: 1330:
        -: 1331:      if (DEBUG){
        -: 1332:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1333:      }
        -: 1334:
    #####: 1335:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1336:      x = 0;//No more buying cards
        -: 1337:
        -: 1338:      if (DEBUG){
        -: 1339:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1340:      }
        -: 1341:
        -: 1342:    }
        -: 1343:  }
        -: 1344:
        -: 1345:  //Reset Hand
    #####: 1346:  for (int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1347:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1348:    temphand[i] = -1;
    #####: 1349:  }
        -: 1350:  //Reset Hand
    #####: 1351:}
        -: 1352:
        -: 1353://end of dominion.c
cardtest4.c:
Testing the mine card:
Testing Mine converting copper to copper:
	Testing that copper was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 1

	Testing that copper was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 2

	Testing that copper was removed from play:
		Checking the discard pile for copper --> Expected: 1 result :1
			***Assert Passed***

	Testing that the copper was added to the hand:
		Checking the hand for copper --> Expected: 1 Result: 1
			***Assert Passed***

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 3

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting copper to silver:
	Testing that copper was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 4
			***Assert Passed***

	Testing that copper was removed from the hand:
		Expected: 1 Result: 1
			***Assert Passed***

	Testing that copper was removed from play:
		Checking the discard pile for copper --> Expected: 1 result :1
			***Assert Passed***

	Testing that the silver was added to the hand:
		Checking the hand for silver --> Expected: 2 Result: 2
			***Assert Passed***

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 11
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting silver to copper:
	Testing that silver was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 4

	Testing that silver was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 5

	Testing that silver was removed from play:
		Checking the discard pile for silver --> Expected: 1 result :1
			***Assert Passed***

	Testing that the copper was added to the hand:
		Checking the hand for copper --> Expected: 2 Result: 1
			***Assert failed, total fails***: 6

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 7

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting silver to silver:
	Testing that silver was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 8

	Testing that silver was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 9

	Testing that silver was removed from play:
		Checking the discard pile for silver --> Expected: 1 result :1
			***Assert Passed***

	Testing that the silver was added to the hand:
		Checking the hand for silver --> Expected: 1 Result: 1
			***Assert Passed***

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 10

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting silver to gold:
	Testing that silver was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 4
			***Assert Passed***

	Testing that silver was removed from the hand:
		Expected: 1 Result: 1
			***Assert Passed***

	Testing that silver was removed from play:
		Checking the discard pile for silver --> Expected: 1 result :1
			***Assert Passed***

	Testing that the gold was added to the hand:
		Checking the hand for gold --> Expected: 2 Result: 2
			***Assert Passed***

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 11
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting gold to copper:
	Testing that gold was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 11

	Testing that gold was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 12

	Testing that gold was removed from play:
		Checking the discard pile for gold --> Expected: 1 result :1
			***Assert Passed***

	Testing that the copper was added to the hand:
		Checking the hand for copper --> Expected: 2 Result: 1
			***Assert failed, total fails***: 13

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 14

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting gold to silver:
	Testing that gold was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 15

	Testing that gold was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 16

	Testing that gold was removed from play:
		Checking the discard pile for gold --> Expected: 1 result :1
			***Assert Passed***

	Testing that the silver was added to the hand:
		Checking the hand for silver --> Expected: 2 Result: 1
			***Assert failed, total fails***: 17

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 18

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting gold to gold:
	Testing that gold was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 19

	Testing that gold was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 20

	Testing that gold was removed from play:
		Checking the discard pile for gold --> Expected: 1 result :1
			***Assert Passed***

	Testing that the gold was added to the hand:
		Checking the hand for gold --> Expected: 1 Result: 1
			***Assert Passed***

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 21

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
FINAL RESULT: 21 FAILURES
File 'cardtest4.c'
Lines executed:90.00% of 120
cardtest4.c:creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:36.98% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      820:    9:  if (*(int*)a > *(int*)b)
        4:   10:  return 1;
      816:   11:  if (*(int*)a < *(int*)b)
      272:   12:  return -1;
      544:   13:  return 0;
      820:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       13:   44:  SelectStream(1);
       13:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       26:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
       13:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      286:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     2860:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
     2470:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
     1300:   65:    }
      130:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       13:   73:  if (numPlayers == 2)
        -:   74:  {
        1:   75:    state->supplyCount[curse] = 10;
        1:   76:  }
       12:   77:  else if (numPlayers == 3)
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
    #####:   80:  }
        -:   81:  else
        -:   82:  {
       12:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
       13:   87:  if (numPlayers == 2)
        -:   88:  {
        1:   89:    state->supplyCount[estate] = 8;
        1:   90:    state->supplyCount[duchy] = 8;
        1:   91:    state->supplyCount[province] = 8;
        1:   92:  }
        -:   93:  else
        -:   94:  {
       12:   95:    state->supplyCount[estate] = 12;
       12:   96:    state->supplyCount[duchy] = 12;
       12:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
       13:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  102:  state->supplyCount[silver] = 40;
       13:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      546:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     4290:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    {
     2015:  110:      if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      247:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
       26:  115:          if (numPlayers == 2){
        2:  116:            state->supplyCount[i] = 8;
        2:  117:          }
       24:  118:          else{ state->supplyCount[i] = 12; }
       26:  119:        }
        -:  120:        else
        -:  121:        {
      104:  122:          state->supplyCount[i] = 10;
        -:  123:        }
      130:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     1885:  128:        state->supplyCount[i] = -1;
        -:  129:      }
     1885:  130:    }
        -:  131:
      260:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      126:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:  {
       50:  140:    state->deckCount[i] = 0;
      400:  141:    for (j = 0; j < 3; j++)
        -:  142:    {
      150:  143:      state->deck[i][j] = estate;
      150:  144:      state->deckCount[i]++;
      150:  145:    }
      800:  146:    for (j = 3; j < 10; j++)
        -:  147:    {
      350:  148:      state->deck[i][j] = copper;
      350:  149:      state->deckCount[i]++;
      350:  150:    }
       50:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
      126:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:  {
       50:  156:    if ( shuffle(i, state) < 0 )
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
       50:  160:  }
        -:  161:
        -:  162:  //draw player hands
      126:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:  {
        -:  165:    //initialize hand size to zero
       50:  166:    state->handCount[i] = 0;
       50:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
       50:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      728:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:  {
      351:  178:    state->embargoTokens[i] = 0;
      351:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
       13:  182:  state->outpostPlayed = 0;
       13:  183:  state->phase = 0;
       13:  184:  state->numActions = 1;
       13:  185:  state->numBuys = 1;
       13:  186:  state->playedCardCount = 0;
       13:  187:  state->whoseTurn = 0;
       13:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      156:  192:  for (it = 0; it < 5; it++){
       65:  193:    drawCard(state->whoseTurn, state);
       65:  194:  }
        -:  195:
       13:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       13:  198:  return 0;
       13:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       69:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       69:  209:  if (state->deckCount[player] < 1)
        8:  210:    return -1;
       61:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1326:  214:  while (state->deckCount[player] > 0) {
      602:  215:    card = floor(Random() * state->deckCount[player]);
      602:  216:    newDeck[newDeckPos] = state->deck[player][card];
      602:  217:    newDeckPos++;
     4162:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1479:  219:      state->deck[player][i] = state->deck[player][i+1];
     1479:  220:    }
      602:  221:    state->deckCount[player]--;
        -:  222:  }
     1326:  223:  for (i = 0; i < newDeckPos; i++) {
      602:  224:    state->deck[player][i] = newDeck[i];
      602:  225:    state->deckCount[player]++;
      602:  226:  }
        -:  227:
       61:  228:  return 0;
       69:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:    printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:    printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       76:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
    #####:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
    #####:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
    #####:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
       43:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        8:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
      216:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      100:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      100:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      100:  359:  }
        8:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        8:  363:  if (currentPlayer < (state->numPlayers - 1)){
        6:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        6:  365:  }
        -:  366:  else{
        2:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        8:  370:  state->outpostPlayed = 0;
        8:  371:  state->phase = 0;
        8:  372:  state->numActions = 1;
        8:  373:  state->coins = 0;
        8:  374:  state->numBuys = 1;
        8:  375:  state->playedCardCount = 0;
        8:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       96:  380:  for (k = 0; k < 5; k++){
       40:  381:    drawCard(state->whoseTurn, state);//Draw a card
       40:  382:  }
        -:  383:
        -:  384:  //Update money
        8:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        8:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:  {
    #####:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:  {
    #####:  404:    if (state->supplyCount[i] == 0)
        -:  405:    {
    #####:  406:      j++;
    #####:  407:    }
    #####:  408:  }
    #####:  409:  if ( j >= 3)
        -:  410:  {
    #####:  411:    return 1;
        -:  412:  }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:      players[i] = -9999;
    #####:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
    #####:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
        -:  482:    {
    #####:  483:      j = i;
    #####:  484:    }
    #####:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
        -:  493:    {
    #####:  494:      players[i]++;
    #####:  495:    }
    #####:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
        -:  503:    {
    #####:  504:      j = i;
    #####:  505:    }
    #####:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
        -:  513:    {
    #####:  514:      players[i] = 1;
    #####:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
    #####:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      200:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      226:  533:    for (i = 0; i < state->discardCount[player];i++){
      102:  534:      state->deck[player][i] = state->discard[player][i];
      102:  535:      state->discard[player][i] = -1;
      102:  536:    }
        -:  537:
       11:  538:    state->deckCount[player] = state->discardCount[player];
       11:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       11:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       11:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       11:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       11:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       11:  559:    if (deckCounter == 0)
    #####:  560:    return -1;
        -:  561:
       11:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       11:  563:    state->deckCount[player]--;
       11:  564:    state->handCount[player]++;//Increment hand count
       11:  565:  }
        -:  566:
        -:  567:  else{
      189:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      189:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      189:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      189:  576:    state->deckCount[player]--;
      189:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      200:  580:  return 0;
      200:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
       16:  585:  switch( cardNumber )
        -:  586:  {
        -:  587:    case curse:
    #####:  588:    return 0;
        -:  589:    case estate:
    #####:  590:    return 2;
        -:  591:    case duchy:
    #####:  592:    return 5;
        -:  593:    case province:
    #####:  594:    return 8;
        -:  595:    case copper:
        5:  596:    return 0;
        -:  597:    case silver:
        6:  598:    return 3;
        -:  599:    case gold:
        5:  600:    return 6;
        -:  601:    case adventurer:
    #####:  602:    return 6;
        -:  603:    case council_room:
    #####:  604:    return 5;
        -:  605:    case feast:
    #####:  606:    return 4;
        -:  607:    case gardens:
    #####:  608:    return 4;
        -:  609:    case mine:
    #####:  610:    return 5;
        -:  611:    case remodel:
    #####:  612:    return 4;
        -:  613:    case smithy:
    #####:  614:    return 4;
        -:  615:    case village:
    #####:  616:    return 3;
        -:  617:    case baron:
    #####:  618:    return 4;
        -:  619:    case great_hall:
    #####:  620:    return 3;
        -:  621:    case minion:
    #####:  622:    return 5;
        -:  623:    case steward:
    #####:  624:    return 3;
        -:  625:    case tribute:
    #####:  626:    return 5;
        -:  627:    case ambassador:
    #####:  628:    return 3;
        -:  629:    case cutpurse:
    #####:  630:    return 4;
        -:  631:    case embargo:
    #####:  632:    return 2;
        -:  633:    case outpost:
    #####:  634:    return 5;
        -:  635:    case salvager:
    #####:  636:    return 4;
        -:  637:    case sea_hag:
    #####:  638:    return 4;
        -:  639:    case treasure_map:
    #####:  640:    return 4;
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
       16:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
       30:  652:  int currentPlayer = whoseTurn(state);
       30:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
       30:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
        -:  658:
       30:  659:  if (nextPlayer > (state->numPlayers - 1)){
        5:  660:    nextPlayer = 0;
        5:  661:  }
        -:  662:
        -:  663:
        -:  664:  //uses switch to select card and perform actions
       30:  665:  switch( card )
        -:  666:  {
        -:  667:    case adventurer:
       16:  668:      adventurerAction(state, currentPlayer, temphand);
       16:  669:      return 0;
        -:  670:
        -:  671:    case council_room:
        -:  672:    //+4 Cards
    #####:  673:    for (i = 0; i < 4; i++)
        -:  674:    {
    #####:  675:      drawCard(currentPlayer, state);
    #####:  676:    }
        -:  677:
        -:  678:    //+1 Buy
    #####:  679:    state->numBuys++;
        -:  680:
        -:  681:    //Each other player draws a card
    #####:  682:    for (i = 0; i < state->numPlayers; i++)
        -:  683:    {
    #####:  684:      if ( i != currentPlayer )
        -:  685:      {
    #####:  686:        drawCard(i, state);
    #####:  687:      }
    #####:  688:    }
        -:  689:
        -:  690:    //put played card in played card pile
    #####:  691:    discardCard(handPos, currentPlayer, state, 0);
        -:  692:
    #####:  693:    return 0;
        -:  694:
        -:  695:    case feast:
    #####:  696:      feastAction(state, temphand, currentPlayer, choice1, choice2, choice3);
    #####:  697:      return 0;
        -:  698:
        -:  699:    case gardens:
    #####:  700:    return -1;
        -:  701:
        -:  702:    case mine:
        8:  703:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  704:    //printf("***This is the card we will trash: %d\n", j);
       16:  705:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  706:    {
        -:  707:      // printf("***choice1 is not valid\n");
    #####:  708:      return -1;
        -:  709:    }
        -:  710:
       16:  711:    if (choice2 > treasure_map || choice2 < curse)
        -:  712:    {
        -:  713:      //printf("***choice2 is not valid\n");
    #####:  714:      return -1;
        -:  715:    }
        -:  716:
        8:  717:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  718:    {
        -:  719:      //printf("***cost difference is not valid %d AND %d\n", getCost(state->hand[currentPlayer][choice1]) + 3, getCost(choice2));
        6:  720:      return -1;
        -:  721:    }
        -:  722:    //printf("*** The card I am trying to gain: %d\n", choice2);
        2:  723:    gainCard(choice2, state, 2, currentPlayer);
        -:  724:    //printf("*** What i am discarding: %d\n", handPos);
        -:  725:    //discard card from hand
        2:  726:    discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:    //discard trashed card
       10:  729:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  730:    {
        5:  731:      if (state->hand[currentPlayer][i] == j)
        -:  732:      {
        -:  733:        //printf("***Tryna discard this trashed card: %d\n", j);
        2:  734:        discardCard(i, currentPlayer, state, 0);
        2:  735:        break;
        -:  736:      }
        3:  737:    }
        -:  738:
        2:  739:    return 0;
        -:  740:
        -:  741:    case remodel:
    #####:  742:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  743:
    #####:  744:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  745:    {
    #####:  746:      return -1;
        -:  747:    }
        -:  748:
    #####:  749:    gainCard(choice2, state, 0, currentPlayer);
        -:  750:
        -:  751:    //discard card from hand
    #####:  752:    discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:    //discard trashed card
    #####:  755:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:    {
    #####:  757:      if (state->hand[currentPlayer][i] == j)
        -:  758:      {
    #####:  759:        discardCard(i, currentPlayer, state, 0);
    #####:  760:        break;
        -:  761:      }
    #####:  762:    }
        -:  763:
        -:  764:
    #####:  765:    return 0;
        -:  766:
        -:  767:    case smithy:
        4:  768:    smithyAction(state, handPos, currentPlayer);
        4:  769:    return 0;
        -:  770:
        -:  771:    case village:
        -:  772:    //+1 Card
        2:  773:    drawCard(currentPlayer, state);
        -:  774:
        -:  775:    //+2 Actions
        2:  776:    state->numActions = state->numActions + 2;
        -:  777:
        -:  778:    //discard played card from hand
        2:  779:    discardCard(handPos, currentPlayer, state, 0);
        2:  780:    return 0;
        -:  781:
        -:  782:    case baron:
    #####:  783:    state->numBuys++;//Increase buys by 1!
    #####:  784:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  785:      int p = 0;//Iterator for hand!
    #####:  786:      int card_not_discarded = 1;//Flag for discard set!
    #####:  787:      while(card_not_discarded){
    #####:  788:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  789:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  790:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  791:          state->discardCount[currentPlayer]++;
    #####:  792:          for (;p < state->handCount[currentPlayer]; p++){
    #####:  793:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  794:          }
    #####:  795:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  796:          state->handCount[currentPlayer]--;
    #####:  797:          card_not_discarded = 0;//Exit the loop
    #####:  798:        }
    #####:  799:        else if (p > state->handCount[currentPlayer]){
        -:  800:          if(DEBUG) {
        -:  801:            printf("No estate cards in your hand, invalid choice\n");
        -:  802:            printf("Must gain an estate if there are any\n");
        -:  803:          }
    #####:  804:          if (supplyCount(estate, state) > 0){
    #####:  805:            gainCard(estate, state, 0, currentPlayer);
    #####:  806:            state->supplyCount[estate]--;//Decrement estates
    #####:  807:            if (supplyCount(estate, state) == 0){
    #####:  808:              isGameOver(state);
    #####:  809:            }
    #####:  810:          }
    #####:  811:          card_not_discarded = 0;//Exit the loop
    #####:  812:        }
        -:  813:
        -:  814:        else{
    #####:  815:          p++;//Next card
        -:  816:        }
        -:  817:      }
    #####:  818:    }
        -:  819:
        -:  820:    else{
    #####:  821:      if (supplyCount(estate, state) > 0){
    #####:  822:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:        state->supplyCount[estate]--;//Decrement Estates
    #####:  824:        if (supplyCount(estate, state) == 0){
    #####:  825:          isGameOver(state);
    #####:  826:        }
    #####:  827:      }
        -:  828:    }
        -:  829:
        -:  830:
    #####:  831:    return 0;
        -:  832:
        -:  833:    case great_hall:
        -:  834:    //+1 Card
    #####:  835:    drawCard(currentPlayer, state);
        -:  836:
        -:  837:    //+1 Actions
    #####:  838:    state->numActions++;
        -:  839:
        -:  840:    //discard card from hand
    #####:  841:    discardCard(handPos, currentPlayer, state, 0);
    #####:  842:    return 0;
        -:  843:
        -:  844:    case minion:
    #####:  845:      minionAction(state, handPos, currentPlayer, choice1, choice2, choice3);
    #####:  846:      return 0;
        -:  847:
        -:  848:    case steward:
    #####:  849:      stewardAction(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####:  850:      return 0;
        -:  851:
        -:  852:    case tribute:
    #####:  853:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  854:      if (state->deckCount[nextPlayer] > 0){
    #####:  855:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  856:        state->deckCount[nextPlayer]--;
    #####:  857:      }
    #####:  858:      else if (state->discardCount[nextPlayer] > 0){
    #####:  859:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  860:        state->discardCount[nextPlayer]--;
    #####:  861:      }
        -:  862:      else{
        -:  863:        //No Card to Reveal
        -:  864:        if (DEBUG){
        -:  865:          printf("No cards to reveal\n");
        -:  866:        }
        -:  867:      }
    #####:  868:    }
        -:  869:
        -:  870:    else{
    #####:  871:      if (state->deckCount[nextPlayer] == 0){
    #####:  872:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  873:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  874:          state->deckCount[nextPlayer]++;
    #####:  875:          state->discard[nextPlayer][i] = -1;
    #####:  876:          state->discardCount[nextPlayer]--;
    #####:  877:        }
        -:  878:
    #####:  879:        shuffle(nextPlayer,state);//Shuffle the deck
    #####:  880:      }
    #####:  881:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  882:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  883:      state->deckCount[nextPlayer]--;
    #####:  884:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  886:      state->deckCount[nextPlayer]--;
        -:  887:    }
        -:  888:
    #####:  889:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  890:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  891:      state->playedCardCount++;
    #####:  892:      tributeRevealedCards[1] = -1;
    #####:  893:    }
        -:  894:
    #####:  895:    for (i = 0; i <= 2; i ++){
    #####:  896:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  897:        state->coins += 2;
    #####:  898:      }
        -:  899:
    #####:  900:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  901:        drawCard(currentPlayer, state);
    #####:  902:        drawCard(currentPlayer, state);
    #####:  903:      }
        -:  904:      else{//Action Card
    #####:  905:        state->numActions = state->numActions + 2;
        -:  906:      }
    #####:  907:    }
        -:  908:
    #####:  909:    return 0;
        -:  910:
        -:  911:    case ambassador:
    #####:  912:    j = 0;		//used to check if player has enough cards to discard
        -:  913:
    #####:  914:    if (choice2 > 2 || choice2 < 0)
        -:  915:    {
    #####:  916:      return -1;
        -:  917:    }
        -:  918:
    #####:  919:    if (choice1 == handPos)
        -:  920:    {
    #####:  921:      return -1;
        -:  922:    }
        -:  923:
    #####:  924:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  925:    {
    #####:  926:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  927:      {
    #####:  928:        j++;
    #####:  929:      }
    #####:  930:    }
    #####:  931:    if (j < choice2)
        -:  932:    {
    #####:  933:      return -1;
        -:  934:    }
        -:  935:
        -:  936:    if (DEBUG)
        -:  937:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  938:
        -:  939:    //increase supply count for choosen card by amount being discarded
    #####:  940:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  941:
        -:  942:    //each other player gains a copy of revealed card
    #####:  943:    for (i = 0; i < state->numPlayers; i++)
        -:  944:    {
    #####:  945:      if (i != currentPlayer)
        -:  946:      {
    #####:  947:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  948:      }
    #####:  949:    }
        -:  950:
        -:  951:    //discard played card from hand
    #####:  952:    discardCard(handPos, currentPlayer, state, 0);
        -:  953:
        -:  954:    //trash copies of cards returned to supply
    #####:  955:    for (j = 0; j < choice2; j++)
        -:  956:    {
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:      {
    #####:  959:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  960:        {
    #####:  961:          discardCard(i, currentPlayer, state, 1);
    #####:  962:          break;
        -:  963:        }
    #####:  964:      }
    #####:  965:    }
        -:  966:
    #####:  967:    return 0;
        -:  968:
        -:  969:    case cutpurse:
        -:  970:
    #####:  971:    updateCoins(currentPlayer, state, 2);
    #####:  972:    for (i = 0; i < state->numPlayers; i++)
        -:  973:    {
    #####:  974:      if (i != currentPlayer)
        -:  975:      {
    #####:  976:        for (j = 0; j < state->handCount[i]; j++)
        -:  977:        {
    #####:  978:          if (state->hand[i][j] == copper)
        -:  979:          {
    #####:  980:            discardCard(j, i, state, 0);
    #####:  981:            break;
        -:  982:          }
    #####:  983:          if (j == state->handCount[i])
        -:  984:          {
    #####:  985:            for (k = 0; k < state->handCount[i]; k++)
        -:  986:            {
        -:  987:              if (DEBUG)
        -:  988:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  989:            }
    #####:  990:            break;
        -:  991:          }
    #####:  992:        }
        -:  993:
    #####:  994:      }
        -:  995:
    #####:  996:    }
        -:  997:
        -:  998:    //discard played card from hand
    #####:  999:    discardCard(handPos, currentPlayer, state, 0);
        -: 1000:
    #####: 1001:    return 0;
        -: 1002:
        -: 1003:
        -: 1004:    case embargo:
        -: 1005:    //+2 Coins
    #####: 1006:    state->coins = state->coins + 2;
        -: 1007:
        -: 1008:    //see if selected pile is in play
    #####: 1009:    if ( state->supplyCount[choice1] == -1 )
        -: 1010:    {
    #####: 1011:      return -1;
        -: 1012:    }
        -: 1013:
        -: 1014:    //add embargo token to selected supply pile
    #####: 1015:    state->embargoTokens[choice1]++;
        -: 1016:
        -: 1017:    //trash card
    #####: 1018:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1019:    return 0;
        -: 1020:
        -: 1021:    case outpost:
        -: 1022:    //set outpost flag
    #####: 1023:    state->outpostPlayed++;
        -: 1024:
        -: 1025:    //discard card
    #####: 1026:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:    return 0;
        -: 1028:
        -: 1029:    case salvager:
        -: 1030:    //+1 buy
    #####: 1031:    state->numBuys++;
        -: 1032:
    #####: 1033:    if (choice1)
        -: 1034:    {
        -: 1035:      //gain coins equal to trashed card
    #####: 1036:      state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1037:      //trash card
    #####: 1038:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1039:    }
        -: 1040:
        -: 1041:    //discard card
    #####: 1042:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:    return 0;
        -: 1044:
        -: 1045:    case sea_hag:
    #####: 1046:    for (i = 0; i < state->numPlayers; i++){
    #####: 1047:      if (i != currentPlayer){
    #####: 1048:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1049:        state->discardCount[i]++;
    #####: 1050:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1051:      }
    #####: 1052:    }
    #####: 1053:    return 0;
        -: 1054:
        -: 1055:    case treasure_map:
        -: 1056:    //search hand for another treasure_map
    #####: 1057:    index = -1;
    #####: 1058:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1059:    {
    #####: 1060:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1061:      {
    #####: 1062:        index = i;
    #####: 1063:        break;
        -: 1064:      }
    #####: 1065:    }
    #####: 1066:    if (index > -1)
        -: 1067:    {
        -: 1068:      //trash both treasure cards
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1070:      discardCard(index, currentPlayer, state, 1);
        -: 1071:
        -: 1072:      //gain 4 Gold cards
    #####: 1073:      for (i = 0; i < 4; i++)
        -: 1074:      {
    #####: 1075:        gainCard(gold, state, 1, currentPlayer);
    #####: 1076:      }
        -: 1077:
        -: 1078:      //return success
    #####: 1079:      return 1;
        -: 1080:    }
        -: 1081:
        -: 1082:    //no second treasure_map found in hand
    #####: 1083:    return -1;
        -: 1084:  }
        -: 1085:
    #####: 1086:  return -1;
       30: 1087:}
        -: 1088:
        -: 1089:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1090:{
        -: 1091:
        -: 1092:  //if card is not trashed, added to Played pile
       50: 1093:  if (trashFlag < 1)
        -: 1094:  {
        -: 1095:    //add card to played pile
       30: 1096:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       30: 1097:    state->playedCardCount++;
       30: 1098:  }
        -: 1099:
        -: 1100:  //set played card to -1
       50: 1101:  state->hand[currentPlayer][handPos] = -1;
        -: 1102:
        -: 1103:  //remove card from player's hand
       50: 1104:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1105:  {
        -: 1106:    //reduce number of cards in hand
       12: 1107:    state->handCount[currentPlayer]--;
       12: 1108:  }
       38: 1109:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1110:  {
        -: 1111:    //reduce number of cards in hand
    #####: 1112:    state->handCount[currentPlayer]--;
    #####: 1113:  }
        -: 1114:  else
        -: 1115:  {
        -: 1116:    //replace discarded card with last card in hand
       38: 1117:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1118:    //set last card to -1
       38: 1119:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1120:    //reduce number of cards in hand
       38: 1121:    state->handCount[currentPlayer]--;
        -: 1122:  }
        -: 1123:
       50: 1124:  return 0;
        -: 1125:}
        -: 1126:
        -: 1127:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1128:{
        -: 1129:  //Note: supplyPos is enum of choosen card
        -: 1130:
        -: 1131:  //check if supply pile is empty (0) or card is not used in game (-1)
       22: 1132:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1133:  {
        8: 1134:    return -1;
        -: 1135:  }
        -: 1136:
        -: 1137:  //added card for [whoseTurn] current player:
        -: 1138:  // toFlag = 0 : add to discard
        -: 1139:  // toFlag = 1 : add to deck
        -: 1140:  // toFlag = 2 : add to hand
        -: 1141:
       14: 1142:  if (toFlag == 1)
        -: 1143:  {
        4: 1144:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1145:    state->deckCount[player]++;
        4: 1146:  }
       10: 1147:  else if (toFlag == 2)
        -: 1148:  {
        6: 1149:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
        6: 1150:    state->handCount[player]++;
        6: 1151:  }
        -: 1152:  else
        -: 1153:  {
        4: 1154:    state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1155:    state->discardCount[player]++;
        -: 1156:  }
        -: 1157:
        -: 1158:  //decrease number in supply pile
       14: 1159:  state->supplyCount[supplyPos]--;
        -: 1160:
       14: 1161:  return 0;
       22: 1162:}
        -: 1163:
        -: 1164:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1165:{
        -: 1166:  int i;
        -: 1167:
        -: 1168:  //reset coin count
       21: 1169:  state->coins = 0;
        -: 1170:
        -: 1171:  //add coins for each Treasure card in player's hand
      252: 1172:  for (i = 0; i < state->handCount[player]; i++)
        -: 1173:  {
      105: 1174:    if (state->hand[player][i] == copper)
        -: 1175:    {
       80: 1176:      state->coins += 1;
       80: 1177:    }
       25: 1178:    else if (state->hand[player][i] == silver)
        -: 1179:    {
    #####: 1180:      state->coins += 2;
    #####: 1181:    }
       25: 1182:    else if (state->hand[player][i] == gold)
        -: 1183:    {
    #####: 1184:      state->coins += 3;
    #####: 1185:    }
      105: 1186:  }
        -: 1187:
        -: 1188:  //add bonus
       21: 1189:  state->coins += bonus;
        -: 1190:
       21: 1191:  return 0;
        -: 1192:}
        -: 1193:
        -: 1194:void smithyAction(struct gameState *state, int handPos, int currentPlayer){
        -: 1195:  //+3 Cards
       40: 1196:  for (int i = 0; i <= 3; i++) { // BUG: added = to <
       16: 1197:    drawCard(currentPlayer, state);
       16: 1198:  }
        -: 1199:  //discard card from hand
        4: 1200:  discardCard(handPos, currentPlayer, state, 0);
        4: 1201:}
        -: 1202:
        -: 1203:void adventurerAction(struct gameState *state, int currentPlayer, int temphand[]){
        -: 1204:  int cardDrawn;
       16: 1205:  int drawnTreasure = 0;
       16: 1206:  int z = 0;// this is the counter for the temp hand
      186: 1207:  while(drawnTreasure <= 2){ // BUG: added = to <
       77: 1208:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        8: 1209:      shuffle(currentPlayer, state);
        8: 1210:    }
       77: 1211:    drawCard(currentPlayer, state);
       77: 1212:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      135: 1213:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       48: 1214:    drawnTreasure++;
        -: 1215:    else{
       29: 1216:      temphand[z]=cardDrawn;
       29: 1217:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       29: 1218:      z++;
        -: 1219:    }
        -: 1220:  }
       90: 1221:  while(z-1>=0){
       29: 1222:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       29: 1223:    z=z-1;
        -: 1224:  }
       16: 1225:}
        -: 1226:
        -: 1227:void stewardAction(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3) {
    #####: 1228:  if (choice1 == 1)
        -: 1229:  {
        -: 1230:    //+2 cards
    #####: 1231:    drawCard(currentPlayer, state);
    #####: 1232:    drawCard(currentPlayer, state);
    #####: 1233:  }
    #####: 1234:  else if (choice1 == 2)
        -: 1235:  {
        -: 1236:    //+2 coins
    #####: 1237:    state->coins = /*state->coins*/ + 2; //BUG: removed state->coins
    #####: 1238:  }
        -: 1239:  else
        -: 1240:  {
        -: 1241:    //trash 2 cards in hand
    #####: 1242:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1243:    discardCard(choice3, currentPlayer, state, 1);
        -: 1244:  }
        -: 1245:
        -: 1246:  //discard card from hand
    #####: 1247:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:}
        -: 1249:
        -: 1250:void minionAction(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2, int choice3) {
        -: 1251:  //+1 action
    #####: 1252:  state->numActions++;
        -: 1253:
        -: 1254:  //discard card from hand
    #####: 1255:  discardCard(handPos, currentPlayer, state, 0);
        -: 1256:
    #####: 1257:  if (choice1)		//+2 coins
        -: 1258:  {
    #####: 1259:    state->coins = state->coins + 2;
    #####: 1260:  }
        -: 1261:
    #####: 1262:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1263:  {
        -: 1264:    //discard hand
    #####: 1265:    while(numHandCards(state) > 0)
        -: 1266:    {
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);
        -: 1268:    }
        -: 1269:
        -: 1270:    //draw 4
    #####: 1271:    for (int i = 0; i < 4; i++)
        -: 1272:    {
    #####: 1273:      drawCard(currentPlayer, state);
    #####: 1274:    }
        -: 1275:
        -: 1276:    //other players discard hand and redraw if hand size > 4
    #####: 1277:    for (int i = 0; i < state->numPlayers; i++)
        -: 1278:    {
    #####: 1279:      if (i != currentPlayer)
        -: 1280:      {
    #####: 1281:        if ( state->handCount[i] > 4 )
        -: 1282:        {
        -: 1283:          //discard hand
    #####: 1284:          while( state->handCount[i] > 0 )
        -: 1285:          {
    #####: 1286:            discardCard(handPos, i, state, 0);
        -: 1287:          }
        -: 1288:
        -: 1289:          //draw 4
    #####: 1290:          for (int j = 0; j < 4; j++)
        -: 1291:          {
    #####: 1292:            drawCard(i, state);
    #####: 1293:          }
    #####: 1294:        }
    #####: 1295:      }
    #####: 1296:    }
        -: 1297:
    #####: 1298:  }
    #####: 1299:}
        -: 1300:
        -: 1301:void feastAction(struct gameState *state, int temphand[], int currentPlayer, int choice1, int choice2, int choice3){
        -: 1302:  //gain card with cost up to 5
        -: 1303:  //Backup hand
    #####: 1304:  for (int i = 0; i < state->handCount[currentPlayer]; i++){ // BUG: removed = from >=
    #####: 1305:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1306:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1307:  }
        -: 1308:  //Backup hand
        -: 1309:
        -: 1310:  //Update Coins for Buy
    #####: 1311:  updateCoins(currentPlayer, state, 5);
    #####: 1312:  int x = 1;//Condition to loop on
    #####: 1313:  while( x == 1) {//Buy one card
    #####: 1314:    if (supplyCount(choice1, state) <= 0){
        -: 1315:      if (DEBUG)
        -: 1316:      printf("None of that card left, sorry!\n");
        -: 1317:
        -: 1318:      if (DEBUG){
        -: 1319:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1320:      }
    #####: 1321:    }
    #####: 1322:    else if (state->coins < getCost(choice1)){
    #####: 1323:      printf("That card is too expensive!\n");
        -: 1324:
        -: 1325:      if (DEBUG){
        -: 1326:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1327:      }
    #####: 1328:    }
        -: 1329:    else{
        -: 1330:
        -: 1331:      if (DEBUG){
        -: 1332:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1333:      }
        -: 1334:
    #####: 1335:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1336:      x = 0;//No more buying cards
        -: 1337:
        -: 1338:      if (DEBUG){
        -: 1339:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1340:      }
        -: 1341:
        -: 1342:    }
        -: 1343:  }
        -: 1344:
        -: 1345:  //Reset Hand
    #####: 1346:  for (int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1347:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1348:    temphand[i] = -1;
    #####: 1349:  }
        -: 1350:  //Reset Hand
    #####: 1351:}
        -: 1352:
        -: 1353://end of dominion.c
