        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominic Phan
        -:    2:// testing smithy
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:int totalFail = 0;
        -:   11:void asserttrue(int a, int b)
        -:   12:{
      122:   13:  if (a == b)
        -:   14:  {
      118:   15:    printf("\t\t\t***Assert Passed***\n\n");
      118:   16:  }
        -:   17:  else
        -:   18:  {
        4:   19:    totalFail++;
        4:   20:    printf("\t\t\t***Assert failed, total fails***: %d\n\n", totalFail);
        -:   21:  }
      122:   22:}
        -:   23:int main()
        -:   24:{
        -:   25:  int i, j;
        1:   26:  int handPos = 0;
        1:   27:  int choice1 = 0;
        1:   28:  int choice2 = 0;
        1:   29:  int choice3 = 0;
        1:   30:  int* bonus = NULL;
        1:   31:  int seed = 1000;
        1:   32:  int numPlayer = 4;
        -:   33:  int p, r;
        -:   34:  int currHandCount;
        -:   35:  int playedCounter;
        -:   36:  // select kingdom cards
        1:   37:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   38:               remodel, smithy, village, baron, great_hall};
        -:   39:  struct gameState state;
        -:   40:  struct gameState otherPlayersState;
        -:   41:  /*
        -:   42:  * The smithy kingdom card is supposed to draw three cards. This means that +3 are added to the current player's
        -:   43:  * hand. This also means that the smithy card must be removed from the current player's hand. We will test both
        -:   44:  * of these functionalities.
        -:   45:  */
        1:   46:  memset(&state, 23, sizeof(struct gameState));
        1:   47:  r = initializeGame(numPlayer, k, seed, &state);
        1:   48:  printf("Testing the smithy card:\n");
        -:   49:
        -:   50:  // Test smithy for each player. 
       10:   51:  for (p = 0; p < numPlayer; p++) {
        -:   52:    // Store other player's gamestate to test if they are mutated.
        4:   53:    memcpy(otherPlayersState.hand, state.hand, sizeof(int) * MAX_HAND * MAX_PLAYERS);
        4:   54:    memcpy(otherPlayersState.deck, state.deck, sizeof(int) * MAX_DECK * MAX_PLAYERS);
        4:   55:    memcpy(otherPlayersState.discard, state.discard, sizeof(int) * MAX_DECK * MAX_PLAYERS);
       40:   56:    for (i = 0; i < numPlayer; i++) {
       16:   57:      otherPlayersState.handCount[i] = state.handCount[i];
       16:   58:      otherPlayersState.deckCount[i] = state.deckCount[i];
       16:   59:      otherPlayersState.discardCount[i] = state.discardCount[i];
       16:   60:    }
        4:   61:    state.hand[p][handPos] = smithy;
        4:   62:    currHandCount = state.handCount[p];
        4:   63:    printf("\tTesting for PLAYER %d:\n", p);
        4:   64:    currHandCount = state.handCount[p];
        4:   65:    playedCounter = state.playedCardCount;
        4:   66:    printf("playedCounter = %d\n", playedCounter);
        4:   67:    cardEffect(smithy, choice1, choice2, choice3, &state, handPos, bonus);
        -:   68:    // Check that the cards were added to the hand
        4:   69:    printf("\t\tChecking that three cards were added to the hand and smithy was removed:\n");
        4:   70:    printf("\t\t\tExpected: %d, result: %d\n", currHandCount + 2, state.handCount[p]);
        4:   71:    asserttrue(state.handCount[p], currHandCount + 2);
        -:   72:    // Check the played pile for smithy
        4:   73:    printf("\t\tChecking that smithy was added to the played pile:\n");
        4:   74:    printf("\t\t\tExpected: %d, result: %d\n", smithy, state.playedCards[playedCounter]);
        4:   75:    asserttrue(state.playedCards[playedCounter], smithy);
        -:   76:    // Check that other player's states were not mutated
        4:   77:    printf("\t\tChecking that other player's states were not mutated:\n");
       40:   78:    for (i = 0; i < numPlayer; i++) {
       16:   79:      if (i != p) {
       12:   80:        printf("\t\t\tChecking player %d's hand:\n", i);
       24:   81:        for (j = 0; j < otherPlayersState.handCount[i]; j++) {
    #####:   82:          printf("\t\t\tExpected: %d, result: %d\n", otherPlayersState.hand[i][j], state.hand[i][j]);
    #####:   83:          asserttrue(state.hand[i][j], otherPlayersState.hand[i][j]);
    #####:   84:        }
       12:   85:        printf("\t\t\tChecking player %d's deck:\n", i);
      156:   86:        for (j = 0; j < otherPlayersState.deckCount[i]; j++) {
       66:   87:          printf("\t\t\tExpected: %d, result: %d\n", otherPlayersState.deck[i][j], state.deck[i][j]);
       66:   88:          asserttrue(otherPlayersState.deck[i][j], state.deck[i][j]);
       66:   89:        }
       12:   90:        printf("\t\t\tChecking player %d's discard:\n", i);
      120:   91:        for (j = 0; j < otherPlayersState.discardCount[i]; j++) {
       48:   92:          printf("\t\t\tExpected: %d, Result: %d\n", otherPlayersState.discard[i][j], state.discard[i][j]);
       48:   93:          asserttrue(otherPlayersState.discard[i][j], state.discard[i][j]);
       48:   94:        }
       12:   95:      }
       16:   96:    }
        4:   97:    endTurn(&state);
        4:   98:  }
        1:   99:  if (totalFail == 0)
        -:  100:  {
    #####:  101:    printf("FINAL RESULT: All tests passed\n");
    #####:  102:  }
        -:  103:  else
        -:  104:  {
        1:  105:    printf("FINAL RESULT: %d FAILURES\n", totalFail);
        -:  106:  }
        1:  107:  return 0;
        -:  108:}
