        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominic Phan
        -:    2:// testing village
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:int totalFail = 0;
        -:   11:void asserttrue(int a, int b)
        -:   12:{
       36:   13:  if (a == b)
        -:   14:  {
       36:   15:    printf("\t\t\t***Assert Passed***\n\n");
       36:   16:  }
        -:   17:  else
        -:   18:  {
    #####:   19:    totalFail++;
    #####:   20:    printf("\t\t\t***Assert failed, total fails***: %d\n\n", totalFail);
        -:   21:  }
       36:   22:}
        -:   23:int main()
        -:   24:{
        -:   25:  int i, j;
        1:   26:  int p = 0;
        1:   27:  int handPos = 0;
        1:   28:  int choice1 = 0;
        1:   29:  int choice2 = 0;
        1:   30:  int choice3 = 0;
        1:   31:  int *bonus = NULL;
        1:   32:  int seed = 1000;
        1:   33:  int numPlayer = 4;
        -:   34:  int r;
        -:   35:  int currHandCount;
        -:   36:  int playedCounter;
        -:   37:  int actionCounter;
        1:   38:  int discardTestPile[MAX_DECK] = {copper, copper, copper, copper, copper,
        -:   39:                                   copper, copper, copper, copper, copper};
        -:   40:
        -:   41:  // select kingdom cards
        1:   42:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   43:               remodel, smithy, village, baron, great_hall};
        -:   44:  struct gameState state;
        -:   45:  struct gameState otherPlayersState;
        -:   46:  /*
        -:   47:  * The village kingdom card allows the player to draw one card from the deck and gain two 
        -:   48:  * actions.
        -:   49:  * Precondition: valid gamestate
        -:   50:  * post condition: two actions added and one card added to hand. village should be added to 
        -:   51:  *                 played pile.
        -:   52:  */
        1:   53:  memset(&state, 23, sizeof(struct gameState));
        1:   54:  r = initializeGame(numPlayer, k, seed, &state);
        1:   55:  printf("Testing the village card:\n");
        -:   56:
        1:   57:  memcpy(otherPlayersState.hand, state.hand, sizeof(int) * MAX_HAND * MAX_PLAYERS);
        1:   58:  memcpy(otherPlayersState.deck, state.deck, sizeof(int) * MAX_DECK * MAX_PLAYERS);
        1:   59:  memcpy(otherPlayersState.discard, state.discard, sizeof(int) * MAX_DECK * MAX_PLAYERS);
       10:   60:  for (i = 0; i < numPlayer; i++)
        -:   61:  {
        4:   62:    otherPlayersState.handCount[i] = state.handCount[i];
        4:   63:    otherPlayersState.deckCount[i] = state.deckCount[i];
        4:   64:    otherPlayersState.discardCount[i] = state.discardCount[i];
        4:   65:  }
        -:   66:
        -:   67:  // Testing with a regular deck
        1:   68:  state.hand[0][0] = village;
        1:   69:  currHandCount = state.handCount[0];
        1:   70:  actionCounter = state.numActions;
        1:   71:  playedCounter = state.playedCardCount;
        1:   72:  cardEffect(village, choice1, choice2, choice3, &state, handPos, bonus);
        1:   73:  printf("\tChecking with a regular deck:\n");
        1:   74:  printf("\t\tChecking that a card was drawn and added to the hand:\n");
        1:   75:  printf("\t\t\tExpected: %d result: %d:\n", currHandCount, state.handCount[0]);
        1:   76:  asserttrue(currHandCount, state.handCount[0]);
        1:   77:  printf("\t\tChecking that two actions were added:\n");
        1:   78:  printf("\t\t\tExpected: %d, result: %d\n", actionCounter + 2, state.numActions);
        1:   79:  asserttrue(actionCounter + 2, state.numActions);
        1:   80:  printf("\t\tChecking that village was put in the played pile:\n");
        1:   81:  printf("\t\t\tExpected: %d, result: %d\n", village, state.playedCards[playedCounter]);
        1:   82:  asserttrue(village, state.playedCards[playedCounter]);
        -:   83:
        -:   84:  // Check that other player's states were not mutated
        1:   85:  printf("\t\tChecking that other player's states were not mutated:\n");
       10:   86:  for (i = 0; i < numPlayer; i++)
        -:   87:  {
        4:   88:    if (i != p)
        -:   89:    {
        3:   90:      printf("\t\t\tChecking player %d's hand:\n", i);
        6:   91:      for (j = 0; j < otherPlayersState.handCount[i]; j++)
        -:   92:      {
    #####:   93:        printf("\t\t\tExpected: %d, result: %d\n", otherPlayersState.hand[i][j], state.hand[i][j]);
    #####:   94:        asserttrue(state.hand[i][j], otherPlayersState.hand[i][j]);
    #####:   95:      }
        3:   96:      printf("\t\t\tChecking player %d's deck:\n", i);
       66:   97:      for (j = 0; j < otherPlayersState.deckCount[i]; j++)
        -:   98:      {
       30:   99:        printf("\t\t\tExpected: %d, result: %d\n", otherPlayersState.deck[i][j], state.deck[i][j]);
       30:  100:        asserttrue(otherPlayersState.deck[i][j], state.deck[i][j]);
       30:  101:      }
        3:  102:      printf("\t\t\tChecking player %d's discard:\n", i);
        6:  103:      for (j = 0; j < otherPlayersState.discardCount[i]; j++)
        -:  104:      {
    #####:  105:        printf("\t\t\tExpected: %d, Result: %d\n", otherPlayersState.discard[i][j], state.discard[i][j]);
    #####:  106:        asserttrue(otherPlayersState.discard[i][j], state.discard[i][j]);
    #####:  107:      }
        3:  108:    }
        4:  109:  }
        -:  110:
        -:  111:  // Testing with an empty deck
        1:  112:  memcpy(state.discard[0], discardTestPile, sizeof(int) * 10);
        1:  113:  state.discardCount[0] = 10;
        1:  114:  state.deckCount[0] = 0;
        1:  115:  state.hand[0][0] = village;
        1:  116:  currHandCount = state.handCount[0];
        1:  117:  actionCounter = state.numActions;
        1:  118:  playedCounter = state.playedCardCount;
        1:  119:  cardEffect(village, choice1, choice2, choice3, &state, handPos, bonus);
        1:  120:  printf("\n\tChecking with an empty deck:\n");
        1:  121:  printf("\t\tChecking that a card was drawn and added to the hand:\n");
        1:  122:  printf("\t\t\tExpected: %d result: %d:\n", currHandCount, state.handCount[0]);
        1:  123:  asserttrue(currHandCount, state.handCount[0]);
        1:  124:  printf("\t\tChecking that two actions were added:\n");
        1:  125:  printf("\t\t\tExpected: %d, result: %d\n", actionCounter + 2, state.numActions);
        1:  126:  asserttrue(actionCounter + 2, state.numActions);
        1:  127:  printf("\t\tChecking that village was put in the played pile:\n");
        1:  128:  printf("\t\t\tExpected: %d, result: %d\n", village, state.playedCards[playedCounter]);
        1:  129:  asserttrue(village, state.playedCards[playedCounter]);
        -:  130:
        1:  131:  if (totalFail == 0)
        -:  132:  {
        1:  133:    printf("FINAL RESULT: All tests passed\n");
        1:  134:  }
        -:  135:  else
        -:  136:  {
    #####:  137:    printf("FINAL RESULT: %d FAILURES\n", totalFail);
        -:  138:  }
        1:  139:  return 0;
        -:  140:}
