        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominic Phan
        -:    2:// Testing handCard
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:
        -:   11:int totalFail = 0;
        -:   12:void asserttrue(int a, int b)
        -:   13:{
        5:   14:  if (a == b)
        -:   15:  {
        5:   16:    printf("\t\t\tAssert Passed\n");
        5:   17:  }
        -:   18:  else
        -:   19:  {
    #####:   20:    totalFail++;
    #####:   21:    printf("\t\t\tAssert failed, total fails: %d\n", totalFail);
        -:   22:
        -:   23:  }
        5:   24:}
        -:   25:
        -:   26:int main()
        -:   27:{
        -:   28:  int i;
        1:   29:  int seed = 1000;
        1:   30:  int numPlayer = 2;
        -:   31:  int p, r, handCount;
        1:   32:  p = 0;
        -:   33:  int testCard;
        -:   34:  // select kingdom cards
        1:   35:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   36:                remodel, smithy, village, baron, great_hall};
        -:   37:  struct gameState state;
        1:   38:  int testHand[MAX_HAND] = {adventurer, copper, silver, gold, great_hall};
        1:   39:  handCount = 5;
        -:   40:
        -:   41:  /* Testing code goes here*/
        -:   42:
        -:   43:  /*
        -:   44:  * The handCard() function returns a card at a certain position from the current player's hand.
        -:   45:  * To test this, simply add 5 unique cards to the hand and verify that the cards are in the right 
        -:   46:  * position.
        -:   47:  * Doesn't need to be tested for invalid inputs (out of range) because it's only used to discard / get
        -:   48:  * the card that will be played, so handPos will always be valid.
        -:   49:  */
        1:   50:  memset(&state, 23, sizeof(struct gameState));
        1:   51:  r = initializeGame(numPlayer, k, seed, &state);
        1:   52:  state.handCount[0] = handCount;
        1:   53:  memcpy(state.hand[0], testHand, sizeof(int) * handCount);
        1:   54:  printf("Testing handCard()\n");
       12:   55:  for (i = 0; i < 5; i++) {
        5:   56:    testCard = handCard(i, &state);
        5:   57:    printf("\tChecking card %d:\n", i);
        5:   58:    printf("\t\tComparing result: %d to expected: %d\n", testCard, testHand[i]);
        5:   59:    asserttrue(testCard, testHand[i]);
        5:   60:  }
        -:   61: 
        1:   62:  if (totalFail == 0) {
        1:   63:    printf("FINAL RESULT: All tests passed\n");
        1:   64:  }
        -:   65:  else {
    #####:   66:    printf("FINAL RESULT: %d FAILURES\n", totalFail);
        -:   67:  }
        1:   68:  return 0;
        -:   69:
        -:   70:}
