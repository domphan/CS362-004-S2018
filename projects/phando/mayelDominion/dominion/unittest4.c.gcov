        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Dominic Phan
        -:    2:// testing discardCard() function
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:int totalFail = 0;
        -:   11:void asserttrue(int a, int b)
        -:   12:{
      100:   13:  if (a == b)
        -:   14:  {
      100:   15:    printf("\t\t\t***Assert Passed***\n\n");
      100:   16:  }
        -:   17:  else
        -:   18:  {
    #####:   19:    totalFail++;
    #####:   20:    printf("\t\t\t***Assert failed, total fails***: %d\n\n", totalFail);
        -:   21:  }
      100:   22:}
        -:   23:int main()
        -:   24:{
        -:   25:  int i;
        1:   26:  int seed = 1000;
        1:   27:  int numPlayer = 4;
        -:   28:  int p, r, handpos;
        1:   29:  int handCount = 5;
        1:   30:  int coppers[MAX_HAND] = {copper, copper, copper, copper, copper};
        -:   31:  int playedCounter;
        -:   32:  int currHandCount;
        -:   33:  // select kingdom cards
        1:   34:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   35:               remodel, smithy, village, baron, great_hall};
        -:   36:  struct gameState state;
        -:   37:  /*
        -:   38:  * The discard card function removes a card from the current player's hand and either trashes it
        -:   39:  * or moves it to the discard pile.
        -:   40:  * We must test both functionalities: played pile and trashed (removed from game)
        -:   41:  * We must also test that it works for up to four players.
        -:   42:  * It must also work for all valid hand positions.
        -:   43:  */
        1:   44:  memset(&state, 23, sizeof(struct gameState));
        1:   45:  r = initializeGame(numPlayer, k, seed, &state);
        1:   46:  printf("Testing discardCard() with a full hand:\n");
       10:   47:  for (p = 0; p < numPlayer; p++) {
        -:   48:    // Fill hand with coppers
       48:   49:    for (i = 0; i < handCount; i++) {
       20:   50:      state.handCount[p] = handCount;
       20:   51:      memcpy(state.hand[p], coppers, sizeof(int) * handCount);
       20:   52:      printf("This is what's in the hand: %d\n", state.hand[p][i]);
       20:   53:    }
       48:   54:    for (handpos = handCount-1; handpos >= 0; handpos--) {
        -:   55:      // test sending card to played pile
       20:   56:      playedCounter = state.playedCardCount;
       20:   57:      currHandCount = state.handCount[p];
       20:   58:      printf("\ttesting discardCard() [TO PLAYED] player %d with hand position %d:\n", p, handpos);
       20:   59:      discardCard(handpos, p, &state, 0);
       20:   60:      printf("\t\tChecking that the card was played:\n");
       20:   61:      asserttrue(playedCounter + 1, state.playedCardCount); // check that card was played
       20:   62:      printf("\t\tChecking that the newly played card is copper:\n");
       20:   63:      printf("\t\t\tExpected: %d, result: %d", (int)copper, state.playedCards[playedCounter]);
       20:   64:      asserttrue(copper, state.playedCards[playedCounter]); // check that newly played card was copper
       20:   65:      printf("\t\tChecking that the card was removed from the hand:\n");
       20:   66:      asserttrue(currHandCount - 1, state.handCount[p]); // check that the card was removed fromt he hand
        -:   67:
      240:   68:      for (i = 0; i < handCount; i++) {
      100:   69:        state.handCount[p] = handCount;
      100:   70:        memcpy(state.hand[p], coppers, sizeof(int) * handCount);
      100:   71:      }
        -:   72:
       20:   73:      playedCounter = state.playedCardCount;
       20:   74:      currHandCount = state.handCount[p];
       20:   75:      printf("\ttesting discardCard() [TO TRASH] player %d with hand position %d:\n", p, handpos);
       20:   76:      discardCard(handpos, p, &state, 1);
       20:   77:      printf("\t\tTesting that the card was removed from the hand:\n");
       20:   78:      asserttrue(currHandCount - 1, state.handCount[p]); // check that card is removed from hand
       20:   79:      printf("\t\tTesting that the card was not played:\n");
       20:   80:      asserttrue(playedCounter, state.playedCardCount); // make sure card was not played
       20:   81:    }
        4:   82:  }
        1:   83:  if (totalFail == 0) {
        1:   84:    printf("FINAL RESULT: All tests passed\n");
        1:   85:  }
        -:   86:  else {
    #####:   87:    printf("FINAL RESULT: %d FAILURES\n", totalFail);
        -:   88:  }
        1:   89:  return 0;
        -:   90:}
