Result for running Dominion test suit:
unittest1.c:
TESTING supplyCount():
	Testing supplyCount() with 2 players
		Checking copper, silver, gold
			Assert Passed
			Assert Passed
			Assert Passed
		Checking curse cards
			Assert Passed
		Checking a kingdom card
			Assert Passed
		Checking a victory card
			Assert Passed
	Testing supplyCount() with 3 players
		Checking copper, silver, gold
			Assert Passed
			Assert Passed
			Assert Passed
		Checking curse cards
			Assert Passed
		Checking a kingdom card
			Assert Passed
		Checking a victory card
			Assert Passed
	Testing supplyCount() with 4 players
		Checking copper, silver, gold
			Assert Passed
			Assert Passed
			Assert Passed
		Checking curse cards
			Assert Passed
		Checking a kingdom card
			Assert Passed
		Checking a victory card
			Assert Passed
FINAL RESULT: All tests passed
File 'unittest1.c'
Lines executed:84.85% of 33
unittest1.c:creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:25.73% of 649
Branches executed:27.58% of 417
Taken at least once:19.42% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
function compare called 168 returned 100% blocks executed 85%
        -:   15:int compare(const void* a, const void* b) {
      168:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   17:    return 1;
      168:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       60:   19:    return -1;
      108:   20:  return 0;
      168:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
        -:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 3 returned 100% blocks executed 90%
        -:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        3:   51:  SelectStream(1);
        3:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        6:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        3:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       66:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   65:    {
      660:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   67:        {
      570:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
      300:   72:        }
       30:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        3:   80:  if (numPlayers == 2)
branch  0 taken 0%
branch  1 taken 100%
        -:   81:    {
    #####:   82:      state->supplyCount[curse] = 10;
    #####:   83:    }
        3:   84:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
    #####:   87:    }
        -:   88:  else
        -:   89:    {
        3:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        3:   94:  if (numPlayers == 2)
branch  0 taken 0%
branch  1 taken 100%
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 8;
    #####:   97:      state->supplyCount[duchy] = 8;
    #####:   98:      state->supplyCount[province] = 8;
    #####:   99:    }
        -:  100:  else
        -:  101:    {
        3:  102:      state->supplyCount[estate] = 12;
        3:  103:      state->supplyCount[duchy] = 12;
        3:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        3:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  109:  state->supplyCount[silver] = 40;
        3:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      126:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  114:    {
      990:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  116:	{
      465:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       57:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  121:		{
        6:  122:		  if (numPlayers == 2){ 
branch  0 taken 0%
branch  1 taken 100%
    #####:  123:		    state->supplyCount[i] = 8; 
    #####:  124:		  }
        6:  125:		  else{ state->supplyCount[i] = 12; }
        6:  126:		}
        -:  127:	      else
        -:  128:		{
       24:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       30:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      435:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
      435:  137:	}
        -:  138:
       60:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       30:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  146:    {
       12:  147:      state->deckCount[i] = 0;
       96:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  149:	{
       36:  150:	  state->deck[i][j] = estate;
       36:  151:	  state->deckCount[i]++;
       36:  152:	}
      192:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  154:	{
       84:  155:	  state->deck[i][j] = copper;
       84:  156:	  state->deckCount[i]++;		
       84:  157:	}
       12:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       30:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  162:    {
       12:  163:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
       12:  167:    }
        -:  168:
        -:  169:  //draw player hands
       30:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       12:  173:      state->handCount[i] = 0;
       12:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
       12:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      168:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  184:    {
       81:  185:      state->embargoTokens[i] = 0;
       81:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        3:  189:  state->outpostPlayed = 0;
        3:  190:  state->phase = 0;
        3:  191:  state->numActions = 1;
        3:  192:  state->numBuys = 1;
        3:  193:  state->playedCardCount = 0;
        3:  194:  state->whoseTurn = 0;
        3:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       36:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       15:  200:    drawCard(state->whoseTurn, state);
       15:  201:  }
        -:  202:
        3:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        3:  205:  return 0;
        3:  206:}
        -:  207:
function shuffle called 20 returned 100% blocks executed 100%
        -:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       20:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       20:  216:  if (state->deckCount[player] < 1)
branch  0 taken 40%
branch  1 taken 60%
        8:  217:    return -1;
       12:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      264:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      120:  222:    card = floor(Random() * state->deckCount[player]);
      120:  223:    newDeck[newDeckPos] = state->deck[player][card];
      120:  224:    newDeckPos++;
      834:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      297:  226:      state->deck[player][i] = state->deck[player][i+1];
      297:  227:    }
      120:  228:    state->deckCount[player]--;
        -:  229:  }
      264:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      120:  231:    state->deck[player][i] = newDeck[i];
      120:  232:    state->deckCount[player]++;
      120:  233:  }
        -:  234:
       12:  235:  return 0;
       20:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
        -:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
    #####:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
        -:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
    #####:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
function handCard called 0 returned 0% blocks executed 0%
        -:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 18 returned 100% blocks executed 100%
        -:  327:int supplyCount(int card, struct gameState *state) {
       18:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 45000 returned 100% blocks executed 100%
        -:  353:int whoseTurn(struct gameState *state) {
    45000:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 0 returned 0% blocks executed 0%
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
    #####:  414:	}
    #####:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
    #####:  422:}
        -:  423:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
        -:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
    #####:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
    #####:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
    #####:  491:	}
    #####:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
    #####:  502:	}
    #####:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
    #####:  512:	}
    #####:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
    #####:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
    #####:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 214933 returned 100% blocks executed 75%
        -:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
   214933:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
        8:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  541:      state->deck[player][i] = state->discard[player][i];
    #####:  542:      state->discard[player][i] = -1;
    #####:  543:    }
        -:  544:
        4:  545:    state->deckCount[player] = state->discardCount[player];
        4:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        4:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        4:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        4:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        4:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        4:  566:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        4:  567:      return -1;
        -:  568:
    #####:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  570:    state->deckCount[player]--;
    #####:  571:    state->handCount[player]++;//Increment hand count
    #####:  572:  }
        -:  573:
        -:  574:  else{
   214929:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
   214929:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
   214929:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   214929:  583:    state->deckCount[player]--;
   214929:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
   214929:  587:  return 0;
   214933:  588:}
        -:  589:
function getCost called 0 returned 0% blocks executed 0%
        -:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
    #####:  651:}
        -:  652:
function cardEffect called 45000 returned 100% blocks executed 3%
        -:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
    45000:  660:  int currentPlayer = whoseTurn(state);
    45000:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
    45000:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
    45000:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
    45000:  667:  int z = 0;// this is the counter for the temp hand
    45000:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50%
branch  1 taken 50%
    22351:  669:    nextPlayer = 0;
    22351:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
    45000:  674:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
    15000:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
    15000:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
    #####:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
    #####:  698:	    }
    #####:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
    #####:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
    #####:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
    #####:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
    #####:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
    #####:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
    15000:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    15000:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    15000:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    15000:  835:      discardCard(handPos, currentPlayer, state, 0);
    15000:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
    #####:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  864:		isGameOver(state);
    #####:  865:	      }
    #####:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
    #####:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
    #####:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:	    isGameOver(state);
    #####:  882:	  }
    #####:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
    #####:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
    #####:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  941:			{
    #####:  942:			  drawCard(i, state);
    #####:  943:			}
    #####:  944:		    }
    #####:  945:		}
    #####:  946:	    }
        -:  947:				
    #####:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
    #####:  958:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
    #####:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
    #####:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
    #####:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
    #####:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
    #####: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1019:	  state->coins += 2;
    #####: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
    #####: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
    #####: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1049:	    {
    #####: 1050:	      j++;
    #####: 1051:	    }
    #####: 1052:	}
    #####: 1053:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1070:	    }
    #####: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
    #####: 1086:	    }
    #####: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
    #####: 1137:	}
    #####: 1138:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
    45000: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
function adventurer_effect called 15000 returned 100% blocks executed 100%
        -: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
    15000: 1167:	int drawntreasure = 0;
    15000: 1168:	int z =0; 
        -: 1169:	  
   309836: 1170:	while(drawntreasure<2){
branch  0 taken 90%
branch  1 taken 10%
   139918: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
        4: 1172:			shuffle(currentPlayer, state);
        4: 1173:		}
        -: 1174:	
   139918: 1175:		drawCard(currentPlayer, state);
   139918: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   389897: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 93%
branch  1 taken 7%
branch  2 taken 92%
branch  3 taken 8%
branch  4 taken 8%
branch  5 taken 92%
    30000: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
   109918: 1181:			temphand[z]=cardDrawn;
   109918: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   109918: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
   249836: 1187:	while(z-1>=0){
branch  0 taken 88%
branch  1 taken 12%
   109918: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
   109918: 1189:		z=z-1;
        -: 1190:    }
    15000: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
function smithy_effect called 15000 returned 100% blocks executed 100%
        -: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
   150000: 1198:    for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20%
    60000: 1199:	  drawCard(currentPlayer, state);
    60000: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
    15000: 1203:    discardCard(handPos, currentPlayer, state, 0);
    15000: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
function embargo_effect called 0 returned 0% blocks executed 0%
        -: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
    #####: 1229:}
        -: 1230:
function cutpurse_effect called 0 returned 0% blocks executed 0%
        -: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
    #####: 1256:		}
        -: 1257:					
    #####: 1258:	    }
        -: 1259:				
    #####: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
function seahag_effect called 0 returned 0% blocks executed 0%
        -: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1271:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1277:		}
    #####: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
function discardCard called 30000 returned 100% blocks executed 80%
        -: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
    30000: 1291:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1292:    {
        -: 1293:      //add card to played pile
    30000: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    30000: 1295:      state->playedCardCount++;
    30000: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
    30000: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
    30000: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
    #####: 1306:    }
    30000: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
    #####: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
    30000: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
    30000: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
    30000: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
    30000: 1322:  return 0;
        -: 1323:}
        -: 1324:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1330:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
    #####: 1340:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
    #####: 1344:    }
    #####: 1345:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
    #####: 1349:    }
        -: 1350:  else
        -: 1351:    {
    #####: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
    #####: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
    #####: 1359:  return 0;
    #####: 1360:}
        -: 1361:
function updateCoins called 3 returned 100% blocks executed 85%
        -: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
        3: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
       36: 1370:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1371:    {
       15: 1372:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1373:	{
       12: 1374:	  state->coins += 1;
       12: 1375:	}
        3: 1376:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
    #####: 1379:	}
        3: 1380:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
    #####: 1383:	}	
       15: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
        3: 1387:  state->coins += bonus;
        -: 1388:
        3: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
unittest2.c:
Testing handCard()
	Checking card 0:
		Comparing result: 7 to expected: 7
			Assert Passed
	Checking card 1:
		Comparing result: 4 to expected: 4
			Assert Passed
	Checking card 2:
		Comparing result: 5 to expected: 5
			Assert Passed
	Checking card 3:
		Comparing result: 6 to expected: 6
			Assert Passed
	Checking card 4:
		Comparing result: 16 to expected: 16
			Assert Passed
FINAL RESULT: All tests passed
File 'unittest2.c'
Lines executed:89.29% of 28
unittest2.c:creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:27.27% of 649
Branches executed:27.58% of 417
Taken at least once:20.14% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
function compare called 196 returned 100% blocks executed 85%
        -:   15:int compare(const void* a, const void* b) {
      196:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   17:    return 1;
      196:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       70:   19:    return -1;
      126:   20:  return 0;
      196:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
        -:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 4 returned 100% blocks executed 94%
        -:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        4:   51:  SelectStream(1);
        4:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        8:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        4:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       88:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   65:    {
      880:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   67:        {
      760:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
      400:   72:        }
       40:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        4:   80:  if (numPlayers == 2)
branch  0 taken 25%
branch  1 taken 75%
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 10;
        1:   83:    }
        3:   84:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
    #####:   87:    }
        -:   88:  else
        -:   89:    {
        3:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        4:   94:  if (numPlayers == 2)
branch  0 taken 25%
branch  1 taken 75%
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 8;
        1:   97:      state->supplyCount[duchy] = 8;
        1:   98:      state->supplyCount[province] = 8;
        1:   99:    }
        -:  100:  else
        -:  101:    {
        3:  102:      state->supplyCount[estate] = 12;
        3:  103:      state->supplyCount[duchy] = 12;
        3:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        4:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  109:  state->supplyCount[silver] = 40;
        4:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      168:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  114:    {
     1320:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  116:	{
      620:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       76:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  121:		{
        8:  122:		  if (numPlayers == 2){ 
branch  0 taken 25%
branch  1 taken 75%
        2:  123:		    state->supplyCount[i] = 8; 
        2:  124:		  }
        6:  125:		  else{ state->supplyCount[i] = 12; }
        8:  126:		}
        -:  127:	      else
        -:  128:		{
       32:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       40:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      580:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
      580:  137:	}
        -:  138:
       80:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       36:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22%
        -:  146:    {
       14:  147:      state->deckCount[i] = 0;
      112:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  149:	{
       42:  150:	  state->deck[i][j] = estate;
       42:  151:	  state->deckCount[i]++;
       42:  152:	}
      224:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  154:	{
       98:  155:	  state->deck[i][j] = copper;
       98:  156:	  state->deckCount[i]++;		
       98:  157:	}
       14:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       36:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22%
        -:  162:    {
       14:  163:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
       14:  167:    }
        -:  168:
        -:  169:  //draw player hands
       36:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22%
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       14:  173:      state->handCount[i] = 0;
       14:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
       14:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      224:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  184:    {
      108:  185:      state->embargoTokens[i] = 0;
      108:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        4:  189:  state->outpostPlayed = 0;
        4:  190:  state->phase = 0;
        4:  191:  state->numActions = 1;
        4:  192:  state->numBuys = 1;
        4:  193:  state->playedCardCount = 0;
        4:  194:  state->whoseTurn = 0;
        4:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       48:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       20:  200:    drawCard(state->whoseTurn, state);
       20:  201:  }
        -:  202:
        4:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        4:  205:  return 0;
        4:  206:}
        -:  207:
function shuffle called 22 returned 100% blocks executed 100%
        -:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       22:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       22:  216:  if (state->deckCount[player] < 1)
branch  0 taken 36%
branch  1 taken 64%
        8:  217:    return -1;
       14:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      308:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      140:  222:    card = floor(Random() * state->deckCount[player]);
      140:  223:    newDeck[newDeckPos] = state->deck[player][card];
      140:  224:    newDeckPos++;
      974:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      347:  226:      state->deck[player][i] = state->deck[player][i+1];
      347:  227:    }
      140:  228:    state->deckCount[player]--;
        -:  229:  }
      308:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      140:  231:    state->deck[player][i] = newDeck[i];
      140:  232:    state->deckCount[player]++;
      140:  233:  }
        -:  234:
       14:  235:  return 0;
       22:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
        -:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
    #####:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
        -:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
    #####:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
function handCard called 5 returned 100% blocks executed 100%
        -:  322:int handCard(int handPos, struct gameState *state) {
        5:  323:  int currentPlayer = whoseTurn(state);
        5:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 18 returned 100% blocks executed 100%
        -:  327:int supplyCount(int card, struct gameState *state) {
       18:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 45005 returned 100% blocks executed 100%
        -:  353:int whoseTurn(struct gameState *state) {
    45005:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 0 returned 0% blocks executed 0%
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
    #####:  414:	}
    #####:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
    #####:  422:}
        -:  423:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
        -:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
    #####:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
    #####:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
    #####:  491:	}
    #####:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
    #####:  502:	}
    #####:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
    #####:  512:	}
    #####:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
    #####:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
    #####:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 214938 returned 100% blocks executed 75%
        -:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
   214938:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
        8:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  541:      state->deck[player][i] = state->discard[player][i];
    #####:  542:      state->discard[player][i] = -1;
    #####:  543:    }
        -:  544:
        4:  545:    state->deckCount[player] = state->discardCount[player];
        4:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        4:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        4:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        4:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        4:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        4:  566:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        4:  567:      return -1;
        -:  568:
    #####:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  570:    state->deckCount[player]--;
    #####:  571:    state->handCount[player]++;//Increment hand count
    #####:  572:  }
        -:  573:
        -:  574:  else{
   214934:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
   214934:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
   214934:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   214934:  583:    state->deckCount[player]--;
   214934:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
   214934:  587:  return 0;
   214938:  588:}
        -:  589:
function getCost called 0 returned 0% blocks executed 0%
        -:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
    #####:  651:}
        -:  652:
function cardEffect called 45000 returned 100% blocks executed 3%
        -:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
    45000:  660:  int currentPlayer = whoseTurn(state);
    45000:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
    45000:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
    45000:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
    45000:  667:  int z = 0;// this is the counter for the temp hand
    45000:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50%
branch  1 taken 50%
    22351:  669:    nextPlayer = 0;
    22351:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
    45000:  674:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
    15000:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
    15000:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
    #####:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
    #####:  698:	    }
    #####:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
    #####:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
    #####:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
    #####:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
    #####:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
    #####:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
    15000:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    15000:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    15000:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    15000:  835:      discardCard(handPos, currentPlayer, state, 0);
    15000:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
    #####:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  864:		isGameOver(state);
    #####:  865:	      }
    #####:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
    #####:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
    #####:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:	    isGameOver(state);
    #####:  882:	  }
    #####:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
    #####:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
    #####:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  941:			{
    #####:  942:			  drawCard(i, state);
    #####:  943:			}
    #####:  944:		    }
    #####:  945:		}
    #####:  946:	    }
        -:  947:				
    #####:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
    #####:  958:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
    #####:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
    #####:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
    #####:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
    #####:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
    #####: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1019:	  state->coins += 2;
    #####: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
    #####: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
    #####: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1049:	    {
    #####: 1050:	      j++;
    #####: 1051:	    }
    #####: 1052:	}
    #####: 1053:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1070:	    }
    #####: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
    #####: 1086:	    }
    #####: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
    #####: 1137:	}
    #####: 1138:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
    45000: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
function adventurer_effect called 15000 returned 100% blocks executed 100%
        -: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
    15000: 1167:	int drawntreasure = 0;
    15000: 1168:	int z =0; 
        -: 1169:	  
   309836: 1170:	while(drawntreasure<2){
branch  0 taken 90%
branch  1 taken 10%
   139918: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
        4: 1172:			shuffle(currentPlayer, state);
        4: 1173:		}
        -: 1174:	
   139918: 1175:		drawCard(currentPlayer, state);
   139918: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   389897: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 93%
branch  1 taken 7%
branch  2 taken 92%
branch  3 taken 8%
branch  4 taken 8%
branch  5 taken 92%
    30000: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
   109918: 1181:			temphand[z]=cardDrawn;
   109918: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   109918: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
   249836: 1187:	while(z-1>=0){
branch  0 taken 88%
branch  1 taken 12%
   109918: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
   109918: 1189:		z=z-1;
        -: 1190:    }
    15000: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
function smithy_effect called 15000 returned 100% blocks executed 100%
        -: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
   150000: 1198:    for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20%
    60000: 1199:	  drawCard(currentPlayer, state);
    60000: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
    15000: 1203:    discardCard(handPos, currentPlayer, state, 0);
    15000: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
function embargo_effect called 0 returned 0% blocks executed 0%
        -: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
    #####: 1229:}
        -: 1230:
function cutpurse_effect called 0 returned 0% blocks executed 0%
        -: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
    #####: 1256:		}
        -: 1257:					
    #####: 1258:	    }
        -: 1259:				
    #####: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
function seahag_effect called 0 returned 0% blocks executed 0%
        -: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1271:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1277:		}
    #####: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
function discardCard called 30000 returned 100% blocks executed 80%
        -: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
    30000: 1291:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1292:    {
        -: 1293:      //add card to played pile
    30000: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    30000: 1295:      state->playedCardCount++;
    30000: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
    30000: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
    30000: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
    #####: 1306:    }
    30000: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
    #####: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
    30000: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
    30000: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
    30000: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
    30000: 1322:  return 0;
        -: 1323:}
        -: 1324:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1330:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
    #####: 1340:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
    #####: 1344:    }
    #####: 1345:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
    #####: 1349:    }
        -: 1350:  else
        -: 1351:    {
    #####: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
    #####: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
    #####: 1359:  return 0;
    #####: 1360:}
        -: 1361:
function updateCoins called 4 returned 100% blocks executed 85%
        -: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
        4: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
       48: 1370:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1371:    {
       20: 1372:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1373:	{
       16: 1374:	  state->coins += 1;
       16: 1375:	}
        4: 1376:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
    #####: 1379:	}
        4: 1380:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
    #####: 1383:	}	
       20: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
        4: 1387:  state->coins += bonus;
        -: 1388:
        4: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
unittest3.c:
Testing gainCard() to discard pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the discard pile:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
Testing gainCard() to deck pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the deck pile:
		Expected: 10, result: 10
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 11, result: 11
			Assert Passed
Testing gainCard() to hand:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the hand:
		Expected: 15, result: 15
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the function handled an error situation *invalid value*:
			Assert Passed
	This indicates that the function handled and error situation *empty supply pile*:
			Assert Passed
Testing gainCard() to discard pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the discard pile:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
Testing gainCard() to deck pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the deck pile:
		Expected: 10, result: 10
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 11, result: 11
			Assert Passed
Testing gainCard() to hand:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the hand:
		Expected: 15, result: 15
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the function handled an error situation *invalid value*:
			Assert Passed
	This indicates that the function handled and error situation *empty supply pile*:
			Assert Passed
Testing gainCard() to discard pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the discard pile:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
Testing gainCard() to deck pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the deck pile:
		Expected: 10, result: 10
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 11, result: 11
			Assert Passed
Testing gainCard() to hand:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the hand:
		Expected: 15, result: 15
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the function handled an error situation *invalid value*:
			Assert Passed
	This indicates that the function handled and error situation *empty supply pile*:
			Assert Passed
Testing gainCard() to discard pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the discard pile:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
Testing gainCard() to deck pile:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the deck pile:
		Expected: 10, result: 10
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 11, result: 11
			Assert Passed
Testing gainCard() to hand:
	This indicates that the function returned a correct value for success:
			Assert Passed
	This indicates that the supply card was found in the hand:
		Expected: 15, result: 15
			Assert Passed
	This indicates that the supply count has decremented meaning a card has been taken out:
		Expected: 9, result: 9
			Assert Passed
	This indicates that the function handled an error situation *invalid value*:
			Assert Passed
	This indicates that the function handled and error situation *empty supply pile*:
			Assert Passed
FINAL RESULT: All tests passed
File 'unittest3.c'
Lines executed:95.16% of 62
unittest3.c:creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:29.58% of 649
Branches executed:29.02% of 417
Taken at least once:21.58% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
function compare called 420 returned 100% blocks executed 85%
        -:   15:int compare(const void* a, const void* b) {
      420:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   17:    return 1;
      420:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      150:   19:    return -1;
      270:   20:  return 0;
      420:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
        -:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 8 returned 100% blocks executed 94%
        -:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        8:   51:  SelectStream(1);
        8:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
       16:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        8:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
      176:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   65:    {
     1760:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   67:        {
     1520:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
      800:   72:        }
       80:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        8:   80:  if (numPlayers == 2)
branch  0 taken 13%
branch  1 taken 88%
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 10;
        1:   83:    }
        7:   84:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
    #####:   87:    }
        -:   88:  else
        -:   89:    {
        7:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        8:   94:  if (numPlayers == 2)
branch  0 taken 13%
branch  1 taken 88%
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 8;
        1:   97:      state->supplyCount[duchy] = 8;
        1:   98:      state->supplyCount[province] = 8;
        1:   99:    }
        -:  100:  else
        -:  101:    {
        7:  102:      state->supplyCount[estate] = 12;
        7:  103:      state->supplyCount[duchy] = 12;
        7:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        8:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  109:  state->supplyCount[silver] = 40;
        8:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      336:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  114:    {
     2640:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  116:	{
     1240:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
      152:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  121:		{
       16:  122:		  if (numPlayers == 2){ 
branch  0 taken 13%
branch  1 taken 88%
        2:  123:		    state->supplyCount[i] = 8; 
        2:  124:		  }
       14:  125:		  else{ state->supplyCount[i] = 12; }
       16:  126:		}
        -:  127:	      else
        -:  128:		{
       64:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       80:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     1160:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
     1160:  137:	}
        -:  138:
      160:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       76:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  146:    {
       30:  147:      state->deckCount[i] = 0;
      240:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  149:	{
       90:  150:	  state->deck[i][j] = estate;
       90:  151:	  state->deckCount[i]++;
       90:  152:	}
      480:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  154:	{
      210:  155:	  state->deck[i][j] = copper;
      210:  156:	  state->deckCount[i]++;		
      210:  157:	}
       30:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       76:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  162:    {
       30:  163:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
       30:  167:    }
        -:  168:
        -:  169:  //draw player hands
       76:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       30:  173:      state->handCount[i] = 0;
       30:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
       30:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      448:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  184:    {
      216:  185:      state->embargoTokens[i] = 0;
      216:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        8:  189:  state->outpostPlayed = 0;
        8:  190:  state->phase = 0;
        8:  191:  state->numActions = 1;
        8:  192:  state->numBuys = 1;
        8:  193:  state->playedCardCount = 0;
        8:  194:  state->whoseTurn = 0;
        8:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       96:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       40:  200:    drawCard(state->whoseTurn, state);
       40:  201:  }
        -:  202:
        8:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        8:  205:  return 0;
        8:  206:}
        -:  207:
function shuffle called 38 returned 100% blocks executed 100%
        -:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       38:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       38:  216:  if (state->deckCount[player] < 1)
branch  0 taken 21%
branch  1 taken 79%
        8:  217:    return -1;
       30:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      660:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      300:  222:    card = floor(Random() * state->deckCount[player]);
      300:  223:    newDeck[newDeckPos] = state->deck[player][card];
      300:  224:    newDeckPos++;
     2086:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      743:  226:      state->deck[player][i] = state->deck[player][i+1];
      743:  227:    }
      300:  228:    state->deckCount[player]--;
        -:  229:  }
      660:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      300:  231:    state->deck[player][i] = newDeck[i];
      300:  232:    state->deckCount[player]++;
      300:  233:  }
        -:  234:
       30:  235:  return 0;
       38:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
        -:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
    #####:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
        -:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
    #####:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
function handCard called 5 returned 100% blocks executed 100%
        -:  322:int handCard(int handPos, struct gameState *state) {
        5:  323:  int currentPlayer = whoseTurn(state);
        5:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 74 returned 100% blocks executed 100%
        -:  327:int supplyCount(int card, struct gameState *state) {
       74:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 45005 returned 100% blocks executed 100%
        -:  353:int whoseTurn(struct gameState *state) {
    45005:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 0 returned 0% blocks executed 0%
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
    #####:  414:	}
    #####:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
    #####:  422:}
        -:  423:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
        -:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
    #####:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
    #####:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
    #####:  491:	}
    #####:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
    #####:  502:	}
    #####:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
    #####:  512:	}
    #####:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
    #####:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
    #####:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 214958 returned 100% blocks executed 75%
        -:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
   214958:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
        8:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  541:      state->deck[player][i] = state->discard[player][i];
    #####:  542:      state->discard[player][i] = -1;
    #####:  543:    }
        -:  544:
        4:  545:    state->deckCount[player] = state->discardCount[player];
        4:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        4:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        4:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        4:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        4:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        4:  566:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        4:  567:      return -1;
        -:  568:
    #####:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  570:    state->deckCount[player]--;
    #####:  571:    state->handCount[player]++;//Increment hand count
    #####:  572:  }
        -:  573:
        -:  574:  else{
   214954:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
   214954:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
   214954:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   214954:  583:    state->deckCount[player]--;
   214954:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
   214954:  587:  return 0;
   214958:  588:}
        -:  589:
function getCost called 0 returned 0% blocks executed 0%
        -:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
    #####:  651:}
        -:  652:
function cardEffect called 45000 returned 100% blocks executed 3%
        -:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
    45000:  660:  int currentPlayer = whoseTurn(state);
    45000:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
    45000:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
    45000:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
    45000:  667:  int z = 0;// this is the counter for the temp hand
    45000:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50%
branch  1 taken 50%
    22351:  669:    nextPlayer = 0;
    22351:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
    45000:  674:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
    15000:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
    15000:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
    #####:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
    #####:  698:	    }
    #####:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
    #####:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
    #####:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
    #####:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
    #####:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
    #####:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
    15000:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    15000:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    15000:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    15000:  835:      discardCard(handPos, currentPlayer, state, 0);
    15000:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
    #####:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  864:		isGameOver(state);
    #####:  865:	      }
    #####:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
    #####:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
    #####:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:	    isGameOver(state);
    #####:  882:	  }
    #####:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
    #####:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
    #####:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  941:			{
    #####:  942:			  drawCard(i, state);
    #####:  943:			}
    #####:  944:		    }
    #####:  945:		}
    #####:  946:	    }
        -:  947:				
    #####:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
    #####:  958:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
    #####:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
    #####:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
    #####:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
    #####:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
    #####: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1019:	  state->coins += 2;
    #####: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
    #####: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
    #####: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1049:	    {
    #####: 1050:	      j++;
    #####: 1051:	    }
    #####: 1052:	}
    #####: 1053:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1070:	    }
    #####: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
    #####: 1086:	    }
    #####: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
    #####: 1137:	}
    #####: 1138:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
    45000: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
function adventurer_effect called 15000 returned 100% blocks executed 100%
        -: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
    15000: 1167:	int drawntreasure = 0;
    15000: 1168:	int z =0; 
        -: 1169:	  
   309836: 1170:	while(drawntreasure<2){
branch  0 taken 90%
branch  1 taken 10%
   139918: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
        4: 1172:			shuffle(currentPlayer, state);
        4: 1173:		}
        -: 1174:	
   139918: 1175:		drawCard(currentPlayer, state);
   139918: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   389897: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 93%
branch  1 taken 7%
branch  2 taken 92%
branch  3 taken 8%
branch  4 taken 8%
branch  5 taken 92%
    30000: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
   109918: 1181:			temphand[z]=cardDrawn;
   109918: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   109918: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
   249836: 1187:	while(z-1>=0){
branch  0 taken 88%
branch  1 taken 12%
   109918: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
   109918: 1189:		z=z-1;
        -: 1190:    }
    15000: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
function smithy_effect called 15000 returned 100% blocks executed 100%
        -: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
   150000: 1198:    for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20%
    60000: 1199:	  drawCard(currentPlayer, state);
    60000: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
    15000: 1203:    discardCard(handPos, currentPlayer, state, 0);
    15000: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
function embargo_effect called 0 returned 0% blocks executed 0%
        -: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
    #####: 1229:}
        -: 1230:
function cutpurse_effect called 0 returned 0% blocks executed 0%
        -: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
    #####: 1256:		}
        -: 1257:					
    #####: 1258:	    }
        -: 1259:				
    #####: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
function seahag_effect called 0 returned 0% blocks executed 0%
        -: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1271:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1277:		}
    #####: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
function discardCard called 30000 returned 100% blocks executed 80%
        -: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
    30000: 1291:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1292:    {
        -: 1293:      //add card to played pile
    30000: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    30000: 1295:      state->playedCardCount++;
    30000: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
    30000: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
    30000: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
    #####: 1306:    }
    30000: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
    #####: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
    30000: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
    30000: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
    30000: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
    30000: 1322:  return 0;
        -: 1323:}
        -: 1324:
function gainCard called 20 returned 100% blocks executed 100%
        -: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1330:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 40%
branch  1 taken 60%
        -: 1331:    {
        8: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
       12: 1340:  if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1341:    {
        4: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1343:      state->deckCount[player]++;
        4: 1344:    }
        8: 1345:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1346:    {
        4: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1348:      state->handCount[player]++;
        4: 1349:    }
        -: 1350:  else
        -: 1351:    {
        4: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
       12: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
       12: 1359:  return 0;
       20: 1360:}
        -: 1361:
function updateCoins called 8 returned 100% blocks executed 85%
        -: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
        8: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
       96: 1370:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1371:    {
       40: 1372:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1373:	{
       32: 1374:	  state->coins += 1;
       32: 1375:	}
        8: 1376:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
    #####: 1379:	}
        8: 1380:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
    #####: 1383:	}	
       40: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
        8: 1387:  state->coins += bonus;
        -: 1388:
        8: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
unittest4.c:
Testing discardCard() with a full hand:
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
	testing discardCard() [TO PLAYED] player 0 with hand position 4:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 0 with hand position 4:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 0 with hand position 3:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 0 with hand position 3:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 0 with hand position 2:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 0 with hand position 2:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 0 with hand position 1:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 0 with hand position 1:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 0 with hand position 0:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 0 with hand position 0:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
	testing discardCard() [TO PLAYED] player 1 with hand position 4:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 1 with hand position 4:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 1 with hand position 3:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 1 with hand position 3:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 1 with hand position 2:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 1 with hand position 2:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 1 with hand position 1:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 1 with hand position 1:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 1 with hand position 0:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 1 with hand position 0:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
	testing discardCard() [TO PLAYED] player 2 with hand position 4:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 2 with hand position 4:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 2 with hand position 3:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 2 with hand position 3:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 2 with hand position 2:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 2 with hand position 2:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 2 with hand position 1:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 2 with hand position 1:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 2 with hand position 0:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 2 with hand position 0:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
This is what's in the hand: 4
	testing discardCard() [TO PLAYED] player 3 with hand position 4:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 3 with hand position 4:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 3 with hand position 3:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 3 with hand position 3:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 3 with hand position 2:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 3 with hand position 2:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 3 with hand position 1:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 3 with hand position 1:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

	testing discardCard() [TO PLAYED] player 3 with hand position 0:
		Checking that the card was played:
			***Assert Passed***

		Checking that the newly played card is copper:
			Expected: 4, result: 4			***Assert Passed***

		Checking that the card was removed from the hand:
			***Assert Passed***

	testing discardCard() [TO TRASH] player 3 with hand position 0:
		Testing that the card was removed from the hand:
			***Assert Passed***

		Testing that the card was not played:
			***Assert Passed***

FINAL RESULT: All tests passed
File 'unittest4.c'
Lines executed:94.12% of 51
unittest4.c:creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:29.89% of 649
Branches executed:29.02% of 417
Taken at least once:22.06% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
function compare called 476 returned 100% blocks executed 85%
        -:   15:int compare(const void* a, const void* b) {
      476:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   17:    return 1;
      476:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      170:   19:    return -1;
      306:   20:  return 0;
      476:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
        -:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 9 returned 100% blocks executed 94%
        -:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        9:   51:  SelectStream(1);
        9:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
       18:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        9:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
      198:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   65:    {
     1980:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   67:        {
     1710:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
      900:   72:        }
       90:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        9:   80:  if (numPlayers == 2)
branch  0 taken 11%
branch  1 taken 89%
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 10;
        1:   83:    }
        8:   84:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
    #####:   87:    }
        -:   88:  else
        -:   89:    {
        8:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        9:   94:  if (numPlayers == 2)
branch  0 taken 11%
branch  1 taken 89%
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 8;
        1:   97:      state->supplyCount[duchy] = 8;
        1:   98:      state->supplyCount[province] = 8;
        1:   99:    }
        -:  100:  else
        -:  101:    {
        8:  102:      state->supplyCount[estate] = 12;
        8:  103:      state->supplyCount[duchy] = 12;
        8:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        9:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  109:  state->supplyCount[silver] = 40;
        9:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      378:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  114:    {
     2970:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  116:	{
     1395:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
      171:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  121:		{
       18:  122:		  if (numPlayers == 2){ 
branch  0 taken 11%
branch  1 taken 89%
        2:  123:		    state->supplyCount[i] = 8; 
        2:  124:		  }
       16:  125:		  else{ state->supplyCount[i] = 12; }
       18:  126:		}
        -:  127:	      else
        -:  128:		{
       72:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       90:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     1305:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
     1305:  137:	}
        -:  138:
      180:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       86:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  146:    {
       34:  147:      state->deckCount[i] = 0;
      272:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  149:	{
      102:  150:	  state->deck[i][j] = estate;
      102:  151:	  state->deckCount[i]++;
      102:  152:	}
      544:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  154:	{
      238:  155:	  state->deck[i][j] = copper;
      238:  156:	  state->deckCount[i]++;		
      238:  157:	}
       34:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       86:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  162:    {
       34:  163:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
       34:  167:    }
        -:  168:
        -:  169:  //draw player hands
       86:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       34:  173:      state->handCount[i] = 0;
       34:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
       34:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      504:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  184:    {
      243:  185:      state->embargoTokens[i] = 0;
      243:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        9:  189:  state->outpostPlayed = 0;
        9:  190:  state->phase = 0;
        9:  191:  state->numActions = 1;
        9:  192:  state->numBuys = 1;
        9:  193:  state->playedCardCount = 0;
        9:  194:  state->whoseTurn = 0;
        9:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
      108:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       45:  200:    drawCard(state->whoseTurn, state);
       45:  201:  }
        -:  202:
        9:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        9:  205:  return 0;
        9:  206:}
        -:  207:
function shuffle called 42 returned 100% blocks executed 100%
        -:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       42:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       42:  216:  if (state->deckCount[player] < 1)
branch  0 taken 19%
branch  1 taken 81%
        8:  217:    return -1;
       34:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      748:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      340:  222:    card = floor(Random() * state->deckCount[player]);
      340:  223:    newDeck[newDeckPos] = state->deck[player][card];
      340:  224:    newDeckPos++;
     2364:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      842:  226:      state->deck[player][i] = state->deck[player][i+1];
      842:  227:    }
      340:  228:    state->deckCount[player]--;
        -:  229:  }
      748:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      340:  231:    state->deck[player][i] = newDeck[i];
      340:  232:    state->deckCount[player]++;
      340:  233:  }
        -:  234:
       34:  235:  return 0;
       42:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
        -:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
    #####:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
        -:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
    #####:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
function handCard called 5 returned 100% blocks executed 100%
        -:  322:int handCard(int handPos, struct gameState *state) {
        5:  323:  int currentPlayer = whoseTurn(state);
        5:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 74 returned 100% blocks executed 100%
        -:  327:int supplyCount(int card, struct gameState *state) {
       74:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 45005 returned 100% blocks executed 100%
        -:  353:int whoseTurn(struct gameState *state) {
    45005:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 0 returned 0% blocks executed 0%
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
    #####:  414:	}
    #####:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
    #####:  422:}
        -:  423:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
        -:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
    #####:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
    #####:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
    #####:  491:	}
    #####:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
    #####:  502:	}
    #####:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
    #####:  512:	}
    #####:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
    #####:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
    #####:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 214963 returned 100% blocks executed 75%
        -:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
   214963:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
        8:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  541:      state->deck[player][i] = state->discard[player][i];
    #####:  542:      state->discard[player][i] = -1;
    #####:  543:    }
        -:  544:
        4:  545:    state->deckCount[player] = state->discardCount[player];
        4:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        4:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        4:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        4:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        4:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        4:  566:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        4:  567:      return -1;
        -:  568:
    #####:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  570:    state->deckCount[player]--;
    #####:  571:    state->handCount[player]++;//Increment hand count
    #####:  572:  }
        -:  573:
        -:  574:  else{
   214959:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
   214959:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
   214959:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   214959:  583:    state->deckCount[player]--;
   214959:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
   214959:  587:  return 0;
   214963:  588:}
        -:  589:
function getCost called 0 returned 0% blocks executed 0%
        -:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
    #####:  651:}
        -:  652:
function cardEffect called 45000 returned 100% blocks executed 3%
        -:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
    45000:  660:  int currentPlayer = whoseTurn(state);
    45000:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
    45000:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
    45000:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
    45000:  667:  int z = 0;// this is the counter for the temp hand
    45000:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50%
branch  1 taken 50%
    22351:  669:    nextPlayer = 0;
    22351:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
    45000:  674:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
    15000:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
    15000:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
    #####:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
    #####:  698:	    }
    #####:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
    #####:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
    #####:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
    #####:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
    #####:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
    #####:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
    15000:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    15000:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    15000:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    15000:  835:      discardCard(handPos, currentPlayer, state, 0);
    15000:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
    #####:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  864:		isGameOver(state);
    #####:  865:	      }
    #####:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
    #####:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
    #####:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:	    isGameOver(state);
    #####:  882:	  }
    #####:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
    #####:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
    #####:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  941:			{
    #####:  942:			  drawCard(i, state);
    #####:  943:			}
    #####:  944:		    }
    #####:  945:		}
    #####:  946:	    }
        -:  947:				
    #####:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
    #####:  958:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
    #####:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
    #####:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
    #####:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
    #####:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
    #####: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1019:	  state->coins += 2;
    #####: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
    #####: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
    #####: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1049:	    {
    #####: 1050:	      j++;
    #####: 1051:	    }
    #####: 1052:	}
    #####: 1053:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1070:	    }
    #####: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
    #####: 1086:	    }
    #####: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
    #####: 1137:	}
    #####: 1138:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
    45000: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
function adventurer_effect called 15000 returned 100% blocks executed 100%
        -: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
    15000: 1167:	int drawntreasure = 0;
    15000: 1168:	int z =0; 
        -: 1169:	  
   309836: 1170:	while(drawntreasure<2){
branch  0 taken 90%
branch  1 taken 10%
   139918: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
        4: 1172:			shuffle(currentPlayer, state);
        4: 1173:		}
        -: 1174:	
   139918: 1175:		drawCard(currentPlayer, state);
   139918: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   389897: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 93%
branch  1 taken 7%
branch  2 taken 92%
branch  3 taken 8%
branch  4 taken 8%
branch  5 taken 92%
    30000: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
   109918: 1181:			temphand[z]=cardDrawn;
   109918: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   109918: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
   249836: 1187:	while(z-1>=0){
branch  0 taken 88%
branch  1 taken 12%
   109918: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
   109918: 1189:		z=z-1;
        -: 1190:    }
    15000: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
function smithy_effect called 15000 returned 100% blocks executed 100%
        -: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
   150000: 1198:    for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20%
    60000: 1199:	  drawCard(currentPlayer, state);
    60000: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
    15000: 1203:    discardCard(handPos, currentPlayer, state, 0);
    15000: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
function embargo_effect called 0 returned 0% blocks executed 0%
        -: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
    #####: 1229:}
        -: 1230:
function cutpurse_effect called 0 returned 0% blocks executed 0%
        -: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
    #####: 1256:		}
        -: 1257:					
    #####: 1258:	    }
        -: 1259:				
    #####: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
function seahag_effect called 0 returned 0% blocks executed 0%
        -: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1271:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1277:		}
    #####: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
function discardCard called 30040 returned 100% blocks executed 90%
        -: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
    30040: 1291:  if (trashFlag < 1)
branch  0 taken 99%
branch  1 taken 1%
        -: 1292:    {
        -: 1293:      //add card to played pile
    30020: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    30020: 1295:      state->playedCardCount++;
    30020: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
    30040: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
    30040: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
       12: 1305:      state->handCount[currentPlayer]--;
       12: 1306:    }
    30028: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
    #####: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
    30028: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
    30028: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
    30028: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
    30040: 1322:  return 0;
        -: 1323:}
        -: 1324:
function gainCard called 20 returned 100% blocks executed 100%
        -: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1330:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 40%
branch  1 taken 60%
        -: 1331:    {
        8: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
       12: 1340:  if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1341:    {
        4: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1343:      state->deckCount[player]++;
        4: 1344:    }
        8: 1345:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1346:    {
        4: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1348:      state->handCount[player]++;
        4: 1349:    }
        -: 1350:  else
        -: 1351:    {
        4: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
       12: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
       12: 1359:  return 0;
       20: 1360:}
        -: 1361:
function updateCoins called 9 returned 100% blocks executed 85%
        -: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
        9: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
      108: 1370:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1371:    {
       45: 1372:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1373:	{
       36: 1374:	  state->coins += 1;
       36: 1375:	}
        9: 1376:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
    #####: 1379:	}
        9: 1380:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
    #####: 1383:	}	
       45: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
        9: 1387:  state->coins += bonus;
        -: 1388:
        9: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
cardtest1.c:
Testing the smithy card:
	Testing for PLAYER 0:
playedCounter = 0
		Checking that three cards were added to the hand and smithy was removed:
			Expected: 7, result: 8
			***Assert failed, total fails***: 1

		Checking that smithy was added to the played pile:
			Expected: 13, result: 13
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing for PLAYER 1:
playedCounter = 0
		Checking that three cards were added to the hand and smithy was removed:
			Expected: 7, result: 8
			***Assert failed, total fails***: 2

		Checking that smithy was added to the played pile:
			Expected: 13, result: 13
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Checking player 0's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing for PLAYER 2:
playedCounter = 0
		Checking that three cards were added to the hand and smithy was removed:
			Expected: 7, result: 8
			***Assert failed, total fails***: 3

		Checking that smithy was added to the played pile:
			Expected: 13, result: 13
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Checking player 0's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing for PLAYER 3:
playedCounter = 0
		Checking that three cards were added to the hand and smithy was removed:
			Expected: 7, result: 8
			***Assert failed, total fails***: 4

		Checking that smithy was added to the played pile:
			Expected: 13, result: 13
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Checking player 0's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

FINAL RESULT: 4 FAILURES
File 'cardtest1.c'
Lines executed:92.42% of 66
cardtest1.c:creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:34.36% of 649
Branches executed:30.46% of 417
Taken at least once:23.98% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
function compare called 543 returned 100% blocks executed 85%
        -:   15:int compare(const void* a, const void* b) {
      543:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   17:    return 1;
      543:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      194:   19:    return -1;
      349:   20:  return 0;
      543:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
        -:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 10 returned 100% blocks executed 94%
        -:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
       10:   51:  SelectStream(1);
       10:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
       20:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
       10:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
      220:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   65:    {
     2200:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   67:        {
     1900:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
     1000:   72:        }
      100:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
       10:   80:  if (numPlayers == 2)
branch  0 taken 10%
branch  1 taken 90%
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 10;
        1:   83:    }
        9:   84:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
    #####:   87:    }
        -:   88:  else
        -:   89:    {
        9:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
       10:   94:  if (numPlayers == 2)
branch  0 taken 10%
branch  1 taken 90%
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 8;
        1:   97:      state->supplyCount[duchy] = 8;
        1:   98:      state->supplyCount[province] = 8;
        1:   99:    }
        -:  100:  else
        -:  101:    {
        9:  102:      state->supplyCount[estate] = 12;
        9:  103:      state->supplyCount[duchy] = 12;
        9:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
       10:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  109:  state->supplyCount[silver] = 40;
       10:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      420:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  114:    {
     3300:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  116:	{
     1550:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
      190:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  121:		{
       20:  122:		  if (numPlayers == 2){ 
branch  0 taken 10%
branch  1 taken 90%
        2:  123:		    state->supplyCount[i] = 8; 
        2:  124:		  }
       18:  125:		  else{ state->supplyCount[i] = 12; }
       20:  126:		}
        -:  127:	      else
        -:  128:		{
       80:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
      100:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     1450:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
     1450:  137:	}
        -:  138:
      200:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       96:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  146:    {
       38:  147:      state->deckCount[i] = 0;
      304:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  149:	{
      114:  150:	  state->deck[i][j] = estate;
      114:  151:	  state->deckCount[i]++;
      114:  152:	}
      608:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  154:	{
      266:  155:	  state->deck[i][j] = copper;
      266:  156:	  state->deckCount[i]++;		
      266:  157:	}
       38:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       96:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  162:    {
       38:  163:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
       38:  167:    }
        -:  168:
        -:  169:  //draw player hands
       96:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       38:  173:      state->handCount[i] = 0;
       38:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
       38:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      560:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  184:    {
      270:  185:      state->embargoTokens[i] = 0;
      270:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
       10:  189:  state->outpostPlayed = 0;
       10:  190:  state->phase = 0;
       10:  191:  state->numActions = 1;
       10:  192:  state->numBuys = 1;
       10:  193:  state->playedCardCount = 0;
       10:  194:  state->whoseTurn = 0;
       10:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
      120:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       50:  200:    drawCard(state->whoseTurn, state);
       50:  201:  }
        -:  202:
       10:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
       10:  205:  return 0;
       10:  206:}
        -:  207:
function shuffle called 47 returned 100% blocks executed 100%
        -:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       47:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       47:  216:  if (state->deckCount[player] < 1)
branch  0 taken 17%
branch  1 taken 83%
        8:  217:    return -1;
       39:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      854:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      388:  222:    card = floor(Random() * state->deckCount[player]);
      388:  223:    newDeck[newDeckPos] = state->deck[player][card];
      388:  224:    newDeckPos++;
     2684:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      954:  226:      state->deck[player][i] = state->deck[player][i+1];
      954:  227:    }
      388:  228:    state->deckCount[player]--;
        -:  229:  }
      854:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      388:  231:    state->deck[player][i] = newDeck[i];
      388:  232:    state->deckCount[player]++;
      388:  233:  }
        -:  234:
       39:  235:  return 0;
       47:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
        -:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
    #####:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
        -:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
    #####:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
function handCard called 5 returned 100% blocks executed 100%
        -:  322:int handCard(int handPos, struct gameState *state) {
        5:  323:  int currentPlayer = whoseTurn(state);
        5:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 74 returned 100% blocks executed 100%
        -:  327:int supplyCount(int card, struct gameState *state) {
       74:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 45013 returned 100% blocks executed 100%
        -:  353:int whoseTurn(struct gameState *state) {
    45013:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 4 returned 100% blocks executed 100%
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
        4:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
       72:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 89%
branch  1 taken 11%
       32:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       32:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
       32:  366:  }
        4:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
        4:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75%
branch  1 taken 25%
        3:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        3:  372:  }
        -:  373:  else{
        1:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
        4:  377:  state->outpostPlayed = 0;
        4:  378:  state->phase = 0;
        4:  379:  state->numActions = 1;
        4:  380:  state->coins = 0;
        4:  381:  state->numBuys = 1;
        4:  382:  state->playedCardCount = 0;
        4:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       48:  387:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       20:  388:    drawCard(state->whoseTurn, state);//Draw a card
       20:  389:  }
        -:  390:
        -:  391:  //Update money
        4:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
        4:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
    #####:  414:	}
    #####:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
    #####:  422:}
        -:  423:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
        -:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
    #####:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
    #####:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
    #####:  491:	}
    #####:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
    #####:  502:	}
    #####:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
    #####:  512:	}
    #####:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
    #####:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
    #####:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 215004 returned 100% blocks executed 100%
        -:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
   215004:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
       26:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 62%
branch  1 taken 38%
        8:  541:      state->deck[player][i] = state->discard[player][i];
        8:  542:      state->discard[player][i] = -1;
        8:  543:    }
        -:  544:
        5:  545:    state->deckCount[player] = state->discardCount[player];
        5:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        5:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        5:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        5:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        5:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        5:  566:    if (deckCounter == 0)
branch  0 taken 80%
branch  1 taken 20%
        4:  567:      return -1;
        -:  568:
        1:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  570:    state->deckCount[player]--;
        1:  571:    state->handCount[player]++;//Increment hand count
        1:  572:  }
        -:  573:
        -:  574:  else{
   214999:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
   214999:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
   214999:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   214999:  583:    state->deckCount[player]--;
   214999:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
   215000:  587:  return 0;
   215004:  588:}
        -:  589:
function getCost called 0 returned 0% blocks executed 0%
        -:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
    #####:  651:}
        -:  652:
function cardEffect called 45004 returned 100% blocks executed 3%
        -:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
    45004:  660:  int currentPlayer = whoseTurn(state);
    45004:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
    45004:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
    45004:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
    45004:  667:  int z = 0;// this is the counter for the temp hand
    45004:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50%
branch  1 taken 50%
    22352:  669:    nextPlayer = 0;
    22352:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
    45004:  674:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
    15000:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
    15000:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
    #####:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
    #####:  698:	    }
    #####:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
    #####:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
    #####:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
    #####:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
    #####:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
    #####:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
    15004:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    15000:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    15000:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    15000:  835:      discardCard(handPos, currentPlayer, state, 0);
    15000:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
    #####:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  864:		isGameOver(state);
    #####:  865:	      }
    #####:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
    #####:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
    #####:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:	    isGameOver(state);
    #####:  882:	  }
    #####:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
    #####:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
    #####:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  941:			{
    #####:  942:			  drawCard(i, state);
    #####:  943:			}
    #####:  944:		    }
    #####:  945:		}
    #####:  946:	    }
        -:  947:				
    #####:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
    #####:  958:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
    #####:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
    #####:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
    #####:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
    #####:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
    #####: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1019:	  state->coins += 2;
    #####: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
    #####: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
    #####: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1049:	    {
    #####: 1050:	      j++;
    #####: 1051:	    }
    #####: 1052:	}
    #####: 1053:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1070:	    }
    #####: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
    #####: 1086:	    }
    #####: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
    #####: 1137:	}
    #####: 1138:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
    45004: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
function adventurer_effect called 15000 returned 100% blocks executed 100%
        -: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
    15000: 1167:	int drawntreasure = 0;
    15000: 1168:	int z =0; 
        -: 1169:	  
   309836: 1170:	while(drawntreasure<2){
branch  0 taken 90%
branch  1 taken 10%
   139918: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
        4: 1172:			shuffle(currentPlayer, state);
        4: 1173:		}
        -: 1174:	
   139918: 1175:		drawCard(currentPlayer, state);
   139918: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   389897: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 93%
branch  1 taken 7%
branch  2 taken 92%
branch  3 taken 8%
branch  4 taken 8%
branch  5 taken 92%
    30000: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
   109918: 1181:			temphand[z]=cardDrawn;
   109918: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   109918: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
   249836: 1187:	while(z-1>=0){
branch  0 taken 88%
branch  1 taken 12%
   109918: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
   109918: 1189:		z=z-1;
        -: 1190:    }
    15000: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
function smithy_effect called 15004 returned 100% blocks executed 100%
        -: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
   150040: 1198:    for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20%
    60016: 1199:	  drawCard(currentPlayer, state);
    60016: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
    15004: 1203:    discardCard(handPos, currentPlayer, state, 0);
    15004: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
function embargo_effect called 0 returned 0% blocks executed 0%
        -: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
    #####: 1229:}
        -: 1230:
function cutpurse_effect called 0 returned 0% blocks executed 0%
        -: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
    #####: 1256:		}
        -: 1257:					
    #####: 1258:	    }
        -: 1259:				
    #####: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
function seahag_effect called 0 returned 0% blocks executed 0%
        -: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1271:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1277:		}
    #####: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
function discardCard called 30044 returned 100% blocks executed 90%
        -: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
    30044: 1291:  if (trashFlag < 1)
branch  0 taken 99%
branch  1 taken 1%
        -: 1292:    {
        -: 1293:      //add card to played pile
    30024: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    30024: 1295:      state->playedCardCount++;
    30024: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
    30044: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
    30044: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
       12: 1305:      state->handCount[currentPlayer]--;
       12: 1306:    }
    30032: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
    #####: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
    30032: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
    30032: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
    30032: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
    30044: 1322:  return 0;
        -: 1323:}
        -: 1324:
function gainCard called 20 returned 100% blocks executed 100%
        -: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1330:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 40%
branch  1 taken 60%
        -: 1331:    {
        8: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
       12: 1340:  if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1341:    {
        4: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1343:      state->deckCount[player]++;
        4: 1344:    }
        8: 1345:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1346:    {
        4: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1348:      state->handCount[player]++;
        4: 1349:    }
        -: 1350:  else
        -: 1351:    {
        4: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
       12: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
       12: 1359:  return 0;
       20: 1360:}
        -: 1361:
function updateCoins called 14 returned 100% blocks executed 85%
        -: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       14: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
      168: 1370:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1371:    {
       70: 1372:      if (state->hand[player][i] == copper)
branch  0 taken 76%
branch  1 taken 24%
        -: 1373:	{
       53: 1374:	  state->coins += 1;
       53: 1375:	}
       17: 1376:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
    #####: 1379:	}
       17: 1380:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
    #####: 1383:	}	
       70: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       14: 1387:  state->coins += bonus;
        -: 1388:
       14: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
cardtest2.c:
Testing the adventurer card:
Testing for player 0
	Testing adventurer with two treasures at top of deck:
		Checking to see if two cards were added to the hand:
			Expected: 7, result: 7			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 5 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 6 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that no cards were discarded, since coppers were at top:
			Expected: 0 results: 0
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 1

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing adventurer with two treasures at the middle of deck:
		Checking to see if two cards were added to the hand:
			Expected: 9, result: 9			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 7 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 8 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that three estate cards were discarded:
			Expected: 3 results: 3
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 2

	Testing adventurer with an empty deck.
		Checking to see if two cards were added to the hand:
			Expected: 11, result: 11
			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 9 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 10 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 3

	Testing adventurer with 1 copper in deck and the rest in discard pile
		Checking to see if two cards were added to the hand:
			Expected: 13, result: 13			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 11 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 12 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 4

Testing for player 1
	Testing adventurer with two treasures at top of deck:
		Checking to see if two cards were added to the hand:
			Expected: 7, result: 7			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 5 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 6 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that no cards were discarded, since coppers were at top:
			Expected: 0 results: 0
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 5

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 0's discard:
			Expected: -285069072, Result: -285069072
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing adventurer with two treasures at the middle of deck:
		Checking to see if two cards were added to the hand:
			Expected: 9, result: 9			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 7 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 8 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that three estate cards were discarded:
			Expected: 3 results: 3
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 6

	Testing adventurer with an empty deck.
		Checking to see if two cards were added to the hand:
			Expected: 11, result: 11
			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 9 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 10 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 7

	Testing adventurer with 1 copper in deck and the rest in discard pile
		Checking to see if two cards were added to the hand:
			Expected: 13, result: 13			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 11 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 12 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 8

Testing for player 2
	Testing adventurer with two treasures at top of deck:
		Checking to see if two cards were added to the hand:
			Expected: 7, result: 7			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 5 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 6 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that no cards were discarded, since coppers were at top:
			Expected: 0 results: 0
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 9

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 0's discard:
			Expected: -285069072, Result: -285069072
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Expected: -285069072, Result: -285069072
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
	Testing adventurer with two treasures at the middle of deck:
		Checking to see if two cards were added to the hand:
			Expected: 9, result: 9			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 7 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 8 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that three estate cards were discarded:
			Expected: 3 results: 3
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 10

	Testing adventurer with an empty deck.
		Checking to see if two cards were added to the hand:
			Expected: 11, result: 11
			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 9 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 10 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 11

	Testing adventurer with 1 copper in deck and the rest in discard pile
		Checking to see if two cards were added to the hand:
			Expected: 13, result: 13			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 11 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 12 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 12

Testing for player 3
	Testing adventurer with two treasures at top of deck:
		Checking to see if two cards were added to the hand:
			Expected: 7, result: 7			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 5 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 6 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that no cards were discarded, since coppers were at top:
			Expected: 0 results: 0
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 0
			***Assert failed, total fails***: 13

		Checking that other player's states were not mutated:
			Checking player 0's hand:
			Checking player 0's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 0's discard:
			Expected: -285069072, Result: -285069072
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Expected: -285069072, Result: -285069072
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 2's discard:
			Expected: -285069072, Result: -285069072
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 1, Result: 1
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

			Expected: 4, Result: 4
			***Assert Passed***

	Testing adventurer with two treasures at the middle of deck:
		Checking to see if two cards were added to the hand:
			Expected: 9, result: 9			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 7 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 8 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that three estate cards were discarded:
			Expected: 3 results: 3
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 3
			***Assert failed, total fails***: 14

	Testing adventurer with an empty deck.
		Checking to see if two cards were added to the hand:
			Expected: 11, result: 11
			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 9 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 10 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 1
			***Assert failed, total fails***: 15

	Testing adventurer with 1 copper in deck and the rest in discard pile
		Checking to see if two cards were added to the hand:
			Expected: 13, result: 13			***Assert Passed***

		Checking to see if the last two cards added were copper:
			Checking index 11 in the hand:  Expected: 4 result: 4
			***Assert Passed***

			Checking index 12 in the hand:  Expected: 4 result: 4
			***Assert Passed***

		Checking to see that adventurer was played into the played pile:
			Expected: 7, results 3
			***Assert failed, total fails***: 16

FINAL RESULT: 16 FAILURES
File 'cardtest2.c'
Lines executed:96.27% of 134
cardtest2.c:creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:34.51% of 649
Branches executed:30.46% of 417
Taken at least once:24.22% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
function compare called 671 returned 100% blocks executed 100%
        -:   15:int compare(const void* a, const void* b) {
      671:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 1%
branch  1 taken 99%
        4:   17:    return 1;
      667:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 34%
branch  1 taken 66%
      226:   19:    return -1;
      441:   20:  return 0;
      671:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
        -:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 11 returned 100% blocks executed 94%
        -:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
       11:   51:  SelectStream(1);
       11:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
       22:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
       11:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
      242:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   65:    {
     2420:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   67:        {
     2090:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
     1100:   72:        }
      110:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
       11:   80:  if (numPlayers == 2)
branch  0 taken 9%
branch  1 taken 91%
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 10;
        1:   83:    }
       10:   84:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
    #####:   87:    }
        -:   88:  else
        -:   89:    {
       10:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
       11:   94:  if (numPlayers == 2)
branch  0 taken 9%
branch  1 taken 91%
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 8;
        1:   97:      state->supplyCount[duchy] = 8;
        1:   98:      state->supplyCount[province] = 8;
        1:   99:    }
        -:  100:  else
        -:  101:    {
       10:  102:      state->supplyCount[estate] = 12;
       10:  103:      state->supplyCount[duchy] = 12;
       10:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
       11:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  109:  state->supplyCount[silver] = 40;
       11:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      462:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  114:    {
     3630:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  116:	{
     1705:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
      209:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  121:		{
       22:  122:		  if (numPlayers == 2){ 
branch  0 taken 9%
branch  1 taken 91%
        2:  123:		    state->supplyCount[i] = 8; 
        2:  124:		  }
       20:  125:		  else{ state->supplyCount[i] = 12; }
       22:  126:		}
        -:  127:	      else
        -:  128:		{
       88:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
      110:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     1595:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
     1595:  137:	}
        -:  138:
      220:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
      106:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  146:    {
       42:  147:      state->deckCount[i] = 0;
      336:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  149:	{
      126:  150:	  state->deck[i][j] = estate;
      126:  151:	  state->deckCount[i]++;
      126:  152:	}
      672:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  154:	{
      294:  155:	  state->deck[i][j] = copper;
      294:  156:	  state->deckCount[i]++;		
      294:  157:	}
       42:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
      106:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  162:    {
       42:  163:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
       42:  167:    }
        -:  168:
        -:  169:  //draw player hands
      106:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       42:  173:      state->handCount[i] = 0;
       42:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
       42:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      616:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  184:    {
      297:  185:      state->embargoTokens[i] = 0;
      297:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
       11:  189:  state->outpostPlayed = 0;
       11:  190:  state->phase = 0;
       11:  191:  state->numActions = 1;
       11:  192:  state->numBuys = 1;
       11:  193:  state->playedCardCount = 0;
       11:  194:  state->whoseTurn = 0;
       11:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
      132:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       55:  200:    drawCard(state->whoseTurn, state);
       55:  201:  }
        -:  202:
       11:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
       11:  205:  return 0;
       11:  206:}
        -:  207:
function shuffle called 67 returned 100% blocks executed 100%
        -:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       67:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       67:  216:  if (state->deckCount[player] < 1)
branch  0 taken 24%
branch  1 taken 76%
       16:  217:    return -1;
       51:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     1086:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      492:  222:    card = floor(Random() * state->deckCount[player]);
      492:  223:    newDeck[newDeckPos] = state->deck[player][card];
      492:  224:    newDeckPos++;
     3300:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
     1158:  226:      state->deck[player][i] = state->deck[player][i+1];
     1158:  227:    }
      492:  228:    state->deckCount[player]--;
        -:  229:  }
     1086:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      492:  231:    state->deck[player][i] = newDeck[i];
      492:  232:    state->deckCount[player]++;
      492:  233:  }
        -:  234:
       51:  235:  return 0;
       67:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
        -:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
    #####:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
        -:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
    #####:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
function handCard called 5 returned 100% blocks executed 100%
        -:  322:int handCard(int handPos, struct gameState *state) {
        5:  323:  int currentPlayer = whoseTurn(state);
        5:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 74 returned 100% blocks executed 100%
        -:  327:int supplyCount(int card, struct gameState *state) {
       74:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 45033 returned 100% blocks executed 100%
        -:  353:int whoseTurn(struct gameState *state) {
    45033:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 8 returned 100% blocks executed 100%
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
        8:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
      184:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9%
       84:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       84:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
       84:  366:  }
        8:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
        8:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75%
branch  1 taken 25%
        6:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        6:  372:  }
        -:  373:  else{
        2:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
        8:  377:  state->outpostPlayed = 0;
        8:  378:  state->phase = 0;
        8:  379:  state->numActions = 1;
        8:  380:  state->coins = 0;
        8:  381:  state->numBuys = 1;
        8:  382:  state->playedCardCount = 0;
        8:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       96:  387:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       40:  388:    drawCard(state->whoseTurn, state);//Draw a card
       40:  389:  }
        -:  390:
        -:  391:  //Update money
        8:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
        8:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
    #####:  414:	}
    #####:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
    #####:  422:}
        -:  423:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
        -:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
    #####:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
    #####:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
    #####:  491:	}
    #####:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
    #####:  502:	}
    #####:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
    #####:  512:	}
    #####:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
    #####:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
    #####:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 215090 returned 100% blocks executed 100%
        -:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
   215090:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
      170:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 85%
branch  1 taken 15%
       72:  541:      state->deck[player][i] = state->discard[player][i];
       72:  542:      state->discard[player][i] = -1;
       72:  543:    }
        -:  544:
       13:  545:    state->deckCount[player] = state->discardCount[player];
       13:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
       13:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
       13:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
       13:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
       13:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
       13:  566:    if (deckCounter == 0)
branch  0 taken 31%
branch  1 taken 69%
        4:  567:      return -1;
        -:  568:
        9:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        9:  570:    state->deckCount[player]--;
        9:  571:    state->handCount[player]++;//Increment hand count
        9:  572:  }
        -:  573:
        -:  574:  else{
   215077:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
   215077:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
   215077:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   215077:  583:    state->deckCount[player]--;
   215077:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
   215086:  587:  return 0;
   215090:  588:}
        -:  589:
function getCost called 0 returned 0% blocks executed 0%
        -:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
    #####:  651:}
        -:  652:
function cardEffect called 45020 returned 100% blocks executed 3%
        -:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
    45020:  660:  int currentPlayer = whoseTurn(state);
    45020:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
    45020:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
    45020:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
    45020:  667:  int z = 0;// this is the counter for the temp hand
    45020:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50%
branch  1 taken 50%
    22356:  669:    nextPlayer = 0;
    22356:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
    45020:  674:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
    15016:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
    15016:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
    #####:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
    #####:  698:	    }
    #####:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
    #####:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
    #####:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
    #####:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
    #####:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
    #####:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
    15004:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    15000:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    15000:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    15000:  835:      discardCard(handPos, currentPlayer, state, 0);
    15000:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
    #####:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  864:		isGameOver(state);
    #####:  865:	      }
    #####:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
    #####:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
    #####:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:	    isGameOver(state);
    #####:  882:	  }
    #####:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
    #####:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
    #####:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  941:			{
    #####:  942:			  drawCard(i, state);
    #####:  943:			}
    #####:  944:		    }
    #####:  945:		}
    #####:  946:	    }
        -:  947:				
    #####:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
    #####:  958:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
    #####:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
    #####:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
    #####:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
    #####:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
    #####: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1019:	  state->coins += 2;
    #####: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
    #####: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
    #####: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1049:	    {
    #####: 1050:	      j++;
    #####: 1051:	    }
    #####: 1052:	}
    #####: 1053:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1070:	    }
    #####: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
    #####: 1086:	    }
    #####: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
    #####: 1137:	}
    #####: 1138:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
    45020: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
function adventurer_effect called 15016 returned 100% blocks executed 100%
        -: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
    15016: 1167:	int drawntreasure = 0;
    15016: 1168:	int z =0; 
        -: 1169:	  
   309990: 1170:	while(drawntreasure<2){
branch  0 taken 90%
branch  1 taken 10%
   139979: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
       12: 1172:			shuffle(currentPlayer, state);
       12: 1173:		}
        -: 1174:	
   139979: 1175:		drawCard(currentPlayer, state);
   139979: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   390016: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 93%
branch  1 taken 7%
branch  2 taken 92%
branch  3 taken 8%
branch  4 taken 8%
branch  5 taken 92%
    30032: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
   109947: 1181:			temphand[z]=cardDrawn;
   109947: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   109947: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
   249926: 1187:	while(z-1>=0){
branch  0 taken 88%
branch  1 taken 12%
   109947: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
   109947: 1189:		z=z-1;
        -: 1190:    }
    15016: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
function smithy_effect called 15004 returned 100% blocks executed 100%
        -: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
   150040: 1198:    for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20%
    60016: 1199:	  drawCard(currentPlayer, state);
    60016: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
    15004: 1203:    discardCard(handPos, currentPlayer, state, 0);
    15004: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
function embargo_effect called 0 returned 0% blocks executed 0%
        -: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
    #####: 1229:}
        -: 1230:
function cutpurse_effect called 0 returned 0% blocks executed 0%
        -: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
    #####: 1256:		}
        -: 1257:					
    #####: 1258:	    }
        -: 1259:				
    #####: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
function seahag_effect called 0 returned 0% blocks executed 0%
        -: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1271:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1277:		}
    #####: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
function discardCard called 30044 returned 100% blocks executed 90%
        -: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
    30044: 1291:  if (trashFlag < 1)
branch  0 taken 99%
branch  1 taken 1%
        -: 1292:    {
        -: 1293:      //add card to played pile
    30024: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    30024: 1295:      state->playedCardCount++;
    30024: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
    30044: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
    30044: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
       12: 1305:      state->handCount[currentPlayer]--;
       12: 1306:    }
    30032: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
    #####: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
    30032: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
    30032: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
    30032: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
    30044: 1322:  return 0;
        -: 1323:}
        -: 1324:
function gainCard called 20 returned 100% blocks executed 100%
        -: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1330:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 40%
branch  1 taken 60%
        -: 1331:    {
        8: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
       12: 1340:  if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1341:    {
        4: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1343:      state->deckCount[player]++;
        4: 1344:    }
        8: 1345:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1346:    {
        4: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1348:      state->handCount[player]++;
        4: 1349:    }
        -: 1350:  else
        -: 1351:    {
        4: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
       12: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
       12: 1359:  return 0;
       20: 1360:}
        -: 1361:
function updateCoins called 19 returned 100% blocks executed 85%
        -: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       19: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
      228: 1370:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1371:    {
       95: 1372:      if (state->hand[player][i] == copper)
branch  0 taken 76%
branch  1 taken 24%
        -: 1373:	{
       72: 1374:	  state->coins += 1;
       72: 1375:	}
       23: 1376:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
    #####: 1379:	}
       23: 1380:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
    #####: 1383:	}	
       95: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       19: 1387:  state->coins += bonus;
        -: 1388:
       19: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
cardtest3.c:
Testing the village card:
	Checking with a regular deck:
		Checking that a card was drawn and added to the hand:
			Expected: 5 result: 5:
			***Assert Passed***

		Checking that two actions were added:
			Expected: 3, result: 3
			***Assert Passed***

		Checking that village was put in the played pile:
			Expected: 14, result: 14
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:

	Checking with an empty deck:
		Checking that a card was drawn and added to the hand:
			Expected: 5 result: 5:
			***Assert Passed***

		Checking that two actions were added:
			Expected: 5, result: 5
			***Assert Passed***

		Checking that village was put in the played pile:
			Expected: 14, result: 14
			***Assert Passed***

FINAL RESULT: All tests passed
File 'cardtest3.c'
Lines executed:89.41% of 85
cardtest3.c:creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:34.51% of 649
Branches executed:30.46% of 417
Taken at least once:24.22% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
function compare called 739 returned 100% blocks executed 100%
        -:   15:int compare(const void* a, const void* b) {
      739:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 1%
branch  1 taken 99%
        4:   17:    return 1;
      735:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 33%
branch  1 taken 67%
      246:   19:    return -1;
      489:   20:  return 0;
      739:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
        -:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 12 returned 100% blocks executed 94%
        -:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
       12:   51:  SelectStream(1);
       12:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
       24:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
       12:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
      264:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   65:    {
     2640:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   67:        {
     2280:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
     1200:   72:        }
      120:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
       12:   80:  if (numPlayers == 2)
branch  0 taken 8%
branch  1 taken 92%
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 10;
        1:   83:    }
       11:   84:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
    #####:   87:    }
        -:   88:  else
        -:   89:    {
       11:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
       12:   94:  if (numPlayers == 2)
branch  0 taken 8%
branch  1 taken 92%
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 8;
        1:   97:      state->supplyCount[duchy] = 8;
        1:   98:      state->supplyCount[province] = 8;
        1:   99:    }
        -:  100:  else
        -:  101:    {
       11:  102:      state->supplyCount[estate] = 12;
       11:  103:      state->supplyCount[duchy] = 12;
       11:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
       12:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  109:  state->supplyCount[silver] = 40;
       12:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      504:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  114:    {
     3960:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  116:	{
     1860:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
      228:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  121:		{
       24:  122:		  if (numPlayers == 2){ 
branch  0 taken 8%
branch  1 taken 92%
        2:  123:		    state->supplyCount[i] = 8; 
        2:  124:		  }
       22:  125:		  else{ state->supplyCount[i] = 12; }
       24:  126:		}
        -:  127:	      else
        -:  128:		{
       96:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
      120:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     1740:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
     1740:  137:	}
        -:  138:
      240:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
      116:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  146:    {
       46:  147:      state->deckCount[i] = 0;
      368:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  149:	{
      138:  150:	  state->deck[i][j] = estate;
      138:  151:	  state->deckCount[i]++;
      138:  152:	}
      736:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  154:	{
      322:  155:	  state->deck[i][j] = copper;
      322:  156:	  state->deckCount[i]++;		
      322:  157:	}
       46:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
      116:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  162:    {
       46:  163:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
       46:  167:    }
        -:  168:
        -:  169:  //draw player hands
      116:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       46:  173:      state->handCount[i] = 0;
       46:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
       46:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      672:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  184:    {
      324:  185:      state->embargoTokens[i] = 0;
      324:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
       12:  189:  state->outpostPlayed = 0;
       12:  190:  state->phase = 0;
       12:  191:  state->numActions = 1;
       12:  192:  state->numBuys = 1;
       12:  193:  state->playedCardCount = 0;
       12:  194:  state->whoseTurn = 0;
       12:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
      144:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       60:  200:    drawCard(state->whoseTurn, state);
       60:  201:  }
        -:  202:
       12:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
       12:  205:  return 0;
       12:  206:}
        -:  207:
function shuffle called 72 returned 100% blocks executed 100%
        -:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       72:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       72:  216:  if (state->deckCount[player] < 1)
branch  0 taken 22%
branch  1 taken 78%
       16:  217:    return -1;
       56:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     1196:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      542:  222:    card = floor(Random() * state->deckCount[player]);
      542:  223:    newDeck[newDeckPos] = state->deck[player][card];
      542:  224:    newDeckPos++;
     3634:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
     1275:  226:      state->deck[player][i] = state->deck[player][i+1];
     1275:  227:    }
      542:  228:    state->deckCount[player]--;
        -:  229:  }
     1196:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      542:  231:    state->deck[player][i] = newDeck[i];
      542:  232:    state->deckCount[player]++;
      542:  233:  }
        -:  234:
       56:  235:  return 0;
       72:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
        -:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
    #####:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
        -:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
    #####:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
function handCard called 5 returned 100% blocks executed 100%
        -:  322:int handCard(int handPos, struct gameState *state) {
        5:  323:  int currentPlayer = whoseTurn(state);
        5:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 74 returned 100% blocks executed 100%
        -:  327:int supplyCount(int card, struct gameState *state) {
       74:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 45035 returned 100% blocks executed 100%
        -:  353:int whoseTurn(struct gameState *state) {
    45035:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 8 returned 100% blocks executed 100%
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
        8:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
      184:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9%
       84:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       84:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
       84:  366:  }
        8:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
        8:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75%
branch  1 taken 25%
        6:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        6:  372:  }
        -:  373:  else{
        2:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
        8:  377:  state->outpostPlayed = 0;
        8:  378:  state->phase = 0;
        8:  379:  state->numActions = 1;
        8:  380:  state->coins = 0;
        8:  381:  state->numBuys = 1;
        8:  382:  state->playedCardCount = 0;
        8:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       96:  387:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       40:  388:    drawCard(state->whoseTurn, state);//Draw a card
       40:  389:  }
        -:  390:
        -:  391:  //Update money
        8:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
        8:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
    #####:  414:	}
    #####:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
    #####:  422:}
        -:  423:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
        -:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
    #####:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
    #####:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
    #####:  491:	}
    #####:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
    #####:  502:	}
    #####:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
    #####:  512:	}
    #####:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
    #####:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
    #####:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 215097 returned 100% blocks executed 100%
        -:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
   215097:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
      192:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 85%
branch  1 taken 15%
       82:  541:      state->deck[player][i] = state->discard[player][i];
       82:  542:      state->discard[player][i] = -1;
       82:  543:    }
        -:  544:
       14:  545:    state->deckCount[player] = state->discardCount[player];
       14:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
       14:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
       14:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
       14:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
       14:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
       14:  566:    if (deckCounter == 0)
branch  0 taken 29%
branch  1 taken 71%
        4:  567:      return -1;
        -:  568:
       10:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       10:  570:    state->deckCount[player]--;
       10:  571:    state->handCount[player]++;//Increment hand count
       10:  572:  }
        -:  573:
        -:  574:  else{
   215083:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
   215083:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
   215083:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   215083:  583:    state->deckCount[player]--;
   215083:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
   215093:  587:  return 0;
   215097:  588:}
        -:  589:
function getCost called 0 returned 0% blocks executed 0%
        -:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
    #####:  651:}
        -:  652:
function cardEffect called 45022 returned 100% blocks executed 3%
        -:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
    45022:  660:  int currentPlayer = whoseTurn(state);
    45022:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
    45022:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
    45022:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
    45022:  667:  int z = 0;// this is the counter for the temp hand
    45022:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50%
branch  1 taken 50%
    22356:  669:    nextPlayer = 0;
    22356:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
    45022:  674:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
    15016:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
    15016:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
    #####:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
    #####:  698:	    }
    #####:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
    #####:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
    #####:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
    #####:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
    #####:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
    #####:  770:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  return -1;
        -:  778:	}
        -:  779:
    #####:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
    #####:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	{
    #####:  788:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  789:	    {
    #####:  790:	      discardCard(i, currentPlayer, state, 0);			
    #####:  791:	      break;
        -:  792:	    }
    #####:  793:	}
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
    #####:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
    15004:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    15002:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    15002:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    15002:  835:      discardCard(handPos, currentPlayer, state, 0);
    15002:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
    #####:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  864:		isGameOver(state);
    #####:  865:	      }
    #####:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
    #####:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
    #####:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:	    isGameOver(state);
    #####:  882:	  }
    #####:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
    #####:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
    #####:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  941:			{
    #####:  942:			  drawCard(i, state);
    #####:  943:			}
    #####:  944:		    }
    #####:  945:		}
    #####:  946:	    }
        -:  947:				
    #####:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
    #####:  958:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
    #####:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
    #####:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
    #####:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
    #####:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
    #####: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1019:	  state->coins += 2;
    #####: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
    #####: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
    #####: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1049:	    {
    #####: 1050:	      j++;
    #####: 1051:	    }
    #####: 1052:	}
    #####: 1053:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1070:	    }
    #####: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
    #####: 1086:	    }
    #####: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
    #####: 1137:	}
    #####: 1138:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
    45022: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
function adventurer_effect called 15016 returned 100% blocks executed 100%
        -: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
    15016: 1167:	int drawntreasure = 0;
    15016: 1168:	int z =0; 
        -: 1169:	  
   309990: 1170:	while(drawntreasure<2){
branch  0 taken 90%
branch  1 taken 10%
   139979: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
       12: 1172:			shuffle(currentPlayer, state);
       12: 1173:		}
        -: 1174:	
   139979: 1175:		drawCard(currentPlayer, state);
   139979: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   390016: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 93%
branch  1 taken 7%
branch  2 taken 92%
branch  3 taken 8%
branch  4 taken 8%
branch  5 taken 92%
    30032: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
   109947: 1181:			temphand[z]=cardDrawn;
   109947: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   109947: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
   249926: 1187:	while(z-1>=0){
branch  0 taken 88%
branch  1 taken 12%
   109947: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
   109947: 1189:		z=z-1;
        -: 1190:    }
    15016: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
function smithy_effect called 15004 returned 100% blocks executed 100%
        -: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
   150040: 1198:    for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20%
    60016: 1199:	  drawCard(currentPlayer, state);
    60016: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
    15004: 1203:    discardCard(handPos, currentPlayer, state, 0);
    15004: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
function embargo_effect called 0 returned 0% blocks executed 0%
        -: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
    #####: 1229:}
        -: 1230:
function cutpurse_effect called 0 returned 0% blocks executed 0%
        -: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
    #####: 1256:		}
        -: 1257:					
    #####: 1258:	    }
        -: 1259:				
    #####: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
function seahag_effect called 0 returned 0% blocks executed 0%
        -: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1271:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1277:		}
    #####: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
function discardCard called 30046 returned 100% blocks executed 90%
        -: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
    30046: 1291:  if (trashFlag < 1)
branch  0 taken 99%
branch  1 taken 1%
        -: 1292:    {
        -: 1293:      //add card to played pile
    30026: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    30026: 1295:      state->playedCardCount++;
    30026: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
    30046: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
    30046: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
       12: 1305:      state->handCount[currentPlayer]--;
       12: 1306:    }
    30034: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
    #####: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
    30034: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
    30034: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
    30034: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
    30046: 1322:  return 0;
        -: 1323:}
        -: 1324:
function gainCard called 20 returned 100% blocks executed 100%
        -: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1330:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 40%
branch  1 taken 60%
        -: 1331:    {
        8: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
       12: 1340:  if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1341:    {
        4: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1343:      state->deckCount[player]++;
        4: 1344:    }
        8: 1345:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1346:    {
        4: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1348:      state->handCount[player]++;
        4: 1349:    }
        -: 1350:  else
        -: 1351:    {
        4: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
       12: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
       12: 1359:  return 0;
       20: 1360:}
        -: 1361:
function updateCoins called 20 returned 100% blocks executed 85%
        -: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       20: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
      240: 1370:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1371:    {
      100: 1372:      if (state->hand[player][i] == copper)
branch  0 taken 76%
branch  1 taken 24%
        -: 1373:	{
       76: 1374:	  state->coins += 1;
       76: 1375:	}
       24: 1376:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
    #####: 1379:	}
       24: 1380:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
    #####: 1383:	}	
      100: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       20: 1387:  state->coins += bonus;
        -: 1388:
       20: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
cardtest4.c:
Testing the mine card:
Testing Mine converting copper to copper:
	Testing that copper was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 1

	Testing that copper was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 2

	Testing that copper was removed from play:
		Checking the discard pile for copper --> Expected: 1 result :1
			***Assert Passed***

	Testing that the copper was added to the hand:
		Checking the hand for copper --> Expected: 1 Result: 1
			***Assert Passed***

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 3

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting copper to silver:
	Testing that copper was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 4
			***Assert Passed***

	Testing that copper was removed from the hand:
		Expected: 1 Result: 1
			***Assert Passed***

	Testing that copper was removed from play:
		Checking the discard pile for copper --> Expected: 1 result :1
			***Assert Passed***

	Testing that the silver was added to the hand:
		Checking the hand for silver --> Expected: 2 Result: 2
			***Assert Passed***

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 11
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting silver to copper:
	Testing that silver was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 4

	Testing that silver was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 5

	Testing that silver was removed from play:
		Checking the discard pile for silver --> Expected: 1 result :1
			***Assert Passed***

	Testing that the copper was added to the hand:
		Checking the hand for copper --> Expected: 2 Result: 1
			***Assert failed, total fails***: 6

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 7

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting silver to silver:
	Testing that silver was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 8

	Testing that silver was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 9

	Testing that silver was removed from play:
		Checking the discard pile for silver --> Expected: 1 result :1
			***Assert Passed***

	Testing that the silver was added to the hand:
		Checking the hand for silver --> Expected: 1 Result: 1
			***Assert Passed***

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 10

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting silver to gold:
	Testing that silver was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 4
			***Assert Passed***

	Testing that silver was removed from the hand:
		Expected: 1 Result: 1
			***Assert Passed***

	Testing that silver was removed from play:
		Checking the discard pile for silver --> Expected: 1 result :1
			***Assert Passed***

	Testing that the gold was added to the hand:
		Checking the hand for gold --> Expected: 2 Result: 2
			***Assert Passed***

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 11
			***Assert Passed***

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting gold to copper:
	Testing that gold was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 11

	Testing that gold was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 12

	Testing that gold was removed from play:
		Checking the discard pile for gold --> Expected: 1 result :1
			***Assert Passed***

	Testing that the copper was added to the hand:
		Checking the hand for copper --> Expected: 2 Result: 1
			***Assert failed, total fails***: 13

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 14

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting gold to silver:
	Testing that gold was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 15

	Testing that gold was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 16

	Testing that gold was removed from play:
		Checking the discard pile for gold --> Expected: 1 result :1
			***Assert Passed***

	Testing that the silver was added to the hand:
		Checking the hand for silver --> Expected: 2 Result: 1
			***Assert failed, total fails***: 17

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 18

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
Testing Mine converting gold to gold:
	Testing that gold was removed from the hand along with mine:
		Cards in hand --> Expected: 4 result: 5
			***Assert failed, total fails***: 19

	Testing that gold was removed from the hand:
		Expected: 1 Result: 0
			***Assert failed, total fails***: 20

	Testing that gold was removed from play:
		Checking the discard pile for gold --> Expected: 1 result :1
			***Assert Passed***

	Testing that the gold was added to the hand:
		Checking the hand for gold --> Expected: 1 Result: 1
			***Assert Passed***

	Testing that mine was added to the played pile:
		Checking the played pile for mine --> Expected: 11 Result: 387389207
			***Assert failed, total fails***: 21

		Checking that other player's states were not mutated:
			Checking player 1's hand:
			Checking player 1's deck:
			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 1's discard:
			Checking player 2's hand:
			Checking player 2's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Checking player 2's discard:
			Checking player 3's hand:
			Checking player 3's deck:
			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 1, result: 1
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Expected: 4, result: 4
			***Assert Passed***

			Checking player 3's discard:
FINAL RESULT: 21 FAILURES
File 'cardtest4.c'
Lines executed:90.00% of 120
cardtest4.c:creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:37.29% of 649
Branches executed:40.53% of 417
Taken at least once:27.34% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand);
        -:    9:int smithy_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   10:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer);
        -:   11:int cutpurse_effect(int handPos, struct gameState *state, int currentPlayer);
        -:   12:int seahag_effect(struct gameState *state, int currentPlayer);
        -:   13:
        -:   14:
function compare called 795 returned 100% blocks executed 100%
        -:   15:int compare(const void* a, const void* b) {
      795:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 1%
branch  1 taken 99%
        4:   17:    return 1;
      791:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 34%
branch  1 taken 66%
      266:   19:    return -1;
      525:   20:  return 0;
      795:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
        -:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 13 returned 100% blocks executed 94%
        -:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
       13:   51:  SelectStream(1);
       13:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
       26:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
       13:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
      286:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   65:    {
     2860:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   67:        {
     2470:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
     1300:   72:        }
      130:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
       13:   80:  if (numPlayers == 2)
branch  0 taken 8%
branch  1 taken 92%
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 10;
        1:   83:    }
       12:   84:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
    #####:   87:    }
        -:   88:  else
        -:   89:    {
       12:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
       13:   94:  if (numPlayers == 2)
branch  0 taken 8%
branch  1 taken 92%
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 8;
        1:   97:      state->supplyCount[duchy] = 8;
        1:   98:      state->supplyCount[province] = 8;
        1:   99:    }
        -:  100:  else
        -:  101:    {
       12:  102:      state->supplyCount[estate] = 12;
       12:  103:      state->supplyCount[duchy] = 12;
       12:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
       13:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  109:  state->supplyCount[silver] = 40;
       13:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      546:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  114:    {
     4290:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  116:	{
     2015:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
      247:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  121:		{
       26:  122:		  if (numPlayers == 2){ 
branch  0 taken 8%
branch  1 taken 92%
        2:  123:		    state->supplyCount[i] = 8; 
        2:  124:		  }
       24:  125:		  else{ state->supplyCount[i] = 12; }
       26:  126:		}
        -:  127:	      else
        -:  128:		{
      104:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
      130:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     1885:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
     1885:  137:	}
        -:  138:
      260:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
      126:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  146:    {
       50:  147:      state->deckCount[i] = 0;
      400:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  149:	{
      150:  150:	  state->deck[i][j] = estate;
      150:  151:	  state->deckCount[i]++;
      150:  152:	}
      800:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  154:	{
      350:  155:	  state->deck[i][j] = copper;
      350:  156:	  state->deckCount[i]++;		
      350:  157:	}
       50:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
      126:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  162:    {
       50:  163:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
       50:  167:    }
        -:  168:
        -:  169:  //draw player hands
      126:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 79%
branch  1 taken 21%
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       50:  173:      state->handCount[i] = 0;
       50:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
       50:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      728:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  184:    {
      351:  185:      state->embargoTokens[i] = 0;
      351:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
       13:  189:  state->outpostPlayed = 0;
       13:  190:  state->phase = 0;
       13:  191:  state->numActions = 1;
       13:  192:  state->numBuys = 1;
       13:  193:  state->playedCardCount = 0;
       13:  194:  state->whoseTurn = 0;
       13:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
      156:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       65:  200:    drawCard(state->whoseTurn, state);
       65:  201:  }
        -:  202:
       13:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
       13:  205:  return 0;
       13:  206:}
        -:  207:
function shuffle called 76 returned 100% blocks executed 100%
        -:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       76:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       76:  216:  if (state->deckCount[player] < 1)
branch  0 taken 21%
branch  1 taken 79%
       16:  217:    return -1;
       60:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     1284:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      582:  222:    card = floor(Random() * state->deckCount[player]);
      582:  223:    newDeck[newDeckPos] = state->deck[player][card];
      582:  224:    newDeckPos++;
     3912:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
     1374:  226:      state->deck[player][i] = state->deck[player][i+1];
     1374:  227:    }
      582:  228:    state->deckCount[player]--;
        -:  229:  }
     1284:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      582:  231:    state->deck[player][i] = newDeck[i];
      582:  232:    state->deckCount[player]++;
      582:  233:  }
        -:  234:
       60:  235:  return 0;
       76:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
        -:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
    #####:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
        -:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
    #####:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
function handCard called 5 returned 100% blocks executed 100%
        -:  322:int handCard(int handPos, struct gameState *state) {
        5:  323:  int currentPlayer = whoseTurn(state);
        5:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 76 returned 100% blocks executed 100%
        -:  327:int supplyCount(int card, struct gameState *state) {
       76:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 45043 returned 100% blocks executed 100%
        -:  353:int whoseTurn(struct gameState *state) {
    45043:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 8 returned 100% blocks executed 100%
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
        8:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
      184:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9%
       84:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       84:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
       84:  366:  }
        8:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
        8:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75%
branch  1 taken 25%
        6:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        6:  372:  }
        -:  373:  else{
        2:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
        8:  377:  state->outpostPlayed = 0;
        8:  378:  state->phase = 0;
        8:  379:  state->numActions = 1;
        8:  380:  state->coins = 0;
        8:  381:  state->numBuys = 1;
        8:  382:  state->playedCardCount = 0;
        8:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       96:  387:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       40:  388:    drawCard(state->whoseTurn, state);//Draw a card
       40:  389:  }
        -:  390:
        -:  391:  //Update money
        8:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
        8:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
    #####:  414:	}
    #####:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
    #####:  422:}
        -:  423:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
        -:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
    #####:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
    #####:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
    #####:  491:	}
    #####:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
    #####:  502:	}
    #####:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
    #####:  512:	}
    #####:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
    #####:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
    #####:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 215102 returned 100% blocks executed 100%
        -:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
   215102:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
      192:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 85%
branch  1 taken 15%
       82:  541:      state->deck[player][i] = state->discard[player][i];
       82:  542:      state->discard[player][i] = -1;
       82:  543:    }
        -:  544:
       14:  545:    state->deckCount[player] = state->discardCount[player];
       14:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
       14:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
       14:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
       14:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
       14:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
       14:  566:    if (deckCounter == 0)
branch  0 taken 29%
branch  1 taken 71%
        4:  567:      return -1;
        -:  568:
       10:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       10:  570:    state->deckCount[player]--;
       10:  571:    state->handCount[player]++;//Increment hand count
       10:  572:  }
        -:  573:
        -:  574:  else{
   215088:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
   215088:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
   215088:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   215088:  583:    state->deckCount[player]--;
   215088:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
   215098:  587:  return 0;
   215102:  588:}
        -:  589:
function getCost called 16 returned 100% blocks executed 19%
        -:  590:int getCost(int cardNumber)
        -:  591:{
       16:  592:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 31%
branch  5 taken 38%
branch  6 taken 31%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
        5:  603:      return 0;
        -:  604:    case silver:
        6:  605:      return 3;
        -:  606:    case gold:
        5:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
       16:  651:}
        -:  652:
function cardEffect called 45030 returned 100% blocks executed 9%
        -:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
    45030:  660:  int currentPlayer = whoseTurn(state);
    45030:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
    45030:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
    45030:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
    45030:  667:  int z = 0;// this is the counter for the temp hand
    45030:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50%
branch  1 taken 50%
    22356:  669:    nextPlayer = 0;
    22356:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
    45030:  674:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 1%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  675:    {
        -:  676:	//refactored adventurer
        -:  677:    case adventurer:
        -:  678:	;
    15016:  679:	int advntr = adventurer_effect(state, currentPlayer, temphand);
    15016:  680:      	return advntr;
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
    #####:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
    #####:  698:	    }
    #####:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
        -:  703:			
    #####:  704:      return 0;
        -:  705:			
        -:  706:    case feast:
        -:  707:      //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  720:	  if (DEBUG)
        -:  721:	    printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	  }
    #####:  726:	}
    #####:  727:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  728:	  printf("That card is too expensive!\n");
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	  }
    #####:  733:	}
        -:  734:	else{
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
    #####:  740:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	  x = 0;//No more buying cards
        -:  742:
        -:  743:	  if (DEBUG){
        -:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
        -:  747:	}
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:	state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	temphand[i] = -1;
    #####:  754:      }
        -:  755:      //Reset Hand
        -:  756:      			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case gardens:
    #####:  760:      return -1;
        -:  761:			
        -:  762:    case mine:
        8:  763:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
       16:  765:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:		
       16:  770:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
        8:  775:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 taken 75%
branch  1 taken 25%
        -:  776:	{
        6:  777:	  return -1;
        -:  778:	}
        -:  779:
        2:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
        2:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
       10:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  787:	{
        5:  788:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 40%
branch  1 taken 60%
        -:  789:	    {
        2:  790:	      discardCard(i, currentPlayer, state, 0);			
        2:  791:	      break;
        -:  792:	    }
        3:  793:	}
        -:  794:			
        2:  795:      return 0;
        -:  796:			
        -:  797:    case remodel:
    #####:  798:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  return -1;
        -:  803:	}
        -:  804:
    #####:  805:      gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
    #####:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  812:	{
    #####:  813:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  814:	    {
    #####:  815:	      discardCard(i, currentPlayer, state, 0);			
    #####:  816:	      break;
        -:  817:	    }
    #####:  818:	}
        -:  819:
        -:  820:
    #####:  821:      return 0;
        -:  822:	  
        -:  823:	//refactored smithy
        -:  824:    case smithy:
    15004:  825:		return smithy_effect(handPos, state, currentPlayer);
        -:  826:		
        -:  827:    case village:
        -:  828:      //+1 Card
    15002:  829:      drawCard(currentPlayer, state);
        -:  830:			
        -:  831:      //+2 Actions
    15002:  832:      state->numActions = state->numActions + 2;
        -:  833:			
        -:  834:      //discard played card from hand
    15002:  835:      discardCard(handPos, currentPlayer, state, 0);
    15002:  836:      return 0;
        -:  837:		
        -:  838:    case baron:
    #####:  839:      state->numBuys++;//Increase buys by 1!
    #####:  840:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  841:	int p = 0;//Iterator for hand!
    #####:  842:	int card_not_discarded = 1;//Flag for discard set!
    #####:  843:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  844:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  845:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  846:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  847:	    state->discardCount[currentPlayer]++;
    #####:  848:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  849:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  850:	    }
    #####:  851:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  852:	    state->handCount[currentPlayer]--;
    #####:  853:	    card_not_discarded = 0;//Exit the loop
    #####:  854:	  }
    #####:  855:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  856:	    if(DEBUG) {
        -:  857:	      printf("No estate cards in your hand, invalid choice\n");
        -:  858:	      printf("Must gain an estate if there are any\n");
        -:  859:	    }
    #####:  860:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	      gainCard(estate, state, 0, currentPlayer);
    #####:  862:	      state->supplyCount[estate]--;//Decrement estates
    #####:  863:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  864:		isGameOver(state);
    #####:  865:	      }
    #####:  866:	    }
    #####:  867:	    card_not_discarded = 0;//Exit the loop
    #####:  868:	  }
        -:  869:			    
        -:  870:	  else{
    #####:  871:	    p++;//Next card
        -:  872:	  }
        -:  873:	}
    #####:  874:      }
        -:  875:			    
        -:  876:      else{
    #####:  877:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  879:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  880:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:	    isGameOver(state);
    #####:  882:	  }
    #####:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case great_hall:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+1 Actions
    #####:  894:      state->numActions++;
        -:  895:			
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case minion:
        -:  901:      //+1 action
    #####:  902:      state->numActions++;
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:			
    #####:  907:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  908:	{
    #####:  909:	  state->coins = state->coins + 2;
    #####:  910:	}
        -:  911:			
    #####:  912:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  913:	{
        -:  914:	  //discard hand
    #####:  915:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  916:	    {
    #####:  917:	      discardCard(handPos, currentPlayer, state, 0);
        -:  918:	    }
        -:  919:				
        -:  920:	  //draw 4
    #####:  921:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      drawCard(currentPlayer, state);
    #####:  924:	    }
        -:  925:				
        -:  926:	  //other players discard hand and redraw if hand size > 4
    #####:  927:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	    {
    #####:  929:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  930:		{
    #####:  931:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  932:		    {
        -:  933:		      //discard hand
    #####:  934:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  935:			{
    #####:  936:			  discardCard(handPos, i, state, 0);
        -:  937:			}
        -:  938:							
        -:  939:		      //draw 4
    #####:  940:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  941:			{
    #####:  942:			  drawCard(i, state);
    #####:  943:			}
    #####:  944:		    }
    #####:  945:		}
    #####:  946:	    }
        -:  947:				
    #####:  948:	}
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case steward:
    #####:  952:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  953:	{
        -:  954:	  //+2 cards
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
    #####:  958:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //+2 coins
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:      else
        -:  964:	{
        -:  965:	  //trash 2 cards in hand
    #####:  966:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  967:	  discardCard(choice3, currentPlayer, state, 1);
        -:  968:	}
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case tribute:
    #####:  975:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  976:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  977:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	  state->deckCount[nextPlayer]--;
    #####:  979:	}
    #####:  980:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  982:	  state->discardCount[nextPlayer]--;
    #####:  983:	}
        -:  984:	else{
        -:  985:	  //No Card to Reveal
        -:  986:	  if (DEBUG){
        -:  987:	    printf("No cards to reveal\n");
        -:  988:	  }
        -:  989:	}
    #####:  990:      }
        -:  991:	    
        -:  992:      else{
    #####:  993:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  995:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  996:	    state->deckCount[nextPlayer]++;
    #####:  997:	    state->discard[nextPlayer][i] = -1;
    #####:  998:	    state->discardCount[nextPlayer]--;
    #####:  999:	  }
        -: 1000:			    
    #####: 1001:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1002:	} 
    #####: 1003:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    #####: 1006:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
        -: 1009:      }    
        -: 1010:		       
    #####: 1011:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1012:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1013:	state->playedCardCount++;
    #####: 1014:	tributeRevealedCards[1] = -1;
    #####: 1015:      }
        -: 1016:
    #####: 1017:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1019:	  state->coins += 2;
    #####: 1020:	}
        -: 1021:		    
    #####: 1022:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
    #####: 1025:	}
        -: 1026:	else{//Action Card
    #####: 1027:	  state->numActions = state->numActions + 2;
        -: 1028:	}
    #####: 1029:      }
        -: 1030:	    
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case ambassador:
    #####: 1034:      j = 0;		//used to check if player has enough cards to discard
        -: 1035:
    #####: 1036:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1037:	{
    #####: 1038:	  return -1;				
        -: 1039:	}
        -: 1040:
    #####: 1041:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
    #####: 1046:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1049:	    {
    #####: 1050:	      j++;
    #####: 1051:	    }
    #####: 1052:	}
    #####: 1053:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1070:	    }
    #####: 1071:	}
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
        -: 1076:      //trash copies of cards returned to supply
    #####: 1077:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	    {
    #####: 1081:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1082:		{
    #####: 1083:		  discardCard(i, currentPlayer, state, 1);
    #####: 1084:		  break;
        -: 1085:		}
    #####: 1086:	    }
    #####: 1087:	}			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:	  
        -: 1091:	//refactored cutpurse
        -: 1092:    case cutpurse:
    #####: 1093:      return cutpurse_effect(handPos, state, currentPlayer);
        -: 1094:
        -: 1095:	//refactored embargo	
        -: 1096:    case embargo: 		
    #####: 1097:		return embargo_effect(handPos, choice1, state, currentPlayer);
        -: 1098:		
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:		//set outpost flag
    #####: 1102:		state->outpostPlayed++;
        -: 1103:			
        -: 1104:		//discard card
    #####: 1105:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:		return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
    #####: 1115:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1116:	  //trash card
    #####: 1117:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1118:	}
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case sea_hag:
    #####: 1125:		return seahag_effect(state, currentPlayer);
        -: 1126:		
        -: 1127:    case treasure_map:
        -: 1128:      //search hand for another treasure_map
    #####: 1129:      index = -1;
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1133:	    {
    #####: 1134:	      index = i;
    #####: 1135:	      break;
        -: 1136:	    }
    #####: 1137:	}
    #####: 1138:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
        -: 1140:	  //trash both treasure cards
    #####: 1141:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1142:	  discardCard(index, currentPlayer, state, 1);
        -: 1143:
        -: 1144:	  //gain 4 Gold cards
    #####: 1145:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1148:	    }
        -: 1149:				
        -: 1150:	  //return success
    #####: 1151:	  return 1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //no second treasure_map found in hand
    #####: 1155:      return -1;
        -: 1156:    }
        -: 1157:	
    #####: 1158:  return -1;
    45030: 1159:}
        -: 1160:
        -: 1161:/*************************************************************************/
        -: 1162:/* REFACTORED CARD EFFECT FUNCTIONS */
        -: 1163:
function adventurer_effect called 15016 returned 100% blocks executed 100%
        -: 1164:int adventurer_effect(struct gameState *state, int currentPlayer, int *temphand){
        -: 1165:	int i;
        -: 1166:	int cardDrawn;
    15016: 1167:	int drawntreasure = 0;
    15016: 1168:	int z =0; 
        -: 1169:	  
   309990: 1170:	while(drawntreasure<2){
branch  0 taken 90%
branch  1 taken 10%
   139979: 1171:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
       12: 1172:			shuffle(currentPlayer, state);
       12: 1173:		}
        -: 1174:	
   139979: 1175:		drawCard(currentPlayer, state);
   139979: 1176:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   390016: 1177:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 93%
branch  1 taken 7%
branch  2 taken 92%
branch  3 taken 8%
branch  4 taken 8%
branch  5 taken 92%
    30032: 1178:			drawntreasure++;
        -: 1179:		
        -: 1180:		else{
   109947: 1181:			temphand[z]=cardDrawn;
   109947: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   109947: 1183:			z++;
        -: 1184:		}
        -: 1185:    }
        -: 1186:  
   249926: 1187:	while(z-1>=0){
branch  0 taken 88%
branch  1 taken 12%
   109947: 1188:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z+1]; // discard all cards in play that have been drawn
   109947: 1189:		z=z-1;
        -: 1190:    }
    15016: 1191:    return 0;
        -: 1192:	
        -: 1193:}
        -: 1194:
function smithy_effect called 15004 returned 100% blocks executed 100%
        -: 1195:int smithy_effect(int handPos, struct gameState *state, int currentPlayer) {
        -: 1196:	int i;
        -: 1197:	//+3 Cards
   150040: 1198:    for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20%
    60016: 1199:	  drawCard(currentPlayer, state);
    60016: 1200:	}
        -: 1201:			
        -: 1202:    //discard card from hand
    15004: 1203:    discardCard(handPos, currentPlayer, state, 0);
    15004: 1204:    return 0;
        -: 1205:	
        -: 1206:}
        -: 1207:
function embargo_effect called 0 returned 0% blocks executed 0%
        -: 1208:int embargo_effect(int handPos, int choice1, struct gameState *state, int currentPlayer){
        -: 1209:	
        -: 1210:	//+2 Coins
    #####: 1211:    state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:    //see if selected pile is in play
    #####: 1214:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:    //add embargo token to selected supply pile
    #####: 1220:    state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:    //trash card
    #####: 1223:    discardCard(handPos, currentPlayer, state, 1);		
        -: 1224:	
    #####: 1225:    return 0;
        -: 1226:		
        -: 1227:	
        -: 1228:	
    #####: 1229:}
        -: 1230:
function cutpurse_effect called 0 returned 0% blocks executed 0%
        -: 1231:int cutpurse_effect(int handPos, struct gameState *state,   int currentPlayer ){
        -: 1232:	int i, j, k;
    #####: 1233:    updateCoins(currentPlayer, state, 2);
        -: 1234:    
        -: 1235:	//for (i = 0; i < state->numPlayers; i++)
    #####: 1236:	for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1239:	    {
    #####: 1240:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1241:		{
    #####: 1242:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1243:		    {
    #####: 1244:		      discardCard(j, i, state, 0);
    #####: 1245:		      break;
        -: 1246:		    }
    #####: 1247:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1248:		    {
    #####: 1249:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1250:			{
        -: 1251:			  if (DEBUG)
        -: 1252:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1253:			}	
    #####: 1254:		      break;
        -: 1255:		    }		
    #####: 1256:		}
        -: 1257:					
    #####: 1258:	    }
        -: 1259:				
    #####: 1260:	}				
        -: 1261:
        -: 1262:      //discard played card from hand
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1264:
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
function seahag_effect called 0 returned 0% blocks executed 0%
        -: 1268:int seahag_effect(struct gameState *state, int currentPlayer){
        -: 1269:	int i;	
    #####: 1270:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1271:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1272:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
        -: 1273:			//state->deckCount[i]--;
    #####: 1274:			state->discardCount[i]--;
    #####: 1275:			state->discardCount[i]++;
    #####: 1276:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1277:		}
    #####: 1278:    }
    #####: 1279:    return 0;
        -: 1280:	
        -: 1281:	
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285:/***************************************************************************/
        -: 1286:
function discardCard called 30050 returned 100% blocks executed 90%
        -: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
    30050: 1291:  if (trashFlag < 1)
branch  0 taken 99%
branch  1 taken 1%
        -: 1292:    {
        -: 1293:      //add card to played pile
    30030: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    30030: 1295:      state->playedCardCount++;
    30030: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
    30050: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
    30050: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
       12: 1305:      state->handCount[currentPlayer]--;
       12: 1306:    }
    30038: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
    #####: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
    30038: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
    30038: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
    30038: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
    30050: 1322:  return 0;
        -: 1323:}
        -: 1324:
function gainCard called 22 returned 100% blocks executed 100%
        -: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
       22: 1330:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 36%
branch  1 taken 64%
        -: 1331:    {
        8: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
       14: 1340:  if (toFlag == 1)
branch  0 taken 29%
branch  1 taken 71%
        -: 1341:    {
        4: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1343:      state->deckCount[player]++;
        4: 1344:    }
       10: 1345:  else if (toFlag == 2)
branch  0 taken 60%
branch  1 taken 40%
        -: 1346:    {
        6: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        6: 1348:      state->handCount[player]++;
        6: 1349:    }
        -: 1350:  else
        -: 1351:    {
        4: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
       14: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
       14: 1359:  return 0;
       22: 1360:}
        -: 1361:
function updateCoins called 21 returned 100% blocks executed 85%
        -: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
       21: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
      252: 1370:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1371:    {
      105: 1372:      if (state->hand[player][i] == copper)
branch  0 taken 76%
branch  1 taken 24%
        -: 1373:	{
       80: 1374:	  state->coins += 1;
       80: 1375:	}
       25: 1376:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1377:	{
    #####: 1378:	  state->coins += 2;
    #####: 1379:	}
       25: 1380:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1381:	{
    #####: 1382:	  state->coins += 3;
    #####: 1383:	}	
      105: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
       21: 1387:  state->coins += bonus;
        -: 1388:
       21: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
